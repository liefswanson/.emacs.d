;; -*- coding: utf-8-emacs -*-;; Object ergoemacs-mode-24-5-1-x86-64-unknown-linux-gnu
;; EIEIO PERSISTENT OBJECT
(pcache-repository "ergoemacs-mode-24-5-1-x86-64-unknown-linux-gnu"
  :file "ergoemacs-mode-24-5-1-x86-64-unknown-linux-gnu"
  :version "0.3"
  :entries #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (ergoemacs--last-start-emacs-state [object pcache-entry "pcache-entry" 1442350750.3141403 7776000 "35f295b3c0549024d90d17d116f2e492"] ergoemacs-require [object pcache-entry "pcache-entry" 1442351083.082536 7776000 ((undo-tree nil nil nil) (unicode-fonts nil nil nil))] nil [object pcache-entry "pcache-entry" 1442351083.1457186 7776000 nil] ergoemacs-component-hash [object pcache-entry "pcache-entry" 1442351083.1228075 7776000 #s(hash-table size 97 test equal rehash-size 1.5 rehash-threshold 0.8 data ("unicode-fonts" [cl-struct-ergoemacs-component-struct "unicode-fonts" (:name "unicode-fonts" :description "unicode-fonts" :ensure t :ergoemacs-require unicode-fonts :package-name unicode-fonts :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") nil #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) unicode-fonts nil t "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) unicode-fonts programmer-dv))))))) global-map nil] "undo-tree" [cl-struct-ergoemacs-component-struct "undo-tree" (:name "undo-tree" :description "undo-tree" :ensure t :ergoemacs-require undo-tree :package-name undo-tree :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") nil #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) undo-tree nil t "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) undo-tree programmer-dv))))))) global-map nil] "standard-vars" [cl-struct-ergoemacs-component-struct "standard-vars" (:name "standard-vars" :description "Enabled/changed variables/modes" :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") nil #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil ((fancy-about-text (lambda nil (\` ((:face (variable-pitch font-lock-comment-face) "This is " :link ("GNU Emacs" (\, (lambda (_button) (browse-url "http://www.gnu.org/software/emacs/"))) "Browse http://www.gnu.org/software/emacs/") ", one component of the " :link (\, (lambda nil (if (eq system-type (quote gnu/linux)) (\` ("GNU/Linux" (\, (lambda (_button) (browse-url "http://www.gnu.org/gnu/linux-and-gnu.html"))) "Browse http://www.gnu.org/gnu/linux-and-gnu.html")) (\` ("GNU" (\, (lambda (_button) (describe-gnu-project))) "Display info on the GNU project."))))) " operating system.
" :face (variable-pitch font-lock-builtin-face) "
" (\, (lambda nil (emacs-version))) "
" :face (variable-pitch (:height 0.8)) (\, (lambda nil emacs-copyright)) "

" :face variable-pitch :link ("Authors" (\, (lambda (_button) (view-file (expand-file-name "AUTHORS" data-directory)) (goto-char (point-min))))) "	Many people have contributed code included in GNU Emacs
" :link ("Contributing" (\, (lambda (_button) (view-file (expand-file-name "CONTRIBUTE" data-directory)) (goto-char (point-min))))) "	How to contribute improvements to Emacs
" "
" :link ("GNU and Freedom" (\, (lambda (_button) (describe-gnu-project)))) "	Why we developed GNU Emacs, and the GNU operating system
" :link ("Absence of Warranty" (\, (lambda (_button) (describe-no-warranty)))) "	GNU Emacs comes with " :face (variable-pitch (:slant oblique)) "ABSOLUTELY NO WARRANTY
" :face variable-pitch :link ("Copying Conditions" (\, (lambda (_button) (describe-copying)))) "	Conditions for redistributing and changing Emacs
" :link ("Getting New Versions" (\, (lambda (_button) (describe-distribution)))) "	How to obtain the latest version of Emacs
" :link ("Ordering Manuals" (\, (lambda (_button) (view-order-manuals)))) "	Buying printed manuals from the FSF
" "
")))) nil) (fancy-startup-text (lambda nil (\` ((:face (variable-pitch font-lock-comment-face) "Welcome to " :link ("GNU Emacs" (\, (lambda (_button) (browse-url "http://www.gnu.org/software/emacs/"))) "Browse http://www.gnu.org/software/emacs/") ", one component of the " :link (\, (lambda nil (if (eq system-type (quote gnu/linux)) (\` ("GNU/Linux" (\, (lambda (_button) (browse-url "http://www.gnu.org/gnu/linux-and-gnu.html"))) "Browse http://www.gnu.org/gnu/linux-and-gnu.html")) (\` ("GNU" (\, (lambda (_button) (describe-gnu-project))) "Display info on the GNU project"))))) " operating system.

" "
" :link ("View Emacs Manual" (\, (lambda (_button) (info-emacs-manual)))) "	View the Emacs manual using Info
" :link ("Absence of Warranty" (\, (lambda (_button) (describe-no-warranty)))) "	GNU Emacs comes with " :face (variable-pitch (:slant oblique)) "ABSOLUTELY NO WARRANTY
" :face variable-pitch :link ("Copying Conditions" (\, (lambda (_button) (describe-copying)))) "	Conditions for redistributing and changing Emacs
" :link ("Ordering Manuals" (\, (lambda (_button) (view-order-manuals)))) "	Purchasing printed copies of manuals
" "
")))) nil) (initial-scratch-message (lambda nil (substitute-command-keys ";; This buffer is for notes you don't want to save, and for Lisp evaluation.
;; If you want to create a file, visit that file with \\[find-file],
;; then enter the text in that file's own buffer.")) nil) (scroll-error-top-bottom (lambda nil t) nil) (ido-vertical-define-keys (lambda nil (quote C-n-C-p-up-down-left-right)) nil) (org-special-ctrl-a/e (lambda nil t) nil) (set-mark-command-repeat-pop (lambda nil t) nil) (org-support-shift-select (lambda nil t) nil) (org-CUA-compatible (lambda nil t) nil) (dirtrack-directory-change-hook ergoemacs-shell-here-directory-change-hook (t nil nil)) (kill-buffer-hook ergoemacs-save-buffer-to-recently-closed (t nil nil)) (shell-mode-hook ergoemacs-shell-here-hook (t nil nil)) (eshell-post-command-hook ergoemacs-shell-here-directory-change-hook (t nil nil)) (shift-select-mode (lambda nil t) nil) (delete-selection-mode (lambda nil 1) nil) (recentf-menu-items-for-commands (lambda nil (list ["Open Last Closed" ergoemacs-open-last-closed :help "Remove duplicates, and obsoletes files from the recent list" :active t] ["Cleanup list" recentf-cleanup :help "Remove duplicates, and obsoletes files from the recent list" :active t] ["Edit list..." recentf-edit-list :help "Manually remove files from the recent list" :active t] ["Save list now" recentf-save-list :help "Save the list of recently opened files now" :active t] ["Options..." (customize-group "recentf") :help "Customize recently opened files menu and options" :active t])) nil) (recentf-menu-before (lambda nil "Close") nil) (recentf-mode (lambda nil (if noninteractive -1 1)) nil)) nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) standard-vars programmer-dv))))))) global-map nil] "save-options-on-exit" (lambda nil "Save emacs options on exit" (ergoemacs-component-struct--create-component (quote (:name "save-options-on-exit" :description "Save emacs options on exit")) (quote (lambda nil (ergoemacs-component-struct--set (quote kill-emacs-hook) (quote ergoemacs-exit-customize-save-customized) (list t nil nil)))) "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc")) "standard-fixed" [cl-struct-ergoemacs-component-struct "standard-fixed" (:name "standard-fixed" :description "Standard Fixed Shortcuts" :variable-reg nil :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") (keymap (M-S-prior . backward-page) (M-S-next . forward-page) (25 . undo-tree-redo) (24 keymap (2 . ibuffer) (ergoemacs-timeout . ergoemacs-cut-line-or-region)) (12 . goto-line) (67108960 . other-frame) (33554455 . delete-frame) (33554438 . occur) (C-S-prior . ergoemacs-previous-emacs-buffer) (C-S-next . ergoemacs-next-emacs-buffer) (67108927 . info) (67108925 . text-scale-increase) (C-prior . ergoemacs-previous-user-buffer) (C-pause . kill-compilation) (C-next . ergoemacs-next-user-buffer) (67108912 . ergoemacs-text-scale-normal-size) (67108911 . info) (67108910 . keyboard-quit) (67108909 . text-scale-decrease) (67108907 . text-scale-increase) (S-mouse-1 . ignore) (S-down-mouse-1 . mouse-save-then-kill) (M-f4 . ergoemacs-delete-frame) (18 . revert-buffer) (f5 . revert-buffer) (M-down . ergoemacs-forward-block) (M-up . ergoemacs-backward-block) (C-right . forward-word) (C-left . backward-word) (C-end . end-of-buffer) (C-home . beginning-of-buffer) (end . move-end-of-line) (home . move-beginning-of-line) (C-delete . kill-word) (27 keymap (S-prior . backward-page) (S-next . forward-page) (f4 . ergoemacs-delete-frame) (down . ergoemacs-forward-block) (up . ergoemacs-backward-block) (delete . kill-word)) (M-delete . kill-word) (delete . delete-char) (33554446 . make-frame-command) (22 . ergoemacs-paste) (S-insert . ergoemacs-paste) (33554454 . ergoemacs-paste-cycle) (C-insert . ergoemacs-copy-line-or-region) (3 keymap (ergoemacs-timeout . ergoemacs-copy-line-or-region)) (S-delete . ergoemacs-cut-line-or-region) (33554458 . undo-tree-redo) (26 . undo) (1 . mark-whole-buffer) (16 . ergoemacs-print-buffer-confirm) (33554451 . write-file) (19 . save-buffer) (6 . isearch-forward) (23 . ergoemacs-close-current-buffer) (33554452 . ergoemacs-open-last-closed) (33554447 . ergoemacs-open-in-external-app) (15 . find-file) (14 . ergoemacs-new-empty-buffer) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) standard-fixed us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (undo-tree-map (keymap (27 keymap (95)) (67108927)) org-mode-map (keymap (22 . ergoemacs-org-yank) (M-right . ergoemacs-org-metaright) (M-left . ergoemacs-org-metaleft) (M-up . ergoemacs-org-metaup) (27 keymap (118 . ergoemacs-org-yank) (right . ergoemacs-org-metaright) (left . ergoemacs-org-metaleft) (up . ergoemacs-org-metaup) (down . ergoemacs-org-metadown)) (M-down . ergoemacs-org-metadown) (C-return . ergoemacs-org-insert-heading-respect-content)) browse-kill-ring-mode-map (keymap (deletechar . browse-kill-ring-delete) (6 . browse-kill-ring-search-forward)) log-edit-mode-map (keymap (remap keymap (save-buffer . log-edit-done))) eshell-mode-map (keymap (home . eshell-bol)) comint-mode-map (keymap (home . comint-bol)) helm-map (keymap (26) (23 . helm-keyboard-quit) (remap keymap (mark-whole-buffer . helm-mark-all))) isearch-mode-map (keymap (22 . ergoemacs-paste) (3 . isearch-yank-word-or-char) (33554454 . ergoemacs-paste-cycle) (S-insert . ergoemacs-paste) (27 keymap (118 . ergoemacs-paste) (99 . isearch-yank-word-or-char) (6 . isearch-occur)) (33554438 . isearch-occur)))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (icicle-mode (keymap (remap keymap (ergoemacs-apropos-user-options . apropos-user-options))) icicle-ido-like-mode (keymap (remap keymap (ergoemacs-apropos-user-options . apropos-user-options))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil ((global-map [25] (redo)) (global-map [33554458] (redo))) nil nil ([24 104] [24 23] [24 19] [19] [24 6]) nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) standard-fixed programmer-dv)))) (14 . ergoemacs-new-empty-buffer) (15 . find-file) (33554447 . ergoemacs-open-in-external-app) (33554452 . ergoemacs-open-last-closed) (23 . ergoemacs-close-current-buffer) (6 . isearch-forward) (19 . save-buffer) (33554451 . write-file) (16 . ergoemacs-print-buffer-confirm) (1 . mark-whole-buffer) (26 . undo) (33554458 . undo-tree-redo) (S-delete . ergoemacs-cut-line-or-region) (3 keymap (ergoemacs-timeout . ergoemacs-copy-line-or-region)) (C-insert . ergoemacs-copy-line-or-region) (33554454 . ergoemacs-paste-cycle) (S-insert . ergoemacs-paste) (22 . ergoemacs-paste) (33554446 . make-frame-command) (delete . delete-char) (M-delete . kill-word) (C-delete . kill-word) (home . move-beginning-of-line) (end . move-end-of-line) (C-home . beginning-of-buffer) (C-end . end-of-buffer) (C-left . backward-word) (C-right . forward-word) (M-up . ergoemacs-backward-block) (M-down . ergoemacs-forward-block) (f5 . revert-buffer) (18 . revert-buffer) (M-f4 . ergoemacs-delete-frame) (S-down-mouse-1 . mouse-save-then-kill) (S-mouse-1 . ignore) (67108907 . text-scale-increase) (67108909 . text-scale-decrease) (67108910 . keyboard-quit) (67108911 . info) (67108912 . ergoemacs-text-scale-normal-size) (C-next . ergoemacs-next-user-buffer) (C-pause . kill-compilation) (C-prior . ergoemacs-previous-user-buffer) (67108925 . text-scale-increase) (67108927 . info) (C-S-next . ergoemacs-next-emacs-buffer) (C-S-prior . ergoemacs-previous-emacs-buffer) (33554438 . occur) (33554455 . delete-frame) (67108960 . other-frame) (12 . goto-line) (24 keymap (ergoemacs-timeout . ergoemacs-cut-line-or-region) (2 . ibuffer)) (25 . undo-tree-redo) (M-S-next . forward-page) (27 keymap (delete . kill-word) (up . ergoemacs-backward-block) (down . ergoemacs-forward-block) (f4 . ergoemacs-delete-frame) (S-next . forward-page) (S-prior . backward-page)) (M-S-prior . backward-page)) (undo-tree-map programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key (undo-tree-map standard-fixed programmer-dv)))) (67108927) (27 keymap (56))) ((cond-map icicle-mode) programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((cond-map icicle-mode) standard-fixed programmer-dv)))) (remap keymap (ergoemacs-apropos-user-options . apropos-user-options))) ((cond-map icicle-ido-like-mode) programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((cond-map icicle-ido-like-mode) standard-fixed programmer-dv)))) (remap keymap (ergoemacs-apropos-user-options . apropos-user-options))) (isearch-mode-map programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key (isearch-mode-map standard-fixed programmer-dv)))) (33554438 . isearch-occur) (27 keymap (21 . isearch-occur) (106 . isearch-yank-word-or-char) (107 . ergoemacs-paste)) (S-insert . ergoemacs-paste) (33554454 . ergoemacs-paste-cycle) (3 . isearch-yank-word-or-char) (22 . ergoemacs-paste)))) global-map nil] "tab-indents-region" [cl-struct-ergoemacs-component-struct "tab-indents-region" (:name "tab-indents-region" :description "Tab indents selected region" :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") nil #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (mark-active (keymap (9 . indent-region)))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) tab-indents-region programmer-dv))))) ((cond-map mark-active) programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((cond-map mark-active) tab-indents-region programmer-dv)))) (9 . indent-region)))) global-map nil] "fixed-bold-italic" [cl-struct-ergoemacs-component-struct "fixed-bold-italic" (:name "fixed-bold-italic" :description "Fixed keys for bold and italic" :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") nil #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (org-mode-map (keymap (kp-tab . org-cycle) (tab . org-cycle) (2 . ergoemacs-org-bold)))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) fixed-bold-italic programmer-dv))))))) global-map nil] "backspace-is-back" [cl-struct-ergoemacs-component-struct "backspace-is-back" (:name "backspace-is-back" :description "Backspace is back, as in browsers..." :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") nil #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (Info-mode-map (keymap (27 keymap (backspace . Info-history-forward)) (M-backspace . Info-history-forward) (S-backspace . Info-history-forward) (backspace . Info-history-back)) help-mode-map (keymap (S-backspace . help-go-forward) (backspace . help-go-back)) eww-mode-map (keymap (S-backspace . eww-forward-url) (backspace . eww-back-url)))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) backspace-is-back programmer-dv))))) (help-mode-map programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key (help-mode-map backspace-is-back programmer-dv)))) (backspace . help-go-back) (S-backspace . help-go-forward)))) global-map nil] "fixed-newline" [cl-struct-ergoemacs-component-struct "fixed-newline" (:name "fixed-newline" :description "Newline and indent" :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") (keymap (27 keymap (13 . newline-and-indent)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) fixed-newline us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (helm-map (keymap (M-S-return . "C-u M-RET") (M-return . helm-execute-persistent-action) (27 keymap (S-return . "C-u M-RET") (33554445 . "C-u M-RET") (return . helm-execute-persistent-action) (13 . helm-execute-persistent-action))) helm-read-file-map (keymap (127 . ergoemacs-helm-ff-backspace) (M-return . ergoemacs-helm-ff-execute-dired-dir) (27 keymap (return . ergoemacs-helm-ff-execute-dired-dir) (13 . ergoemacs-helm-ff-execute-dired-dir)) (return . ergoemacs-helm-ff-persistent-expand-dir) (13 . ergoemacs-helm-ff-persistent-expand-dir) (remap keymap (ergoemacs-eshell-here . helm-ff-run-switch-to-eshell) (eshell . helm-ff-run-switch-to-eshell))) helm-find-files-map (keymap (M-return . ergoemacs-helm-ff-execute-dired-dir) (27 keymap (return . ergoemacs-helm-ff-execute-dired-dir) (13 . ergoemacs-helm-ff-execute-dired-dir)) (return . ergoemacs-helm-ff-persistent-expand-dir) (13 . ergoemacs-helm-ff-persistent-expand-dir) (127 . ergoemacs-helm-ff-backspace) (remap keymap (ergoemacs-eshell-here . helm-ff-run-switch-to-eshell) (eshell . helm-ff-run-switch-to-eshell))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) fixed-newline programmer-dv)))) (27 keymap (13 . newline-and-indent))))) global-map nil] "fn-keys" [cl-struct-ergoemacs-component-struct "fn-keys" (:name "fn-keys" :description "Function Keys" :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") (keymap (f4 . ergoemacs-paste) (f2 . ergoemacs-cut-line-or-region) (f8 keymap (f9 . highlight-symbol-query-replace) (f8 . highlight-symbol-at-point) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693842))) (46 . isearch-forward-symbol-at-point) (95 . isearch-forward-symbol) (119 . isearch-forward-word) (104 keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693797))) (119 . hi-lock-write-interactive-patterns) (102 . hi-lock-find-patterns) (117 . unhighlight-regexp) (46 . highlight-symbol-at-point) (108 . highlight-lines-matching-regexp) (112 . highlight-phrase) (114 . highlight-regexp)) (111 . occur)) (f6 . ergoemacs-unchorded-alt-modal) (f3 . ergoemacs-copy-line-or-region) (f12 . next-line) (f11 . previous-line) (S-f3 . ergoemacs-toggle-letter-case) (M-f5 . undo-tree-redo) (M-f3 . ergoemacs-copy-all) (27 keymap (f5 . undo-tree-redo) (f3 . ergoemacs-copy-all) (f2 . ergoemacs-cut-all)) (M-f2 . ergoemacs-cut-all) (C-f9 . highlight-symbol-next) (C-f8 . highlight-symbol-prev) (C-f5 . undo-tree-redo) (C-f4 . ergoemacs-paste-cycle) (C-f3 . ergoemacs-copy-all) (C-f2 . ergoemacs-cut-all) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) fn-keys us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (compilation-mode-map (keymap (f12 . next-error) (f11 . previous-error)) browse-kill-ring-mode-map (keymap (f12 . browse-kill-ring-next) (f11 . browse-kill-ring-previous)) comint-mode-map (keymap (M-f12 . comint-next-matching-input) (S-f12 . comint-next-matching-input) (27 keymap (f12 . comint-next-matching-input) (f11 . comint-previous-matching-input)) (M-f11 . comint-previous-matching-input) (S-f11 . comint-previous-matching-input) (f12 . comint-next-input) (f11 . comint-previous-input)) log-edit-mode-map (keymap (M-f12 . log-edit-next-comment) (S-f12 . log-edit-next-comment) (27 keymap (f12 . log-edit-next-comment) (f11 . log-edit-previous-comment)) (M-f11 . log-edit-previous-comment) (S-f11 . log-edit-previous-comment) (f12 . log-edit-next-comment) (f11 . log-edit-previous-comment)) eshell-mode-map (keymap (M-f12 . eshell-next-matching-input-from-input) (S-f12 . eshell-next-matching-input-from-input) (27 keymap (f12 . eshell-next-matching-input-from-input) (f11 . eshell-previous-matching-input-from-input)) (M-f11 . eshell-previous-matching-input-from-input) (S-f11 . eshell-previous-matching-input-from-input) (f12 . eshell-next-matching-input-from-input) (f11 . eshell-previous-matching-input-from-input)) isearch-mode-map (keymap (S-f12 . isearch-ring-retreat) (S-f11 . isearch-ring-advance) (f12 . isearch-ring-advance) (f11 . isearch-ring-retreat) (S-f3 . isearch-toggle-regexp)))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (icicle-minibuffer-setup-hook #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (minibuffer-local-map (keymap (S-f12 . previous-history-element) (M-f12 . icicle-insert-history-element) (S-f11 . next-history-element) (f12 . next-history-element) (27 keymap (f12 . icicle-insert-history-element) (f11 . icicle-insert-history-element)) (M-f11 . icicle-insert-history-element) (f11 . previous-history-element)))) iswitchb-define-mode-map-hook #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (iswitchb-mode-map (keymap (remap keymap (next-history-element . iswitchb-next-match) (previous-history-element . iswitchb-prev-match))))))) nil nil ((global-map [M-f5] (redo)) (global-map [C-f5] (redo))) nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) fn-keys programmer-dv)))) (C-f2 . ergoemacs-cut-all) (C-f3 . ergoemacs-copy-all) (C-f4 . ergoemacs-paste-cycle) (C-f5 . undo-tree-redo) (C-f8 . highlight-symbol-prev) (C-f9 . highlight-symbol-next) (M-f2 . ergoemacs-cut-all) (M-f3 . ergoemacs-copy-all) (27 keymap (f2 . ergoemacs-cut-all) (f3 . ergoemacs-copy-all) (f5 . undo-tree-redo)) (M-f5 . undo-tree-redo) (S-f3 . ergoemacs-toggle-letter-case) (f11 . previous-line) (f12 . next-line) (f3 . ergoemacs-copy-line-or-region) (f6 . ergoemacs-unchorded-alt-modal) (f8 keymap (111 . occur) (104 keymap (114 . highlight-regexp) (112 . highlight-phrase) (108 . highlight-lines-matching-regexp) (46 . highlight-symbol-at-point) (117 . unhighlight-regexp) (102 . hi-lock-find-patterns) (119 . hi-lock-write-interactive-patterns) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693797)))) (119 . isearch-forward-word) (95 . isearch-forward-symbol) (46 . isearch-forward-symbol-at-point) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693842))) (f8 . highlight-symbol-at-point) (f9 . highlight-symbol-query-replace)) (f2 . ergoemacs-cut-line-or-region) (f4 . ergoemacs-paste)) (isearch-mode-map programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key (isearch-mode-map fn-keys programmer-dv)))) (S-f3 . isearch-toggle-regexp) (f11 . isearch-ring-retreat) (f12 . isearch-ring-advance) (S-f11 . isearch-ring-advance) (S-f12 . isearch-ring-retreat)))) global-map nil] "f2-edit" [cl-struct-ergoemacs-component-struct "f2-edit" (:name "f2-edit" :description "Have <f2> edit" :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") nil #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (ergoemacs-translate--parent-map (keymap (f2 . ergoemacs-command-loop--force-universal-argument)))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) f2-edit programmer-dv))))) (ergoemacs-translate--parent-map programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key (ergoemacs-translate--parent-map f2-edit programmer-dv)))) (f2 . ergoemacs-command-loop--force-universal-argument)))) global-map nil] "backspace-del-seq" [cl-struct-ergoemacs-component-struct "backspace-del-seq" (:name "backspace-del-seq" :description "Backspace deletes last key entered in command sequence" :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") nil #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (ergoemacs-translate--parent-map (keymap (127 . ergoemacs-command-loop--force-undo-last)))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) backspace-del-seq programmer-dv))))) (ergoemacs-translate--parent-map programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key (ergoemacs-translate--parent-map backspace-del-seq programmer-dv)))) (127 . ergoemacs-command-loop--force-undo-last)))) global-map nil] "help" [cl-struct-ergoemacs-component-struct "help" (:name "help" :description "Help changes for ergoemacs-mode" :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") (keymap (f1 keymap (111 . ergoemacs-where-is-old-binding) (96 . elisp-index-search) (57 . ergoemacs-lookup-word-definition) (56 . ergoemacs-lookup-wikipedia) (55 . ergoemacs-lookup-google) (53 . man) (52 . describe-char) (51 . describe-key) (50 . describe-variable) (49 . describe-function) (39 . ergoemacs-describe-current-theme)) (8 keymap (26 . ergoemacs-clean-library) (122 . ergoemacs-clean) (111 . ergoemacs-where-is-old-binding) (96 . elisp-index-search) (57 . ergoemacs-lookup-word-definition) (56 . ergoemacs-lookup-wikipedia) (55 . ergoemacs-lookup-google) (53 . man) (52 . describe-char) (51 . describe-key) (50 . describe-variable) (49 . describe-function) (39 . ergoemacs-describe-current-theme)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) help us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) help programmer-dv)))) (8 keymap (39 . ergoemacs-describe-current-theme) (49 . describe-function) (50 . describe-variable) (51 . describe-key) (52 . describe-char) (53 . man) (55 . ergoemacs-lookup-google) (56 . ergoemacs-lookup-wikipedia) (57 . ergoemacs-lookup-word-definition) (96 . elisp-index-search) (111 . ergoemacs-where-is-old-binding) (122 . ergoemacs-clean) (26 . ergoemacs-clean-library)) (f1 keymap (39 . ergoemacs-describe-current-theme) (49 . describe-function) (50 . describe-variable) (51 . describe-key) (52 . describe-char) (53 . man) (55 . ergoemacs-lookup-google) (56 . ergoemacs-lookup-wikipedia) (57 . ergoemacs-lookup-word-definition) (96 . elisp-index-search) (111 . ergoemacs-where-is-old-binding))))) global-map nil] "move-char" [cl-struct-ergoemacs-component-struct "move-char" (:name "move-char" :description "Movement by Characters & Set Mark" :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") (keymap (C-M-i . backward-paragraph) (27 keymap (102 . delete-char) (100 . delete-backward-char) (32 . set-mark-command) (11 . forward-paragraph) (9 . backward-paragraph) (12 . right-word) (10 . left-word) (107 . next-line) (105 . previous-line) (108 . forward-char) (106 . backward-char)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) move-char us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (browse-kill-ring-mode-map (keymap (27 keymap (102 . browse-kill-ring-delete) (107 . browse-kill-ring-forward) (105 . browse-kill-ring-backward))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (iswitchb-define-mode-map-hook #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (iswitchb-mode-map (keymap (remap keymap (forward-char . iswitchb-next-match) (backward-char . iswitchb-prev-match))))))) nil nil nil nil nil ([4] [67108896] [14] [16] [6] [2]) nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) move-char programmer-dv)))) (27 keymap (104 . backward-char) (110 . forward-char) (99 . previous-line) (116 . next-line) (8 . left-word) (14 . right-word) (3 . backward-paragraph) (20 . forward-paragraph) (32 . set-mark-command) (101 . delete-backward-char) (117 . delete-char) (9 . backward-paragraph))))) global-map nil] "move-word" [cl-struct-ergoemacs-component-struct "move-word" (:name "move-word" :description "Moving around and deleting words" :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") (keymap (27 keymap (114 . kill-word) (101 . backward-kill-word) (111 . forward-word) (117 . backward-word)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) move-word us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil ([134217828] [134217830] [134217826]) nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) move-word programmer-dv)))) (27 keymap (103 . backward-word) (114 . forward-word) (46 . backward-kill-word) (112 . kill-word))))) global-map nil] "move-sexp" (lambda nil "Instead of moving around by words, use sexps." (ergoemacs-component-struct--create-component (quote (:name "move-sexp" :description "Instead of moving around by words, use sexps.")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) [remap forward-word] (quote forward-sexp)) (ergoemacs-component-struct--define-key (quote global-map) [remap backward-word] (quote backward-sexp)))) "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc")) "move-paragraph" [cl-struct-ergoemacs-component-struct "move-paragraph" (:name "move-paragraph" :description "Move by Paragraph" :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") (keymap (27 keymap (79 . ergoemacs-forward-block) (85 . ergoemacs-backward-block)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) move-paragraph us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil ([134217853] [134217851]) nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) move-paragraph programmer-dv)))) (27 keymap (71 . ergoemacs-backward-block) (82 . ergoemacs-forward-block))))) global-map nil] "move-line" [cl-struct-ergoemacs-component-struct "move-line" (:name "move-line" :description "Move by Line" :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") (keymap (27 keymap (72 . ergoemacs-end-of-line-or-what) (104 . ergoemacs-beginning-of-line-or-what)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) move-line us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (eshell-mode-map (keymap (remap keymap (move-beginning-of-line . eshell-bol))) comint-mode-map (keymap (remap keymap (move-beginning-of-line . comint-bol))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil ([5] [1]) nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) move-line programmer-dv)))) (27 keymap (100 . ergoemacs-beginning-of-line-or-what) (68 . ergoemacs-end-of-line-or-what))))) global-map nil] "move-and-transpose-lines" (lambda nil "Move Current line/selection down or up with Alt+up or Alt+down" (ergoemacs-component-struct--create-component (quote (:name "move-and-transpose-lines" :description "Move Current line/selection down or up with Alt+up or Alt+down")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) [M-up] (quote ergoemacs-move-text-up)) (ergoemacs-component-struct--define-key (quote global-map) [M-down] (quote ergoemacs-move-text-down)))) "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc")) "alt-backspace-is-undo" (lambda nil "Alt+Backspace is Undo" (ergoemacs-component-struct--create-component (quote (:name "alt-backspace-is-undo" :description "Alt+Backspace is Undo")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) (kbd "<M-backspace>") (quote undo)))) "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc")) "move-page" [cl-struct-ergoemacs-component-struct "move-page" (:name "move-page" :description "Move by Page" :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") (keymap (27 keymap (75 . scroll-up-command) (73 . scroll-down-command) (11 . scroll-other-window) (9 . scroll-other-window-down)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) move-page us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil ([134217750] [22] [134217846]) nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) move-page programmer-dv)))) (27 keymap (3 . scroll-other-window-down) (20 . scroll-other-window) (67 . scroll-down-command) (84 . scroll-up-command))))) global-map nil] "move-buffer" [cl-struct-ergoemacs-component-struct "move-buffer" (:name "move-buffer" :description "Move Beginning/End of buffer" :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") (keymap (27 keymap (78 . ergoemacs-end-or-beginning-of-buffer) (110 . ergoemacs-beginning-or-end-of-buffer)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) move-buffer us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil ("5.7.5") ([134217788] [134217790]) nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) move-buffer programmer-dv)))) (27 keymap (98 . ergoemacs-beginning-or-end-of-buffer) (66 . ergoemacs-end-or-beginning-of-buffer))))) global-map nil] "move-bracket" [cl-struct-ergoemacs-component-struct "move-bracket" (:name "move-bracket" :description "Move By Bracket" :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") (keymap (M-right . ergoemacs-forward-close-bracket) (M-left . ergoemacs-backward-open-bracket) (27 keymap (right . ergoemacs-forward-close-bracket) (left . ergoemacs-backward-open-bracket) (76 . ergoemacs-forward-close-bracket) (74 . ergoemacs-backward-open-bracket)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) move-bracket us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) move-bracket programmer-dv)))) (M-left . ergoemacs-backward-open-bracket) (27 keymap (72 . ergoemacs-backward-open-bracket) (78 . ergoemacs-forward-close-bracket) (left . ergoemacs-backward-open-bracket) (right . ergoemacs-forward-close-bracket)) (M-right . ergoemacs-forward-close-bracket)))) global-map nil] "copy" [cl-struct-ergoemacs-component-struct "copy" (:name "copy" :description "Copy, Cut, Paste, Redo and Undo" :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") (keymap (25 . undo-tree-redo) (33554458 . undo-tree-redo) (26 . undo) (24 keymap (ergoemacs-timeout . ergoemacs-cut-line-or-region)) (3 keymap (ergoemacs-timeout . ergoemacs-copy-line-or-region)) (27 keymap (122 . undo) (90 . undo-tree-redo) (88 . ergoemacs-cut-all) (67 . ergoemacs-copy-all) (86 . ergoemacs-paste-cycle) (118 . ergoemacs-paste) (99 . ergoemacs-copy-line-or-region) (120 . ergoemacs-cut-line-or-region)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) copy us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (isearch-mode-map (keymap (33554454 . ergoemacs-paste-cycle) (22 . ergoemacs-paste) (27 keymap (86 . ergoemacs-paste-cycle) (118 . ergoemacs-paste) (99 . isearch-yank-word-or-char)) (3 . isearch-yank-word-or-char)) org-mode-map (keymap (remap keymap (ergoemacs-paste . ergoemacs-org-yank))) browse-kill-ring-mode-map (keymap (remap keymap (undo-tree-undo . browse-kill-ring-undo-other-window) (undo . browse-kill-ring-undo-other-window))) calc-mode-map (keymap (remap keymap (undo-tree-undo . calc-undo))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil ((global-map [25] (redo)) (global-map [33554458] (redo)) (global-map [134217818] (redo))) nil nil ([24 117] [67108911] [31] [134217849] [25] [134217847] [23]) nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) copy programmer-dv)))) (27 keymap (113 . ergoemacs-cut-line-or-region) (106 . ergoemacs-copy-line-or-region) (107 . ergoemacs-paste) (75 . ergoemacs-paste-cycle) (74 . ergoemacs-copy-all) (81 . ergoemacs-cut-all) (34 . undo-tree-redo) (39 . undo)) (3 keymap (ergoemacs-timeout . ergoemacs-copy-line-or-region)) (24 keymap (ergoemacs-timeout . ergoemacs-cut-line-or-region)) (26 . undo) (33554458 . undo-tree-redo) (25 . undo-tree-redo)) (isearch-mode-map programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key (isearch-mode-map copy programmer-dv)))) (3 . isearch-yank-word-or-char) (27 keymap (106 . isearch-yank-word-or-char) (107 . ergoemacs-paste) (75 . ergoemacs-paste-cycle)) (22 . ergoemacs-paste) (33554454 . ergoemacs-paste-cycle)))) global-map nil] "search" [cl-struct-ergoemacs-component-struct "search" (:name "search" :description "Search and Replace" :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") (keymap (27 keymap (37 . query-replace-regexp) (53 . query-replace) (89 . isearch-backward) (121 . isearch-forward)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) search us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (dired-mode-map (keymap (27 keymap (37 . dired-do-query-replace-regexp) (53 . dired-do-query-replace-regexp))) browse-kill-ring-mode-map (keymap (remap keymap (isearch-backward . browse-kill-ring-search-backward) (isearch-forward . browse-kill-ring-search-forward))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil ((global-map [134217765] (vr/query-replace))) nil ("5.7.5") ([201326629] [134217765] [18] [19]) nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) search programmer-dv)))) (27 keymap (102 . isearch-forward) (70 . isearch-backward) (40 . query-replace) (49 . query-replace-regexp))))) global-map nil] "search-reg" (lambda nil "Regular Expression Search/Replace" (ergoemacs-component-struct--create-component (quote (:name "search-reg" :description "Regular Expression Search/Replace")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) [remap isearch-forward] (quote isearch-forward-regexp)) (ergoemacs-component-struct--define-key (quote global-map) [remap isearch-backward] (quote isearch-backward-regexp)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-%") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-5") (quote (vr/query-replace query-replace-regexp))) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-M-%") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-%") (quote (vr/query-replace query-replace-regexp))))) "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc")) "switch" [cl-struct-ergoemacs-component-struct "switch" (:name "switch" :description "Window/Frame/Tab Switching" :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") (keymap (27 keymap (36 . split-window-right) (52 . split-window-below) (50 . delete-window) (51 . delete-other-windows) (96 . ergoemacs-switch-to-next-frame) (126 . ergoemacs-switch-to-previous-frame) (83 . ergoemacs-move-cursor-previous-pane) (115 . ergoemacs-move-cursor-next-pane)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) switch us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil ("5.7.5") ([24 50] [24 51] [24 48] [24 49]) nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) switch programmer-dv)))) (27 keymap (111 . ergoemacs-move-cursor-next-pane) (79 . ergoemacs-move-cursor-previous-pane) (126 . ergoemacs-switch-to-previous-frame) (36 . ergoemacs-switch-to-next-frame) (123 . delete-other-windows) (91 . delete-window) (125 . split-window-below) (51 . split-window-right))))) global-map nil] "execute" [cl-struct-ergoemacs-component-struct "execute" (:name "execute" :description "Execute Commands" :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") (keymap (27 keymap (65 . shell-command) (97 . execute-extended-command)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) execute us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil ([134217761] [134217848]) nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) execute programmer-dv)))) (27 keymap (97 . execute-extended-command) (65 . shell-command))))) global-map nil] "misc" [cl-struct-ergoemacs-component-struct "misc" (:name "misc" :description "Misc Commands" :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") (keymap (27 keymap (98 . avy-goto-word-or-subword-1) (112 . recenter-top-bottom)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) misc us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil ([12]) nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) misc programmer-dv)))) (27 keymap (108 . recenter-top-bottom) (120 . avy-goto-word-or-subword-1))))) global-map nil] "kill-line" [cl-struct-ergoemacs-component-struct "kill-line" (:name "kill-line" :description "Kill Line" :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") (keymap (27 keymap (71 . ergoemacs-kill-line-backward) (103 . kill-line)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) kill-line us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil ([11]) nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) kill-line programmer-dv)))) (27 keymap (105 . kill-line) (73 . ergoemacs-kill-line-backward))))) global-map nil] "text-transform" [cl-struct-ergoemacs-component-struct "text-transform" (:name "text-transform" :description "Text Transformation" :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") (keymap (27 keymap (113 . ergoemacs-compact-uncompact-block) (84 . flyspell-auto-correct-word) (116 . ergoemacs-call-keyword-completion) (47 . ergoemacs-toggle-letter-case) (63 . ergoemacs-toggle-camel-case) (119 . ergoemacs-shrink-whitespaces) (39 . comment-dwim)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) text-transform us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (isearch-mode-map (keymap (27 keymap (47 . isearch-toggle-case-fold) (63 . isearch-toggle-regexp))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (iswitchb-define-mode-map-hook #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (iswitchb-mode-map (keymap (remap keymap (ergoemacs-toggle-letter-case . iswitchb-toggle-regexp) (ergoemacs-toggle-camel-case . iswitchb-toggle-case))))))) nil nil nil nil nil ([134217787]) nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) text-transform programmer-dv)))) (27 keymap (45 . comment-dwim) (44 . ergoemacs-shrink-whitespaces) (90 . ergoemacs-toggle-camel-case) (122 . ergoemacs-toggle-letter-case) (121 . ergoemacs-call-keyword-completion) (89 . flyspell-auto-correct-word) (59 . ergoemacs-compact-uncompact-block))) (isearch-mode-map programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key (isearch-mode-map text-transform programmer-dv)))) (27 keymap (90 . isearch-toggle-regexp) (122 . isearch-toggle-case-fold))))) global-map nil] "select-items" [cl-struct-ergoemacs-component-struct "select-items" (:name "select-items" :description "Select Items" :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") (keymap (27 keymap (55 . ergoemacs-select-current-line) (54 . ergoemacs-select-current-block) (42 . ergoemacs-select-text-in-quote) (56 . ergoemacs-extend-selection) (33554464 . mark-paragraph)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) select-items us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil ((global-map [134217770] (er/mark-inside-quotes)) (global-map [134217784] (er/expand-region))) nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) select-items programmer-dv)))) (27 keymap (33554464 . mark-paragraph) (41 . ergoemacs-extend-selection) (50 . ergoemacs-select-text-in-quote) (61 . ergoemacs-select-current-block) (42 . ergoemacs-select-current-line))))) global-map nil] "quit" [cl-struct-ergoemacs-component-struct "quit" (:name "quit" :description "Escape exits" :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") (keymap (escape . keyboard-quit) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) quit us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (isearch-mode-map (keymap (escape . isearch-abort)))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (org-read-date-minibuffer-setup-hook #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (minibuffer-local-map (keymap (escape . minibuffer-keyboard-quit)))))) nil nil nil nil ("5.3.7") nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) quit programmer-dv)))) (escape . keyboard-quit)) (isearch-mode-map programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key (isearch-mode-map quit programmer-dv)))) (escape . isearch-abort)))) global-map nil] "apps" [cl-struct-ergoemacs-component-struct "apps" (:name "apps" :description "General Apps Key Sequence" :just-first-keys (list [apps 104] [menu 104]) :bind ("<apps> '" ergoemacs-org-edit-src "<apps> 2" delete-window "<apps> 3" delete-other-windows "<apps> 4" split-window-vertically "<apps> 5" query-replace "<apps> <f2>" ergoemacs-cut-all "<apps> <f3>" ergoemacs-copy-all "<apps> <return>" execute-extended-command "<apps> RET" execute-extended-command "<apps> TAB" indent-region "<apps> SPC" set-mark-command "<apps> a" mark-whole-buffer "<apps> d" ("C-x" :ctl-to-alt) "<apps> f" ("C-c" :unchorded-ctl) "<apps> h" help-map "<apps> h '" ergoemacs-describe-current-theme "<apps> h 1" describe-function "<apps> h 2" describe-variable "<apps> h 3" describe-key "<apps> h 4" describe-char "<apps> h 5" man "<apps> h 7" ergoemacs-lookup-google "<apps> h 8" ergoemacs-lookup-wikipedia "<apps> h 9" ergoemacs-lookup-word-definition "<apps> h `" elisp-index-search "<apps> h o" ergoemacs-where-is-old-binding "<apps> h z" ergoemacs-clean "<apps> h C-z" ergoemacs-clean-library "<apps> h Z" ergoemacs-clean-nw "<apps> m" (kbd "C-c C-c") "<apps> s" save-buffer "<apps> C-s" write-file "<apps> o" find-file "<apps> g" ergoemacs-read-key--universal-argument "<apps> w" ergoemacs-close-current-buffer "<apps> x" ergoemacs-cut-line-or-region "<apps> c" ergoemacs-copy-line-or-region "<apps> v" ergoemacs-paste "<apps> b" (redo undo-tree-redo ergoemacs-redo) "<apps> t" switch-to-buffer "<apps> z" undo "<apps> r" goto-map) :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") (keymap (menu keymap (114 keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693831))) (9 . move-to-column) (112 . previous-error) (110 . next-error) (27 keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693799))) (112 . previous-error) (110 . next-error) (103 . goto-line)) (103 . goto-line) (99 . goto-char)) (122 . undo) (116 . switch-to-buffer) (98 . undo-tree-redo) (118 . ergoemacs-paste) (99 . ergoemacs-copy-line-or-region) (120 . ergoemacs-cut-line-or-region) (119 . ergoemacs-close-current-buffer) (103 . ergoemacs-read-key--universal-argument) (111 . find-file) (19 . write-file) (115 . save-buffer) (109 . "") (104 keymap (90 . ergoemacs-clean-nw) (26 . ergoemacs-clean-library) (122 . ergoemacs-clean) (111 . ergoemacs-where-is-old-binding) (96 . elisp-index-search) (57 . ergoemacs-lookup-word-definition) (56 . ergoemacs-lookup-wikipedia) (55 . ergoemacs-lookup-google) (53 . man) (51 . describe-key) (50 . describe-variable) (49 . describe-function) (39 . ergoemacs-describe-current-theme) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693829))) (113 . help-quit) (118 . describe-variable) (119 . where-is) (116 . help-with-tutorial) (115 . describe-syntax) (114 . info-emacs-manual) (80 . describe-package) (112 . finder-by-keyword) (110 . view-emacs-news) (109 . describe-mode) (108 . view-lossage) (107 . describe-key) (52 . describe-char) (105 . info) (104 . view-hello-file) (103 . describe-gnu-project) (102 . describe-function) (101 . view-echo-area-messages) (100 . apropos-documentation) (99 . describe-key-briefly) (98 . describe-bindings) (97 . apropos-command) (83 . info-lookup-symbol) (76 . describe-language-environment) (75 . Info-goto-emacs-key-command-node) (73 . describe-input-method) (70 . Info-goto-emacs-command-node) (67 . describe-coding-system) (28 . describe-input-method) (23 . describe-no-warranty) (20 . view-emacs-todo) (16 . view-emacs-problems) (15 . describe-distribution) (14 . view-emacs-news) (13 . view-order-manuals) (6 . view-emacs-FAQ) (5 . view-external-packages) (4 . view-emacs-debugging) (3 . describe-copying) (1 . about-emacs) (63 . help-for-help) (46 . display-local-help) (f1 . help-for-help) (help . help-for-help) (8 . help-for-help)) (102 lambda (&optional arg) (interactive "P") (ergoemacs-command-loop "C-c" (quote :unchorded-ctl))) (100 lambda (&optional arg) (interactive "P") (ergoemacs-command-loop "C-x" (quote :ctl-to-alt))) (97 . mark-whole-buffer) (32 . set-mark-command) (9 . indent-region) (13 . execute-extended-command) (return . execute-extended-command) (f3 . ergoemacs-copy-all) (f2 . ergoemacs-cut-all) (53 . query-replace) (52 . split-window-vertically) (51 . delete-other-windows) (50 . delete-window) (39 . ergoemacs-org-edit-src)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) apps us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil ((global-map [menu 98] (redo))) nil nil nil nil nil (list [apps 104] [menu 104]) (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) apps programmer-dv)))) (menu keymap (45 . ergoemacs-org-edit-src) (91 . delete-window) (123 . delete-other-windows) (125 . split-window-vertically) (40 . query-replace) (f2 . ergoemacs-cut-all) (f3 . ergoemacs-copy-all) (return . execute-extended-command) (13 . execute-extended-command) (3 . indent-region) (32 . set-mark-command) (97 . mark-whole-buffer) (101 lambda (&optional arg) (interactive "P") (ergoemacs-command-loop "C-x" (quote :ctl-to-alt))) (117 lambda (&optional arg) (interactive "P") (ergoemacs-command-loop "C-c" (quote :unchorded-ctl))) (100 keymap (8 . help-for-help) (help . help-for-help) (f1 . help-for-help) (46 . display-local-help) (63 . help-for-help) (1 . about-emacs) (3 . describe-copying) (4 . view-emacs-debugging) (5 . view-external-packages) (6 . view-emacs-FAQ) (13 . view-order-manuals) (14 . view-emacs-news) (15 . describe-distribution) (16 . view-emacs-problems) (20 . view-emacs-todo) (23 . describe-no-warranty) (28 . describe-input-method) (67 . describe-coding-system) (70 . Info-goto-emacs-command-node) (73 . describe-input-method) (75 . Info-goto-emacs-key-command-node) (76 . describe-language-environment) (83 . info-lookup-symbol) (97 . apropos-command) (98 . describe-bindings) (99 . describe-key-briefly) (100 . apropos-documentation) (101 . view-echo-area-messages) (102 . describe-function) (103 . describe-gnu-project) (104 . view-hello-file) (105 . info) (52 . describe-char) (107 . describe-key) (108 . view-lossage) (109 . describe-mode) (110 . view-emacs-news) (112 . finder-by-keyword) (80 . describe-package) (114 . info-emacs-manual) (115 . describe-syntax) (116 . help-with-tutorial) (119 . where-is) (118 . describe-variable) (113 . help-quit) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693829))) (39 . ergoemacs-describe-current-theme) (49 . describe-function) (50 . describe-variable) (51 . describe-key) (53 . man) (55 . ergoemacs-lookup-google) (56 . ergoemacs-lookup-wikipedia) (57 . ergoemacs-lookup-word-definition) (96 . elisp-index-search) (111 . ergoemacs-where-is-old-binding) (122 . ergoemacs-clean) (26 . ergoemacs-clean-library) (90 . ergoemacs-clean-nw)) (109 . "") (111 . save-buffer) (15 . write-file) (114 . find-file) (105 . ergoemacs-read-key--universal-argument) (44 . ergoemacs-close-current-buffer) (113 . ergoemacs-cut-line-or-region) (106 . ergoemacs-copy-line-or-region) (107 . ergoemacs-paste) (120 . undo-tree-redo) (121 . switch-to-buffer) (39 . undo) (112 keymap (106 . goto-char) (105 . goto-line) (67108911 keymap (105 . goto-line) (98 . next-error) (108 . previous-error) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693799)))) (98 . next-error) (108 . previous-error) (3 . move-to-column) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693831)))))))) global-map t] "apps-toggle" [cl-struct-ergoemacs-component-struct "apps-toggle" (:name "apps-toggle" :description "Toggle States and applications" :just-first-keys (list [apps 105] [menu 105]) :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") (keymap (menu keymap (105 keymap (18 . revert-buffer) (114 . read-only-mode) (113 . toggle-debug-on-quit) (108 . toggle-truncate-lines) (102 . auto-fill-mode) (101 . toggle-debug-on-error) (100 . toggle-debug-on-error) (99 . column-number-mode))) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) apps-toggle us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil (list [apps 105] [menu 105]) (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) apps-toggle programmer-dv)))) (menu keymap (99 keymap (99 . column-number-mode) (100 . toggle-debug-on-error) (101 . toggle-debug-on-error) (102 . auto-fill-mode) (108 . toggle-truncate-lines) (113 . toggle-debug-on-quit) (114 . read-only-mode) (18 . revert-buffer)))))) global-map nil] "apps-apps" [cl-struct-ergoemacs-component-struct "apps-apps" (:name "apps-apps" :description "Applications" :just-first-keys (list [apps 110] [menu 110]) :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") (keymap (menu keymap (110 keymap (84 . org-agenda) (20 . org-agenda) (116 . org-capture) (115 . shell) (114 . R) (111 . ergoemacs-open-in-external-app) (109 . magit-status) (103 . grep) (102 . ergoemacs-open-in-desktop) (112 . powershell) (101 . eshell) (100 . dired-jump) (99 . calc) (1 . org-capture) (65 . org-capture) (97 . org-agenda))) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) apps-apps us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil (list [apps 110] [menu 110]) (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) apps-apps programmer-dv)))) (menu keymap (98 keymap (97 . org-agenda) (65 . org-capture) (1 . org-capture) (99 . calc) (100 . dired-jump) (101 . eshell) (112 . powershell) (102 . ergoemacs-open-in-desktop) (103 . grep) (109 . magit-status) (111 . ergoemacs-open-in-external-app) (114 . R) (115 . shell) (116 . org-capture) (20 . org-agenda) (84 . org-agenda)))))) global-map nil] "apps-punctuation" [cl-struct-ergoemacs-component-struct "apps-punctuation" (:name "apps-punctuation" :description "Punctuation" :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") (keymap (menu keymap (107 keymap (98 . "!") (103 . "|") (116 . "&") (99 . "-") (100 . "=") (101 . "+") (118 . "<") (102 . "_") (114 . ">") (110 . "@") (104 . "%") (121 . "?") (109 . "`") (117 . ergoemacs-smart-apostrophe) (106 . ergoemacs-smart-quote) (44 . ergoemacs-smart-curly) (107 . ergoemacs-smart-paren) (105 . ergoemacs-smart-bracket) (120 . "~") (115 . "*") (119 . "^") (46 . ":") (108 . "$") (111 . "#"))) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) apps-punctuation us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) apps-punctuation programmer-dv)))) (menu keymap (116 keymap (114 . "#") (110 . "$") (118 . ":") (44 . "^") (111 . "*") (113 . "~") (99 . ergoemacs-smart-bracket) (116 . ergoemacs-smart-paren) (119 . ergoemacs-smart-curly) (104 . ergoemacs-smart-quote) (103 . ergoemacs-smart-apostrophe) (109 . "`") (102 . "?") (100 . "%") (98 . "@") (112 . ">") (117 . "_") (107 . "<") (46 . "+") (101 . "=") (106 . "-") (121 . "&") (105 . "|") (120 . "!")))))) global-map nil] "apps-swap" [cl-struct-ergoemacs-component-struct "apps-swap" (:name "apps-swap" :description "Apps/Menu swaps key sequence translations" :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") nil #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (ergoemacs-translate--parent-map (keymap (menu . ergoemacs-command-loop--swap-translation)))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) apps-swap programmer-dv))))) (ergoemacs-translate--parent-map programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key (ergoemacs-translate--parent-map apps-swap programmer-dv)))) (menu . ergoemacs-command-loop--swap-translation)))) global-map nil] "dired-to-wdired" [cl-struct-ergoemacs-component-struct "dired-to-wdired" (:name "dired-to-wdired" :description "C-c C-c enters wdired, <escape> exits." :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") nil #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (dired-mode-map (keymap (3 keymap (3 . wdired-change-to-wdired-mode))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) dired-to-wdired programmer-dv))))))) global-map nil] "dired-tab" [cl-struct-ergoemacs-component-struct "dired-tab" (:name "dired-tab" :description "TAB expands a directory." :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") nil #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (dired-mode-map (keymap (9 . dired-maybe-insert-subdir)))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) dired-tab programmer-dv))))))) global-map nil] "guru" (lambda nil "Unbind some commonly used keys such as <left> and <right> to get in the habit of using ergoemacs keybindings." (ergoemacs-component-struct--create-component (quote (:name "guru" :description "Unbind some commonly used keys such as <left> and <right> to get in the habit of using ergoemacs keybindings.")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) (kbd "<left>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<right>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<up>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<down>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<C-left>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<C-right>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<C-up>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<C-down>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<M-left>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<M-right>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<M-up>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<M-down>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<delete>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<C-delete>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<M-delete>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<next>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<C-next>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<prior>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<C-prior>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<home>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<C-home>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<end>") nil) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<C-end>") nil))) "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc")) "no-backspace" (lambda nil "No Backspace!" (ergoemacs-component-struct--create-component (quote (:name "no-backspace" :description "No Backspace!")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) (kbd "<backspace>") nil))) "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc")) "helm-remaps" [cl-struct-ergoemacs-component-struct "helm-remaps" (:name "helm-remaps" :description "Remaps for helm-mode" :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") nil #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (helm-mode (keymap (remap keymap (ac-isearch . ac-complete-with-helm) (info . helm-info-at-point) (occur . helm-occur) (eshell-pcomplete . helm-esh-pcomplete) (find-file . helm-find-files) (switch-to-buffer . helm-mini) (execute-extended-command . helm-M-x) (grep . helm-do-grep))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) helm-remaps programmer-dv))))) ((cond-map helm-mode) programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((cond-map helm-mode) helm-remaps programmer-dv)))) (remap keymap (grep . helm-do-grep) (execute-extended-command . helm-M-x) (switch-to-buffer . helm-mini) (find-file . helm-find-files) (eshell-pcomplete . helm-esh-pcomplete) (occur . helm-occur) (info . helm-info-at-point) (ac-isearch . ac-complete-with-helm))))) global-map nil] "helm-switch-sources" (lambda nil "Ctrl+o switches multiple sources." (ergoemacs-component-struct--create-component (quote (:name "helm-switch-sources" :description "Ctrl+o switches multiple sources.")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote helm-map) (kbd "C-o") (quote helm-next-source)))) "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc")) "helm-files-up" (lambda nil "Use Ctrl+L to go up one level in helm." (ergoemacs-component-struct--create-component (quote (:name "helm-files-up" :description "Use Ctrl+L to go up one level in helm.")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote helm-find-files-map) (kbd "C-l") (quote helm-find-files-up-one-level)))) "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc")) "icy-reclaim" [cl-struct-ergoemacs-component-struct "icy-reclaim" (:name "icy-reclaim" :description "Reclaim some icicle key bindings." :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") nil #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (icicle-minibuffer-setup-hook #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (minibuffer-local-map (keymap (delete . icicle-remove-candidate) (C-M-down . icicle-next-candidate-per-mode-help) (C-M-up . icicle-previous-candidate-per-mode-help) (C-M-end . icicle-help-on-next-prefix-candidate) (C-M-home . icicle-help-on-previous-prefix-candidate) (C-end . icicle-next-prefix-candidate-action) (C-home . icicle-previous-prefix-candidate-action) (C-M-next . icicle-help-on-next-apropos-candidate) (C-M-prior . icicle-help-on-previous-apropos-candidate) (C-next . icicle-next-apropos-candidate-action) (C-prior . icicle-previous-apropos-candidate-action) (27 keymap (C-down . icicle-next-candidate-per-mode-help) (C-up . icicle-previous-candidate-per-mode-help) (C-end . icicle-help-on-next-prefix-candidate) (C-home . icicle-help-on-previous-prefix-candidate) (C-next . icicle-help-on-next-apropos-candidate) (C-prior . icicle-help-on-previous-apropos-candidate) (67108877 . icicle-help-on-candidate) (63 . icicle-minibuffer-help) (42 . icicle-narrow-candidates))))))) nil nil nil nil nil nil nil ((icicle-key-complete-keys-for-minibuffer (lambda nil (list (ergoemacs-translate--event-layout (read-kbd-macro "M-T")))) nil)) nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) icy-reclaim programmer-dv))))))) global-map nil] "multiple-cursors-remaps" [cl-struct-ergoemacs-component-struct "multiple-cursors-remaps" (:name "multiple-cursors-remaps" :description "Multiple Cursors phi-search remaps" :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") nil #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (multiple-cursors-mode (keymap (remap keymap (isearch-backward . phi-search-backward) (isearch-forward . phi-search))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) multiple-cursors-remaps programmer-dv))))) ((cond-map multiple-cursors-mode) programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((cond-map multiple-cursors-mode) multiple-cursors-remaps programmer-dv)))) (remap keymap (isearch-forward . phi-search) (isearch-backward . phi-search-backward))))) global-map nil] "ido-remaps" [cl-struct-ergoemacs-component-struct "ido-remaps" (:name "ido-remaps" :description "Remaps for ido-mode" :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") nil #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (ido-mode (keymap (remap keymap (execute-extended-command . smex))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil ((smex-prompt-string (lambda nil (substitute-command-keys "\\[execute-extended-command] ")) nil)) nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) ido-remaps programmer-dv))))) ((cond-map ido-mode) programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((cond-map ido-mode) ido-remaps programmer-dv)))) (remap keymap (execute-extended-command . smex))))) global-map nil] "ido-prev-next-instead-of-left-right" (lambda nil "In Ido use, Ergoemacs left and right for previous/next match." (ergoemacs-component-struct--create-component (quote (:name "ido-prev-next-instead-of-left-right" :description "In Ido use, Ergoemacs left and right for previous/next match.")) (quote (lambda nil (ergoemacs-component-struct--with-hook (quote ido-mode) (quote nil) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) [remap ido-magic-forward-char] (quote ido-next-match)) (ergoemacs-component-struct--define-key (quote global-map) [remap ido-magic-backward-char] (quote ido-prev-match))))))) "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc")) "ergoemacs-remaps" [cl-struct-ergoemacs-component-struct "ergoemacs-remaps" (:name "ergoemacs-remaps" :description "Remaps for ergoemacs-mode" :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") nil #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (undo-tree-mode (keymap (remap keymap (undo . undo-tree-undo) (ergoemacs-redo . undo-tree-redo))) mark-active (keymap (9 . indent-region)) ergoemacs-mode (keymap (remap keymap (ergoemacs-print-buffer-confirm . pr-interface) (describe-mode . ergoemacs-describe-major-mode) (universal-argument . ergoemacs-command-loop--universal-argument) (shell . ergoemacs-shell-here) (powershell . ergoemacs-powershell-here) (eshell . ergoemacs-eshell-here) (revert-buffer . ergoemacs-revert-buffer) (keyboard-quit . ergoemacs-keyboard-quit))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) ergoemacs-remaps programmer-dv))))) ((cond-map undo-tree-mode) programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((cond-map undo-tree-mode) ergoemacs-remaps programmer-dv)))) (remap keymap (ergoemacs-redo . undo-tree-redo) (undo . undo-tree-undo))) ((cond-map mark-active) programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((cond-map mark-active) ergoemacs-remaps programmer-dv)))) (9 . indent-region)) ((cond-map ergoemacs-mode) programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((cond-map ergoemacs-mode) ergoemacs-remaps programmer-dv)))) (remap keymap (keyboard-quit . ergoemacs-keyboard-quit) (revert-buffer . ergoemacs-revert-buffer) (eshell . ergoemacs-eshell-here) (powershell . ergoemacs-powershell-here) (shell . ergoemacs-shell-here) (universal-argument . ergoemacs-command-loop--universal-argument) (describe-mode . ergoemacs-describe-major-mode) (ergoemacs-print-buffer-confirm . pr-interface))))) global-map nil] "ergoemacs-banish-shift" (lambda nil "Banish Shift Combinations with <apps> SPC" (ergoemacs-component-struct--create-component (quote (:name "ergoemacs-banish-shift" :description "Banish Shift Combinations with <apps> SPC" :variable-reg "")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC SPC") (kbd "_")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC RET") (kbd "-")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC '") (kbd "\"")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC ,") (kbd "<")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC -") (kbd "_")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC .") (kbd ">")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC /") (kbd "?")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC ;") (kbd ":")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC =") (kbd "+")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC \\") (kbd "|")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC `") (kbd "~")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC 0") (kbd ")")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC 1") (kbd "!")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC 2") (kbd "@")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC 3") (kbd "#")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC 4") (kbd "$")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC 5") (kbd "%")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC 6") (kbd "^")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC 7") (kbd "&")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC 8") (kbd "*")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC 9") (kbd "(")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC a") (kbd "A")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC b") (kbd "B")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC c") (kbd "C")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC d") (kbd "D")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC e") (kbd "E")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC f") (kbd "F")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC g") (kbd "G")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC h") (kbd "H")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC i") (kbd "I")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC j") (kbd "J")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC k") (kbd "K")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC l") (kbd "L")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC m") (kbd "M")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC n") (kbd "N")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC o") (kbd "O")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC p") (kbd "P")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC q") (kbd "Q")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC r") (kbd "R")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC s") (kbd "S")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC t") (kbd "T")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC u") (kbd "U")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC v") (kbd "V")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC w") (kbd "W")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC x") (kbd "X")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC y") (kbd "Y")) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<menu> SPC z") (kbd "Z")))) "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc")) "menu-bar-file" [cl-struct-ergoemacs-component-struct "menu-bar-file" (:name "menu-bar-file" :description "File menu" :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") (keymap (menu-bar keymap (file "File" keymap (new-file menu-item "New" ergoemacs-new-empty-buffer) (make-frame menu-item "New Frame" make-frame-command) (open-file menu-item "Open..." find-file) (open-directory menu-item "Open Containing Folder" (keymap (open-directory-in-dired menu-item "In Dired" dired-jump) (open-directory-in-desktop menu-item "In File Manager" ergoemacs-open-in-desktop) (sep1 menu-item "--") (open-eshell-here menu-item "In Emacs Shell" ergoemacs-eshell-here) (open-shell-here menu-item "In Shell" ergoemacs-shell-here) nil)) (kill-buffer menu-item "Close" ergoemacs-close-current-buffer) (separator1 menu-item "--") (save-buffer menu-item "Save" save-buffer) (write-file menu-item "Save As..." write-file) (revert-buffer menu-item "Revert to Saved" revert-buffer) (print-buffer menu-item "Print" ergoemacs-print-buffer-confirm) (separator4 menu-item "--") (split-window-below menu-item "Split Window" split-window-below) (split-window-right menu-item "Split Window right" split-window-right) (one-window menu-item "Unsplit Window" delete-other-windows) (separator5 menu-item "--") (execute-command menu-item "Execute Command" execute-extended-command) (repeat-earlier-command menu-item "Repeat Earlier Command" repeat-complex-command) (separator6 menu-item "--") (exit-emacs menu-item "Quit" save-buffers-kill-emacs) "File")) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) menu-bar-file us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) menu-bar-file programmer-dv)))) (menu-bar keymap (file "File" keymap (new-file menu-item "New" ergoemacs-new-empty-buffer) (make-frame menu-item "New Frame" make-frame-command) (open-file menu-item "Open..." find-file) (open-directory menu-item "Open Containing Folder" (keymap (open-directory-in-dired menu-item "In Dired" dired-jump) (open-directory-in-desktop menu-item "In File Manager" ergoemacs-open-in-desktop) (sep1 menu-item "--") (open-eshell-here menu-item "In Emacs Shell" ergoemacs-eshell-here) (open-shell-here menu-item "In Shell" ergoemacs-shell-here) nil)) (kill-buffer menu-item "Close" ergoemacs-close-current-buffer) (separator1 menu-item "--") (save-buffer menu-item "Save" save-buffer) (write-file menu-item "Save As..." write-file) (revert-buffer menu-item "Revert to Saved" revert-buffer) (print-buffer menu-item "Print" ergoemacs-print-buffer-confirm) (separator4 menu-item "--") (split-window-below menu-item "Split Window" split-window-below) (split-window-right menu-item "Split Window right" split-window-right) (one-window menu-item "Unsplit Window" delete-other-windows) (separator5 menu-item "--") (execute-command menu-item "Execute Command" execute-extended-command) (repeat-earlier-command menu-item "Repeat Earlier Command" repeat-complex-command) (separator6 menu-item "--") (exit-emacs menu-item "Quit" save-buffers-kill-emacs) "File"))))) global-map nil] "menu-bar-edit" [cl-struct-ergoemacs-component-struct "menu-bar-edit" (:name "menu-bar-edit" :description "Edit menu" :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") (keymap (menu-bar keymap (edit "Edit" keymap (undo menu-item "Undo" undo :enable (and (not buffer-read-only) (not (eq t buffer-undo-list)) (if (eq last-command (quote undo)) (listp pending-undo-list) (consp buffer-undo-list))) :help "Undo last operation") (redo menu-item "Redo" ergoemacs-redo :enable (and (not buffer-read-only) (not (eq t buffer-undo-list)) (or (not (and (boundp (quote undo-tree-mode)) undo-tree-mode)) (and (and (boundp (quote undo-tree-mode)) undo-tree-mode) (null (undo-tree-node-next (undo-tree-current buffer-undo-tree))))))) (redo-sep menu-item "--") (cut menu-item "Cut" ergoemacs-cut-line-or-region :help "Delete text in Line/region and copy it to the clipboard" :enable (or (eq ergoemacs-handle-ctl-c-or-ctl-x (quote only-copy-cut)) (region-active-p))) (copy menu-item "Copy" ergoemacs-copy-line-or-region :help "Copy text in line/region to the clipboard" :enable (or (eq ergoemacs-handle-ctl-c-or-ctl-x (quote only-copy-cut)) (region-active-p))) (paste menu-item "Paste" ergoemacs-paste :help "Paste text from clipboard") (paste-from-menu menu-item "Paste from Kill Menu" yank-menu :enable (and (cdr yank-menu) (not buffer-read-only)) :help "Choose a string from the kill ring and paste it") (clear menu-item "Clear" delete-region :enable (and mark-active (not buffer-read-only)) :help "Delete the text in region between mark and current position") (mark-whole-buffer menu-item "Select All" mark-whole-buffer :help "Mark the whole buffer for a subsequent cut/copy") (separator-search menu-item "--") (blank-operations menu-item "Blank/Whitespace Operations" (keymap (trim-trailing-space menu-item "Trim Trailing Space" delete-trailing-whitespace :help "Trim Trailing spaces on each line") (separator-tabify menu-item "--") (tabify-region menu-item "Change multiple spaces to tabs (Tabify)" (lambda nil (interactive) (if mark-active (tabify (region-beginning) (region-end)) (tabify (point-min) (point-max)))) :help "Convert multiple spaces in the nonempty region to tabs when possible" :enable (not buffer-read-only)) (untabify menu-item "Change Tabs To Spaces (Untabify)" (lambda nil (interactive) (if mark-active (untabify (region-beginning) (region-end)) (untabify (point-min) (point-max)))) :help "Convert all tabs in the nonempty region or buffer to multiple spaces" :enable (not buffer-read-only)))) (copy-to-clipboard menu-item "Copy File/Path to Clipboard" (keymap (copy-full-path menu-item "Current Full File Path to Clipboard" ergoemacs-copy-full-path :enable (buffer-file-name)) (copy-file-name menu-item "Current File Name to Clipboard" ergoemacs-copy-file-name :enable (buffer-file-name)) (copy-dir-path menu-item "Current Dir. Path to Clipboard" ergoemacs-copy-dir-path :enable (buffer-file-name)))) (convert-case-to menu-item "Convert Case To" (keymap (capitalize-region menu-item "Capitalize" capitalize-region :help "Capitalize (initial caps) words in the nonempty region" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (downcase-region menu-item "downcase" downcase-region :help "Make words in the nonempty region lower-case" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (upcase-region menu-item "UPCASE" upcase-region :help "Make words in the nonempty region upper-case" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (toggle-case-region menu-item "Toggle Capitalization/Case" ergoemacs-toggle-letter-case :enable (not buffer-read-only)) (toggle-camel menu-item "Toggle CamelCase to camel_case" ergoemacs-toggle-camel-case :enable (not buffer-read-only)))) (eol-conversion menu-item "EOL Conversion" (keymap (windows menu-item "Windows/DOS" (lambda nil (interactive) (ergoemacs-eol-conversion (quote dos))) :enable (not (ergoemacs-eol-p (quote dos)))) (unix menu-item "Unix/OSX" (lambda nil (interactive) (ergoemacs-eol-conversion (quote unix))) :enable (not (ergoemacs-eol-p (quote unix)))) (mac menu-item "Old Mac" (lambda nil (interactive) (ergoemacs-eol-conversion (quote mac))) :enable (not (ergoemacs-eol-p (quote mac)))))) (sort menu-item "Sort" (keymap (regexp-fields menu-item "Regexp Fields" sort-regexp-fields :help "Sort the nonempty region lexicographically" :enable (and last-kbd-macro (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (pages menu-item "Pages" sort-pages :help "Sort pages in the nonempty region alphabetically" :enable (and last-kbd-macro (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-paragraphs menu-item "Paragraphs" sort-paragraphs :help "Sort paragraphs in the nonempty region alphabetically" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-numeric-fields menu-item "Numeric Field" sort-numeric-fields :help "Sort lines in the nonempty region numerically by the Nth field" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-fields menu-item "Field" sort-fields :help "Sort lines in the nonempty region lexicographically by the Nth field" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-columns menu-item "Columns" sort-columns :help "Sort lines in the nonempty region alphabetically, by a certain range of columns" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-lines menu-item "Lines" sort-lines :help "Sort lines in the nonempty region alphabetically" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (reverse-region menu-item "Reverse" reverse-region :help "Reverse the order of the selected lines" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))))) (separator-bookmark menu-item "--") (fill menu-item "Fill" fill-region :enable (and mark-active (not buffer-read-only)) :help "Fill text in region to fit between left and right margin") (props menu-item "Text Properties" facemenu-menu) "Edit")) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) menu-bar-edit us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) menu-bar-edit programmer-dv)))) (menu-bar keymap (edit "Edit" keymap (undo menu-item "Undo" undo :enable (and (not buffer-read-only) (not (eq t buffer-undo-list)) (if (eq last-command (quote undo)) (listp pending-undo-list) (consp buffer-undo-list))) :help "Undo last operation") (redo menu-item "Redo" ergoemacs-redo :enable (and (not buffer-read-only) (not (eq t buffer-undo-list)) (or (not (and (boundp (quote undo-tree-mode)) undo-tree-mode)) (and (and (boundp (quote undo-tree-mode)) undo-tree-mode) (null (undo-tree-node-next (undo-tree-current buffer-undo-tree))))))) (redo-sep menu-item "--") (cut menu-item "Cut" ergoemacs-cut-line-or-region :help "Delete text in Line/region and copy it to the clipboard" :enable (or (eq ergoemacs-handle-ctl-c-or-ctl-x (quote only-copy-cut)) (region-active-p))) (copy menu-item "Copy" ergoemacs-copy-line-or-region :help "Copy text in line/region to the clipboard" :enable (or (eq ergoemacs-handle-ctl-c-or-ctl-x (quote only-copy-cut)) (region-active-p))) (paste menu-item "Paste" ergoemacs-paste :help "Paste text from clipboard") (paste-from-menu menu-item "Paste from Kill Menu" yank-menu :enable (and (cdr yank-menu) (not buffer-read-only)) :help "Choose a string from the kill ring and paste it") (clear menu-item "Clear" delete-region :enable (and mark-active (not buffer-read-only)) :help "Delete the text in region between mark and current position") (mark-whole-buffer menu-item "Select All" mark-whole-buffer :help "Mark the whole buffer for a subsequent cut/copy") (separator-search menu-item "--") (blank-operations menu-item "Blank/Whitespace Operations" (keymap (trim-trailing-space menu-item "Trim Trailing Space" delete-trailing-whitespace :help "Trim Trailing spaces on each line") (separator-tabify menu-item "--") (tabify-region menu-item "Change multiple spaces to tabs (Tabify)" (lambda nil (interactive) (if mark-active (tabify (region-beginning) (region-end)) (tabify (point-min) (point-max)))) :help "Convert multiple spaces in the nonempty region to tabs when possible" :enable (not buffer-read-only)) (untabify menu-item "Change Tabs To Spaces (Untabify)" (lambda nil (interactive) (if mark-active (untabify (region-beginning) (region-end)) (untabify (point-min) (point-max)))) :help "Convert all tabs in the nonempty region or buffer to multiple spaces" :enable (not buffer-read-only)))) (copy-to-clipboard menu-item "Copy File/Path to Clipboard" (keymap (copy-full-path menu-item "Current Full File Path to Clipboard" ergoemacs-copy-full-path :enable (buffer-file-name)) (copy-file-name menu-item "Current File Name to Clipboard" ergoemacs-copy-file-name :enable (buffer-file-name)) (copy-dir-path menu-item "Current Dir. Path to Clipboard" ergoemacs-copy-dir-path :enable (buffer-file-name)))) (convert-case-to menu-item "Convert Case To" (keymap (capitalize-region menu-item "Capitalize" capitalize-region :help "Capitalize (initial caps) words in the nonempty region" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (downcase-region menu-item "downcase" downcase-region :help "Make words in the nonempty region lower-case" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (upcase-region menu-item "UPCASE" upcase-region :help "Make words in the nonempty region upper-case" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (toggle-case-region menu-item "Toggle Capitalization/Case" ergoemacs-toggle-letter-case :enable (not buffer-read-only)) (toggle-camel menu-item "Toggle CamelCase to camel_case" ergoemacs-toggle-camel-case :enable (not buffer-read-only)))) (eol-conversion menu-item "EOL Conversion" (keymap (windows menu-item "Windows/DOS" (lambda nil (interactive) (ergoemacs-eol-conversion (quote dos))) :enable (not (ergoemacs-eol-p (quote dos)))) (unix menu-item "Unix/OSX" (lambda nil (interactive) (ergoemacs-eol-conversion (quote unix))) :enable (not (ergoemacs-eol-p (quote unix)))) (mac menu-item "Old Mac" (lambda nil (interactive) (ergoemacs-eol-conversion (quote mac))) :enable (not (ergoemacs-eol-p (quote mac)))))) (sort menu-item "Sort" (keymap (regexp-fields menu-item "Regexp Fields" sort-regexp-fields :help "Sort the nonempty region lexicographically" :enable (and last-kbd-macro (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (pages menu-item "Pages" sort-pages :help "Sort pages in the nonempty region alphabetically" :enable (and last-kbd-macro (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-paragraphs menu-item "Paragraphs" sort-paragraphs :help "Sort paragraphs in the nonempty region alphabetically" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-numeric-fields menu-item "Numeric Field" sort-numeric-fields :help "Sort lines in the nonempty region numerically by the Nth field" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-fields menu-item "Field" sort-fields :help "Sort lines in the nonempty region lexicographically by the Nth field" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-columns menu-item "Columns" sort-columns :help "Sort lines in the nonempty region alphabetically, by a certain range of columns" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-lines menu-item "Lines" sort-lines :help "Sort lines in the nonempty region alphabetically" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (reverse-region menu-item "Reverse" reverse-region :help "Reverse the order of the selected lines" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))))) (separator-bookmark menu-item "--") (fill menu-item "Fill" fill-region :enable (and mark-active (not buffer-read-only)) :help "Fill text in region to fit between left and right margin") (props menu-item "Text Properties" facemenu-menu) "Edit"))))) global-map nil] "menu-bar-search" [cl-struct-ergoemacs-component-struct "menu-bar-search" (:name "menu-bar-search" :description "Search menu" :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") (keymap (menu-bar keymap (search "Search" keymap (isearch-forward menu-item "String Forward..." isearch-forward :help "Search forward for a string as you type it") (isearch-backward menu-item "    Backward..." isearch-backward :help "Search backwards for a string as you type it") (re-isearch-forward menu-item "Regexp Forward..." isearch-forward-regexp :help "Search forward for a regular expression as you type it") (re-isearch-backward menu-item "    Backward..." isearch-backward-regexp :help "Search backwards for a regular expression as you type it") (separator-repeat-search menu-item "--") (repeat-forward menu-item "Repeat Forward" nonincremental-repeat-search-forward :enable (or (and (memq menu-bar-last-search-type (quote (string word))) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search forward") (repeat-backward menu-item "    Repeat Backward" nonincremental-repeat-search-backward :enable (or (and (memq menu-bar-last-search-type (quote (string word))) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search forward") (separator-isearch menu-item "--") (i-search menu-item "String Search" (keymap (search-forward menu-item "Forward String..." search-forward) (search-backward menu-item "    Backward..." search-backward) (search-forward-regexp menu-item "Forward Regexp..." re-search-forward) (search-backward-regexp menu-item "    Backward..." re-search-backward) "String Search")) (replace menu-item "Replace" (keymap (query-replace menu-item "Replace String..." query-replace :enable (not buffer-read-only) :help "Replace string interactively, ask about each occurrence") (query-replace-regexp menu-item "Replace Regexp..." query-replace-regexp :enable (not buffer-read-only) :help "Replace regular expression interactively, ask about each occurrence") (separator-replace-tags menu-item "--") (tags-repl menu-item "Replace in Tagged Files..." tags-query-replace :help "Interactively replace a regexp in all tagged files") (tags-repl-continue menu-item "Continue Replace" tags-loop-continue :help "Continue last tags replace operation") "Replace")) (grep menu-item "Grep..." grep :enable (executable-find "grep")) (occur menu-item "Occurrences in buffer..." occur :help "Show Lines in a buffer that match a regular expression") (moccur menu-item "Occurrences in all buffers..." multi-occur :help "Show Lines in all buffers that match a regular expression") (separator-go-to menu-item "--") (goto menu-item "Go To" (keymap (go-to-line menu-item "Goto Line..." goto-line :help "Read a line number and go to that line") (separator-tags menu-item "--") (find-tag menu-item "Find Tag..." find-tag :help "Find definition of function or variable") (find-tag-otherw menu-item "Find Tag in Other Window..." find-tag-other-window :help "Find function/variable definition in another window") (next-tag menu-item "Find Next Tag" menu-bar-next-tag :enable (and (boundp (quote tags-location-ring)) (not (ring-empty-p tags-location-ring))) :help "Find next function/variable matching last tag name") (next-tag-otherw menu-item "Next Tag in Other Window" menu-bar-next-tag-other-window :enable (and (boundp (quote tags-location-ring)) (not (ring-empty-p tags-location-ring))) :help "Find next function/variable matching last tag name in another window") (apropos-tags menu-item "Tags Apropos..." tags-apropos :help "Find function/variables whose names match regexp") (separator-tag-file menu-item "--") (set-tags-name menu-item "Set Tags File Name..." visit-tags-table :help "Tell Tags commands which tag table file to use") "Go To") (separator-packages)) (bookmark menu-item "Bookmarks" menu-bar-bookmark-map) "Search")) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) menu-bar-search us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) menu-bar-search programmer-dv)))) (menu-bar keymap (search "Search" keymap (isearch-forward menu-item "String Forward..." isearch-forward :help "Search forward for a string as you type it") (isearch-backward menu-item "    Backward..." isearch-backward :help "Search backwards for a string as you type it") (re-isearch-forward menu-item "Regexp Forward..." isearch-forward-regexp :help "Search forward for a regular expression as you type it") (re-isearch-backward menu-item "    Backward..." isearch-backward-regexp :help "Search backwards for a regular expression as you type it") (separator-repeat-search menu-item "--") (repeat-forward menu-item "Repeat Forward" nonincremental-repeat-search-forward :enable (or (and (memq menu-bar-last-search-type (quote (string word))) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search forward") (repeat-backward menu-item "    Repeat Backward" nonincremental-repeat-search-backward :enable (or (and (memq menu-bar-last-search-type (quote (string word))) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search forward") (separator-isearch menu-item "--") (i-search menu-item "String Search" (keymap (search-forward menu-item "Forward String..." search-forward) (search-backward menu-item "    Backward..." search-backward) (search-forward-regexp menu-item "Forward Regexp..." re-search-forward) (search-backward-regexp menu-item "    Backward..." re-search-backward) "String Search")) (replace menu-item "Replace" (keymap (query-replace menu-item "Replace String..." query-replace :enable (not buffer-read-only) :help "Replace string interactively, ask about each occurrence") (query-replace-regexp menu-item "Replace Regexp..." query-replace-regexp :enable (not buffer-read-only) :help "Replace regular expression interactively, ask about each occurrence") (separator-replace-tags menu-item "--") (tags-repl menu-item "Replace in Tagged Files..." tags-query-replace :help "Interactively replace a regexp in all tagged files") (tags-repl-continue menu-item "Continue Replace" tags-loop-continue :help "Continue last tags replace operation") "Replace")) (grep menu-item "Grep..." grep :enable (executable-find "grep")) (occur menu-item "Occurrences in buffer..." occur :help "Show Lines in a buffer that match a regular expression") (moccur menu-item "Occurrences in all buffers..." multi-occur :help "Show Lines in all buffers that match a regular expression") (separator-go-to menu-item "--") (goto menu-item "Go To" (keymap (go-to-line menu-item "Goto Line..." goto-line :help "Read a line number and go to that line") (separator-tags menu-item "--") (find-tag menu-item "Find Tag..." find-tag :help "Find definition of function or variable") (find-tag-otherw menu-item "Find Tag in Other Window..." find-tag-other-window :help "Find function/variable definition in another window") (next-tag menu-item "Find Next Tag" menu-bar-next-tag :enable (and (boundp (quote tags-location-ring)) (not (ring-empty-p tags-location-ring))) :help "Find next function/variable matching last tag name") (next-tag-otherw menu-item "Next Tag in Other Window" menu-bar-next-tag-other-window :enable (and (boundp (quote tags-location-ring)) (not (ring-empty-p tags-location-ring))) :help "Find next function/variable matching last tag name in another window") (apropos-tags menu-item "Tags Apropos..." tags-apropos :help "Find function/variables whose names match regexp") (separator-tag-file menu-item "--") (set-tags-name menu-item "Set Tags File Name..." visit-tags-table :help "Tell Tags commands which tag table file to use") "Go To")) (bookmark menu-item "Bookmarks" menu-bar-bookmark-map) "Search"))))) global-map nil] "menu-bar-view" [cl-struct-ergoemacs-component-struct "menu-bar-view" (:name "menu-bar-view" :description "View menu" :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") (keymap (menu-bar keymap (view "View" keymap (menu-font-size menu-item "Zoom" (keymap (zoom-in menu-item "Zoom In" text-scale-increase) (zoom-out menu-item "Zoom Out" text-scale-decrease) (zoom-reset menu-item "Zoom Reset" ergoemacs-text-scale-normal-size))) (menu-set-font menu-item "Set Default Font..." menu-set-font :visible (display-multi-font-p) :help "Select a default font") (\, (when (fboundp (quote customize-themes)) (quote (color-theme menu-item "Customize Color Themes" customize-themes :help "Customize Emacs Themes.")))) (separator-font-size menu-item "--") (highlight-current-line menu-item "Highlight Current Line" global-hl-line-mode :help "Have the cursor line always Highlighted" :button (:toggle and (boundp (quote global-hl-line-mode)) global-hl-line-mode)) (paren-mode menu-item "Highlight Matching Parentheses" show-paren-mode :button (:toggle . show-paren-mode)) (ruler-mode menu-item "Ruler Mode" ruler-mode :button (:toggle . ruler-mode)) (blink-cursor menu-item "Cursor Blink" blink-cursor-mode :button (:toggle . blink-cursor-mode)) (tabbar-mode menu-item "Tabbar" ergoemacs-menu-tabbar-toggle :button (:toggle and (boundp (quote tabbar-mode)) tabbar-mode)) (separator-speedbar menu-item "--") (showhide-speedbar menu-item "Speedbar" speedbar-frame-mode :help "Display a Speedbar quick-navigation frame" :button (:toggle and (boundp (quote speedbar-frame)) (frame-live-p speedbar-frame) (frame-visible-p speedbar-frame))) (linecolumn-separator "--") (line-number-mode menu-item "Line Numbers" line-number-mode :help "Show the current line number in the mode line" :button (:toggle and (default-boundp (quote line-number-mode)) (default-value (quote line-number-mode)))) (global-whitespace-mode menu-item "Show/Hide whitespaces" global-whitespace-mode :button (:toggle . global-whitespace-mode)) (global-linum-mode menu-item "Show/Hide line numbers in margin" global-linum-mode :button (:toggle . global-linum-mode)))) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) menu-bar-view us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) menu-bar-view programmer-dv)))) (menu-bar keymap (view "View" keymap (menu-font-size menu-item "Zoom" (keymap (zoom-in menu-item "Zoom In" text-scale-increase) (zoom-out menu-item "Zoom Out" text-scale-decrease) (zoom-reset menu-item "Zoom Reset" ergoemacs-text-scale-normal-size))) (menu-set-font menu-item "Set Default Font..." menu-set-font :visible (display-multi-font-p) :help "Select a default font") (\, (when (fboundp (quote customize-themes)) (quote (color-theme menu-item "Customize Color Themes" customize-themes :help "Customize Emacs Themes.")))) (separator-font-size menu-item "--") (highlight-current-line menu-item "Highlight Current Line" global-hl-line-mode :help "Have the cursor line always Highlighted" :button (:toggle and (boundp (quote global-hl-line-mode)) global-hl-line-mode)) (paren-mode menu-item "Highlight Matching Parentheses" show-paren-mode :button (:toggle . show-paren-mode)) (ruler-mode menu-item "Ruler Mode" ruler-mode :button (:toggle . ruler-mode)) (blink-cursor menu-item "Cursor Blink" blink-cursor-mode :button (:toggle . blink-cursor-mode)) (tabbar-mode menu-item "Tabbar" ergoemacs-menu-tabbar-toggle :button (:toggle and (boundp (quote tabbar-mode)) tabbar-mode)) (separator-speedbar menu-item "--") (showhide-speedbar menu-item "Speedbar" speedbar-frame-mode :help "Display a Speedbar quick-navigation frame" :button (:toggle and (boundp (quote speedbar-frame)) (frame-live-p speedbar-frame) (frame-visible-p speedbar-frame))) (linecolumn-separator "--") (line-number-mode menu-item "Line Numbers" line-number-mode :help "Show the current line number in the mode line" :button (:toggle and (default-boundp (quote line-number-mode)) (default-value (quote line-number-mode)))) (global-whitespace-mode menu-item "Show/Hide whitespaces" global-whitespace-mode :button (:toggle . global-whitespace-mode)) (global-linum-mode menu-item "Show/Hide line numbers in margin" global-linum-mode :button (:toggle . global-linum-mode))))))) global-map nil] "menu-bar-languages" [cl-struct-ergoemacs-component-struct "menu-bar-languages" (:name "menu-bar-languages" :description "Languages menu" :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") (keymap (menu-bar keymap (languages "Languages" keymap (A menu-item "A" (keymap (ada-mode menu-item "Ada" ada-mode) (antlr-mode menu-item "Antlr" antlr-mode) (asm-mode menu-item "Asm" asm-mode) (autoconf-mode menu-item "Autoconf" autoconf-mode) (awk-mode menu-item "Awk" awk-mode))) (B menu-item "B" (keymap (bat-mode menu-item "Bat" bat-mode) (bibtex-mode menu-item "Bibtex" bibtex-mode) (bibtex-style-mode menu-item "Bibtex style" bibtex-style-mode) (bovine-grammar-mode menu-item "Bovine grammar" bovine-grammar-mode))) (C menu-item "C" (keymap (c-mode menu-item "C" c-mode) (c++-mode menu-item "C++" c++-mode) (change-log-mode menu-item "Change log" change-log-mode) (compilation-mode menu-item "Compilation" compilation-mode) (conf-unix-mode menu-item "Conf unix" conf-unix-mode) (csharp-mode menu-item "Csharp" csharp-mode) (css-mode menu-item "Css" css-mode))) (D menu-item "D" (keymap (d-mode menu-item "D" d-mode) (dcl-mode menu-item "Dcl" dcl-mode) (delphi-mode menu-item "Delphi" delphi-mode) (dns-mode menu-item "Dns" dns-mode) (doctex-mode menu-item "Doctex" doctex-mode) (dsssl-mode menu-item "Dsssl" dsssl-mode))) (emacs-lisp-mode menu-item "Emacs lisp" emacs-lisp-mode) (F menu-item "F" (keymap (f90-mode menu-item "F90" f90-mode) (fish-mode menu-item "Fish" fish-mode) (fortran-mode menu-item "Fortran" fortran-mode))) (G menu-item "G" (keymap (gdb-script-mode menu-item "Gdb script" gdb-script-mode) (ghc-core-mode menu-item "Ghc core" ghc-core-mode) (ghci-script-mode menu-item "Ghci script" ghci-script-mode) (glsl-mode menu-item "Glsl" glsl-mode) (go-mode menu-item "Go" go-mode) (groovy-mode menu-item "Groovy" groovy-mode))) (H menu-item "H" (keymap (haskell-mode menu-item "Haskell" haskell-mode) (haskell-cabal-mode menu-item "Haskell cabal" haskell-cabal-mode) (html-mode menu-item "Html" html-mode))) (I menu-item "I" (keymap (icon-mode menu-item "Icon" icon-mode) (idl-mode menu-item "Idl" idl-mode) (idlwave-mode menu-item "Idlwave" idlwave-mode))) (J menu-item "J" (keymap (java-mode menu-item "Java" java-mode) (javascript-mode menu-item "Javascript" javascript-mode) (js2-mode menu-item "Js2" js2-mode) (json-mode menu-item "Json" json-mode))) (L menu-item "L" (keymap (latex-mode menu-item "Latex" latex-mode) (ld-script-mode menu-item "Ld script" ld-script-mode) (less-css-mode menu-item "Less css" less-css-mode) (lisp-mode menu-item "Lisp" lisp-mode) (literate-haskell-mode menu-item "Literate haskell" literate-haskell-mode))) (M menu-item "M" (keymap (m4-mode menu-item "M4" m4-mode) (makefile-automake-mode menu-item "Makefile automake" makefile-automake-mode) (makefile-gmake-mode menu-item "Makefile gmake" makefile-gmake-mode) (makefile-imake-mode menu-item "Makefile imake" makefile-imake-mode) (makefile-makepp-mode menu-item "Makefile makepp" makefile-makepp-mode) (markdown-mode menu-item "Markdown" markdown-mode) (matlab-mode menu-item "Matlab" matlab-mode) (metafont-mode menu-item "Metafont" metafont-mode) (metapost-mode menu-item "Metapost" metapost-mode) (mixal-mode menu-item "Mixal" mixal-mode) (m2-mode menu-item "Modula-2" m2-mode))) (nroff-mode menu-item "Nroff" nroff-mode) (O menu-item "O" (keymap (objc-mode menu-item "Objc" objc-mode) (octave-mode menu-item "Octave" octave-mode) (org-mode menu-item "Org" org-mode))) (P menu-item "P" (keymap (pascal-mode menu-item "Pascal" pascal-mode) (perl-mode menu-item "Perl" perl-mode) (pike-mode menu-item "Pike" pike-mode) (prolog-mode menu-item "Prolog" prolog-mode) (ps-mode menu-item "Ps" ps-mode) (python-mode menu-item "Python" python-mode))) (R menu-item "R" (keymap (rst-mode menu-item "Rst" rst-mode) (ruby-mode menu-item "Ruby" ruby-mode) (rust-mode menu-item "Rust" rust-mode))) (S menu-item "S" (keymap (scala-mode menu-item "Scala" scala-mode) (scheme-mode menu-item "Scheme" scheme-mode) (scss-mode menu-item "Scss" scss-mode) (conf-mode menu-item "Settings" conf-mode) (sgml-mode menu-item "Sgml" sgml-mode) (sh-mode menu-item "Sh" sh-mode) (shell-script-mode menu-item "Shell script" shell-script-mode) (sieve-mode menu-item "Sieve" sieve-mode) (simula-mode menu-item "Simula" simula-mode) (snmp-mode menu-item "SKMP MIBs" snmp-mode) (snmpv2-mode menu-item "SNMPv2 MIBs" snmpv2-mode) (sql-mode menu-item "Sql" sql-mode) (srecode-template-mode menu-item "Srecode template" srecode-template-mode))) (T menu-item "T" (keymap (tcl-mode menu-item "Tcl" tcl-mode) (tex-mode menu-item "Tex" tex-mode) (texinfo-mode menu-item "Texinfo" texinfo-mode) (text-mode menu-item "Text" text-mode) (toml-mode menu-item "Toml" toml-mode) (typescript-mode menu-item "Typescript" typescript-mode))) (V menu-item "V" (keymap (vera-mode menu-item "Vera" vera-mode) (verilog-mode menu-item "Verilog" verilog-mode) (vhdl-mode menu-item "Vhdl" vhdl-mode))) (W menu-item "W" (keymap (web-mode menu-item "Web" web-mode) (wisent-grammar-mode menu-item "Wisent grammar" wisent-grammar-mode))) (xml-mode menu-item "Xml" xml-mode) (separator1 menu-item "--") (package menu-item "Manage Packages" list-packages))) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) menu-bar-languages us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) menu-bar-languages programmer-dv)))) (menu-bar keymap (languages "Languages" keymap (A menu-item "A" (keymap (ada-mode menu-item "Ada" ada-mode) (antlr-mode menu-item "Antlr" antlr-mode) (asm-mode menu-item "Asm" asm-mode) (autoconf-mode menu-item "Autoconf" autoconf-mode) (awk-mode menu-item "Awk" awk-mode))) (B menu-item "B" (keymap (bat-mode menu-item "Bat" bat-mode) (bibtex-mode menu-item "Bibtex" bibtex-mode) (bibtex-style-mode menu-item "Bibtex style" bibtex-style-mode) (bovine-grammar-mode menu-item "Bovine grammar" bovine-grammar-mode))) (C menu-item "C" (keymap (c-mode menu-item "C" c-mode) (c++-mode menu-item "C++" c++-mode) (change-log-mode menu-item "Change log" change-log-mode) (compilation-mode menu-item "Compilation" compilation-mode) (conf-unix-mode menu-item "Conf unix" conf-unix-mode) (csharp-mode menu-item "Csharp" csharp-mode) (css-mode menu-item "Css" css-mode))) (D menu-item "D" (keymap (d-mode menu-item "D" d-mode) (dcl-mode menu-item "Dcl" dcl-mode) (delphi-mode menu-item "Delphi" delphi-mode) (dns-mode menu-item "Dns" dns-mode) (doctex-mode menu-item "Doctex" doctex-mode) (dsssl-mode menu-item "Dsssl" dsssl-mode))) (emacs-lisp-mode menu-item "Emacs lisp" emacs-lisp-mode) (F menu-item "F" (keymap (f90-mode menu-item "F90" f90-mode) (fish-mode menu-item "Fish" fish-mode) (fortran-mode menu-item "Fortran" fortran-mode))) (G menu-item "G" (keymap (gdb-script-mode menu-item "Gdb script" gdb-script-mode) (ghc-core-mode menu-item "Ghc core" ghc-core-mode) (ghci-script-mode menu-item "Ghci script" ghci-script-mode) (glsl-mode menu-item "Glsl" glsl-mode) (go-mode menu-item "Go" go-mode) (groovy-mode menu-item "Groovy" groovy-mode))) (H menu-item "H" (keymap (haskell-mode menu-item "Haskell" haskell-mode) (haskell-cabal-mode menu-item "Haskell cabal" haskell-cabal-mode) (html-mode menu-item "Html" html-mode))) (I menu-item "I" (keymap (icon-mode menu-item "Icon" icon-mode) (idl-mode menu-item "Idl" idl-mode) (idlwave-mode menu-item "Idlwave" idlwave-mode))) (J menu-item "J" (keymap (java-mode menu-item "Java" java-mode) (javascript-mode menu-item "Javascript" javascript-mode) (js2-mode menu-item "Js2" js2-mode) (json-mode menu-item "Json" json-mode))) (L menu-item "L" (keymap (latex-mode menu-item "Latex" latex-mode) (ld-script-mode menu-item "Ld script" ld-script-mode) (less-css-mode menu-item "Less css" less-css-mode) (lisp-mode menu-item "Lisp" lisp-mode) (literate-haskell-mode menu-item "Literate haskell" literate-haskell-mode))) (M menu-item "M" (keymap (m4-mode menu-item "M4" m4-mode) (makefile-automake-mode menu-item "Makefile automake" makefile-automake-mode) (makefile-gmake-mode menu-item "Makefile gmake" makefile-gmake-mode) (makefile-imake-mode menu-item "Makefile imake" makefile-imake-mode) (makefile-makepp-mode menu-item "Makefile makepp" makefile-makepp-mode) (markdown-mode menu-item "Markdown" markdown-mode) (matlab-mode menu-item "Matlab" matlab-mode) (metafont-mode menu-item "Metafont" metafont-mode) (metapost-mode menu-item "Metapost" metapost-mode) (mixal-mode menu-item "Mixal" mixal-mode) (m2-mode menu-item "Modula-2" m2-mode))) (nroff-mode menu-item "Nroff" nroff-mode) (O menu-item "O" (keymap (objc-mode menu-item "Objc" objc-mode) (octave-mode menu-item "Octave" octave-mode) (org-mode menu-item "Org" org-mode))) (P menu-item "P" (keymap (pascal-mode menu-item "Pascal" pascal-mode) (perl-mode menu-item "Perl" perl-mode) (pike-mode menu-item "Pike" pike-mode) (prolog-mode menu-item "Prolog" prolog-mode) (ps-mode menu-item "Ps" ps-mode) (python-mode menu-item "Python" python-mode))) (R menu-item "R" (keymap (rst-mode menu-item "Rst" rst-mode) (ruby-mode menu-item "Ruby" ruby-mode) (rust-mode menu-item "Rust" rust-mode))) (S menu-item "S" (keymap (scala-mode menu-item "Scala" scala-mode) (scheme-mode menu-item "Scheme" scheme-mode) (scss-mode menu-item "Scss" scss-mode) (conf-mode menu-item "Settings" conf-mode) (sgml-mode menu-item "Sgml" sgml-mode) (sh-mode menu-item "Sh" sh-mode) (shell-script-mode menu-item "Shell script" shell-script-mode) (sieve-mode menu-item "Sieve" sieve-mode) (simula-mode menu-item "Simula" simula-mode) (snmp-mode menu-item "SKMP MIBs" snmp-mode) (snmpv2-mode menu-item "SNMPv2 MIBs" snmpv2-mode) (sql-mode menu-item "Sql" sql-mode) (srecode-template-mode menu-item "Srecode template" srecode-template-mode))) (T menu-item "T" (keymap (tcl-mode menu-item "Tcl" tcl-mode) (tex-mode menu-item "Tex" tex-mode) (texinfo-mode menu-item "Texinfo" texinfo-mode) (text-mode menu-item "Text" text-mode) (toml-mode menu-item "Toml" toml-mode) (typescript-mode menu-item "Typescript" typescript-mode))) (V menu-item "V" (keymap (vera-mode menu-item "Vera" vera-mode) (verilog-mode menu-item "Verilog" verilog-mode) (vhdl-mode menu-item "Vhdl" vhdl-mode))) (W menu-item "W" (keymap (web-mode menu-item "Web" web-mode) (wisent-grammar-mode menu-item "Wisent grammar" wisent-grammar-mode))) (xml-mode menu-item "Xml" xml-mode) (separator1 menu-item "--") (package menu-item "Manage Packages" list-packages)))))) global-map nil] "menu-bar-help" [cl-struct-ergoemacs-component-struct "menu-bar-help" (:name "menu-bar-help" :description "Help menu" :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") (keymap (menu-bar keymap (help-menu "?" keymap (whoops menu-item "Whoops!?" (keymap (what-did-i-do menu-item "What did I do !?" view-lossage :help "Display last 100 input keystrokes") (exit-recurive-edit menu-item "Exit Recursive Editing" top-level :help "Exit all Recursive editing Levels") (keyboard-quit menu-item "Cancel Current Action" keyboard-quit :help "Quit any operation in progress"))) (help-for-help menu-item "Help for Help..." help-for-help :help "Emacs main help command") (separator-1 menu-item "--") (apropos menu-item "Apropos (Find matching)" (keymap (commands menu-item "Commands..." apropos-command :help "Find commands matching a regular expression") (user-options menu-item "User Options..." ergoemacs-apropos-user-options :help "Find user options matching a regular expression") (all-vars menu-item "All Variables..." apropos-variable :help "Find a variable that matches a regular expression") (var-values menu-item "Variable Values..." apropos-value :help "Find variable values that matches a regular expression.") (symbols menu-item "Symbols..." apropos :help "Find functions/variables that match a regular expression.") (symbol-desc menu-item "Symbol Descriptions (Doc)..." apropos-documentation :help "Find functions/variables whose documentation match a regular expression") (tags menu-item "Tags..." tags-apropos :help "Find Tags Matching Regular Expression"))) (describe menu-item "Describe" (keymap (function menu-item "Function..." describe-function :help "Describe command or other function") (variable menu-item "Variable..." describe-variable :help "Describe an emacs user option or other variable.") (face menu-item "Face..." describe-face :help "Describe a face") (key menu-item "Key..." describe-key :help "Describe a command bound to a key") (input menu-item "Input Method..." describe-input-method) (coding menu-item "Coding System..." describe-coding-system) (separator-ergoemacs-describe "--") (theme-component menu-item "Ergoemacs Component" describe-ergoemacs-component) (theme menu-item "Ergoemacs Theme" describe-ergoemacs-theme) (layout menu-item "Ergoemacs Layout" describe-ergoemacs-layout) (separator-curr-modes menu-item "--") (curr-major-mode menu-item "Current Major Mode" ergoemacs-describe-major-mode :help "Describe this buffers major and minor modes.") (curr-modes menu-item "Current Modes" (lambda nil (interactive) (call-interactively (quote describe-mode))) :help "Describe this buffers major and minor modes.") (curr-keys menu-item "Current Key Bindings" describe-bindings :help "List all key-bindings with brief descriptions.") (curr-syntax menu-item "Current Syntax Table" describe-syntax :help "Describe the syntax specifications in the current syntax table"))) (learn-more menu-item "Learn More" (keymap (emacs menu-item "Emacs" (keymap (manual menu-item "Manual" info-emacs-manual) (command-desc menu-item "    Command Description..." Info-goto-emacs-command-node :help "Show emacs manual section about a command") (index menu-item "    Index..." emacs-index-search :help "Lookup topic in Emacs manual") (glossary menu-item "    Glossary" search-emacs-glossary) (separator-emacs menu-item "--") (faq menu-item "FAQ" view-emacs-FAQ :help "Read frequently asked questions about Emacs (with answers)") (whats-new menu-item "What's new" view-emacs-news :help "New features of emacs") (known-problems menu-item "Known problems" view-emacs-problems :help "Known problems of this Emacs version."))) (emacs-lisp menu-item "Emacs Lisp" (keymap (xah-lisp menu-item "Xah Emacs Lisp Tutorial" (lambda nil (interactive) (browse-url ergoemacs-xah-emacs-lisp-tutorial-url)) :help "Read Emacs Lisp Tutorial") (intro menu-item "Intro to Elisp" (lambda nil (interactive) (info "eintr")) :help "Read introduction to Emacs Lisp") (manual menu-item "Manual" (lambda nil (interactive) (info "elisp")) :help "Read Emacs Lisp reference Manual") (index menu-item "    Index..." elisp-index-search :help "Lookup topic in emacs lisp manual") (elisp-separator menu-item "--") (locate-library menu-item "Locate Library" locate-library :help "Locate lisp library"))) (last-accessed-info menu-item "Last Accessed Manual (Info)" info :help "Open Info, at the last doc place visited.") (info-dir menu-item "All Manuals (`Info')" Info-directory :help "Open a list of all the info docs.") (man-dir menu-item "Unix Man Pages..." woman :help "Unix Manual entries (with WoMan)"))) (separator-2 menu-item "--") (eroemacs-current-keybindings menu-item "Current Ergoemacs Keybindings" ergoemacs-describe-current-theme) (ergoemacs-mode-web-page menu-item "Ergoemacs-mode web-page" (lambda nil (interactive) (browse-url ergoemacs-mode-web-page-url)) :help "Online help about ergoemacs.") (separator-3 menu-item "--") (send-bug-report menu-item "Send Emacs Bug Report" report-emacs-bug :help "Report an emacs bug.") (emacs-web-page menu-item "Emacs Web Page" (lambda nil (interactive) (browse-url "http://www.gnu.org/software/emacs/")) :help "Emacs Web Page") (separator-licence menu-item "--") (license menu-item "License" describe-copying) "?")) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) menu-bar-help us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) menu-bar-help programmer-dv)))) (menu-bar keymap (help-menu "?" keymap (whoops menu-item "Whoops!?" (keymap (what-did-i-do menu-item "What did I do !?" view-lossage :help "Display last 100 input keystrokes") (exit-recurive-edit menu-item "Exit Recursive Editing" top-level :help "Exit all Recursive editing Levels") (keyboard-quit menu-item "Cancel Current Action" keyboard-quit :help "Quit any operation in progress"))) (help-for-help menu-item "Help for Help..." help-for-help :help "Emacs main help command") (separator-1 menu-item "--") (apropos menu-item "Apropos (Find matching)" (keymap (commands menu-item "Commands..." apropos-command :help "Find commands matching a regular expression") (user-options menu-item "User Options..." ergoemacs-apropos-user-options :help "Find user options matching a regular expression") (all-vars menu-item "All Variables..." apropos-variable :help "Find a variable that matches a regular expression") (var-values menu-item "Variable Values..." apropos-value :help "Find variable values that matches a regular expression.") (symbols menu-item "Symbols..." apropos :help "Find functions/variables that match a regular expression.") (symbol-desc menu-item "Symbol Descriptions (Doc)..." apropos-documentation :help "Find functions/variables whose documentation match a regular expression") (tags menu-item "Tags..." tags-apropos :help "Find Tags Matching Regular Expression"))) (describe menu-item "Describe" (keymap (function menu-item "Function..." describe-function :help "Describe command or other function") (variable menu-item "Variable..." describe-variable :help "Describe an emacs user option or other variable.") (face menu-item "Face..." describe-face :help "Describe a face") (key menu-item "Key..." describe-key :help "Describe a command bound to a key") (input menu-item "Input Method..." describe-input-method) (coding menu-item "Coding System..." describe-coding-system) (separator-ergoemacs-describe "--") (theme-component menu-item "Ergoemacs Component" describe-ergoemacs-component) (theme menu-item "Ergoemacs Theme" describe-ergoemacs-theme) (layout menu-item "Ergoemacs Layout" describe-ergoemacs-layout) (separator-curr-modes menu-item "--") (curr-major-mode menu-item "Current Major Mode" ergoemacs-describe-major-mode :help "Describe this buffers major and minor modes.") (curr-modes menu-item "Current Modes" (lambda nil (interactive) (call-interactively (quote describe-mode))) :help "Describe this buffers major and minor modes.") (curr-keys menu-item "Current Key Bindings" describe-bindings :help "List all key-bindings with brief descriptions.") (curr-syntax menu-item "Current Syntax Table" describe-syntax :help "Describe the syntax specifications in the current syntax table"))) (learn-more menu-item "Learn More" (keymap (emacs menu-item "Emacs" (keymap (manual menu-item "Manual" info-emacs-manual) (command-desc menu-item "    Command Description..." Info-goto-emacs-command-node :help "Show emacs manual section about a command") (index menu-item "    Index..." emacs-index-search :help "Lookup topic in Emacs manual") (glossary menu-item "    Glossary" search-emacs-glossary) (separator-emacs menu-item "--") (faq menu-item "FAQ" view-emacs-FAQ :help "Read frequently asked questions about Emacs (with answers)") (whats-new menu-item "What's new" view-emacs-news :help "New features of emacs") (known-problems menu-item "Known problems" view-emacs-problems :help "Known problems of this Emacs version."))) (emacs-lisp menu-item "Emacs Lisp" (keymap (xah-lisp menu-item "Xah Emacs Lisp Tutorial" (lambda nil (interactive) (browse-url ergoemacs-xah-emacs-lisp-tutorial-url)) :help "Read Emacs Lisp Tutorial") (intro menu-item "Intro to Elisp" (lambda nil (interactive) (info "eintr")) :help "Read introduction to Emacs Lisp") (manual menu-item "Manual" (lambda nil (interactive) (info "elisp")) :help "Read Emacs Lisp reference Manual") (index menu-item "    Index..." elisp-index-search :help "Lookup topic in emacs lisp manual") (elisp-separator menu-item "--") (locate-library menu-item "Locate Library" locate-library :help "Locate lisp library"))) (last-accessed-info menu-item "Last Accessed Manual (Info)" info :help "Open Info, at the last doc place visited.") (info-dir menu-item "All Manuals (`Info')" Info-directory :help "Open a list of all the info docs.") (man-dir menu-item "Unix Man Pages..." woman :help "Unix Manual entries (with WoMan)"))) (separator-2 menu-item "--") (eroemacs-current-keybindings menu-item "Current Ergoemacs Keybindings" ergoemacs-describe-current-theme) (ergoemacs-mode-web-page menu-item "Ergoemacs-mode web-page" (lambda nil (interactive) (browse-url ergoemacs-mode-web-page-url)) :help "Online help about ergoemacs.") (separator-3 menu-item "--") (send-bug-report menu-item "Send Emacs Bug Report" report-emacs-bug :help "Report an emacs bug.") (emacs-web-page menu-item "Emacs Web Page" (lambda nil (interactive) (browse-url "http://www.gnu.org/software/emacs/")) :help "Emacs Web Page") (separator-licence menu-item "--") (license menu-item "License" describe-copying) "?"))))) global-map nil] "lvl0-theme" (lambda nil "Generated theme component for lvl0 theme" (ergoemacs-component-struct--create-component (quote (:name "lvl0-theme" :description "Generated theme component for lvl0 theme")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-c <ergoemacs-timeout>") (quote ergoemacs-copy-line-or-region)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<C-insert>") (quote ergoemacs-copy-line-or-region)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-S-v") (quote ergoemacs-paste-cycle)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "<S-insert>") (quote ergoemacs-paste)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "C-v") (quote ergoemacs-paste)))) "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc")) "lvl1-theme" (lambda nil "Generated theme component for lvl1 theme" (ergoemacs-component-struct--create-component (quote (:name "lvl1-theme" :description "Generated theme component for lvl1 theme")) (quote (lambda nil)) "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc")) "lvl2-theme" (lambda nil "Generated theme component for lvl2 theme" (ergoemacs-component-struct--create-component (quote (:name "lvl2-theme" :description "Generated theme component for lvl2 theme")) (quote (lambda nil)) "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc")) "join-line" (lambda nil "Join Line" (ergoemacs-component-struct--create-component (quote (:name "join-line" :description "Join Line")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-]") (quote delete-indentation)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-[") (quote ergoemacs-top-join-line)))) "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc")) "multiple-cursors" (lambda nil "Multiple Cursors" (ergoemacs-component-struct--create-component (quote (:name "multiple-cursors" :description "Multiple Cursors" :package-name multiple-cursors :bind (("M-*" mc/mark-next-like-this) ("M-&" mc/edit-lines)) :ensure t)) (quote (lambda nil)) "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc")) "avy" (lambda nil "Avy" (ergoemacs-component-struct--create-component (quote (:name "avy" :description "Avy" :package-name avy :bind ("M-," (quote avy-goto-word-or-subword-1)) :ensure t)) (quote (lambda nil)) "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc")) "ace-window" (lambda nil "Ace Window" (ergoemacs-component-struct--create-component (quote (:name "ace-window" :description "Ace Window" :package-name ace-window :bind ("M-s" (quote ace-window)) :ensure t)) (quote (lambda nil (progn (ergoemacs-component-struct--set (quote aw-keys) (quote (lambda nil (mapcar (lambda (key) (ergoemacs-translate--event-layout key ergoemacs-keyboard-layout "us")) (list 102 106 100 107 114 117 101 105 115 108 119 111)))))))) "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc")) "expand-region" (lambda nil "Expand Region" (ergoemacs-component-struct--create-component (quote (:name "expand-region" :description "Expand Region" :package-name expand-region :bind (("M-8" er/expand-region) ("M-9" er/contract-region) ("M-*" . er/mark-inside-quotes)) :ensure t)) (quote (lambda nil)) "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc")) "standard-theme" [cl-struct-ergoemacs-component-struct "standard-theme" (:name "standard-theme" :description "Generated theme component for standard theme" :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") nil #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil nil nil nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) standard-theme programmer-dv))))))) global-map nil] "reduction-theme" (lambda nil "Generated theme component for reduction theme" (ergoemacs-component-struct--create-component (quote (:name "reduction-theme" :description "Generated theme component for reduction theme")) (quote (lambda nil (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-<") (quote zap-to-char)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-g") (quote kill-line)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-G") (quote ergoemacs-top-join-line)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-b") (quote ergoemacs-kill-line-backward)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-B") (quote delete-indentation)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-.") (quote ergoemacs-end-of-line-or-what)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-m") (quote ergoemacs-beginning-of-line-or-what)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-y") (quote isearch-backward)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-Y") (quote isearch-backward-regexp)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-h") (quote isearch-forward)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-H") (quote isearch-forward-regexp)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-a") (quote ergoemacs-move-cursor-previous-pane)) (ergoemacs-component-struct--define-key (quote global-map) (kbd "M-;") (quote execute-extended-command)) (ergoemacs-component-struct--define-key (quote ergoemacs-keymap) (kbd "M-T") nil) (ergoemacs-component-struct--define-key (quote ergoemacs-keymap) (kbd "M-I") nil) (ergoemacs-component-struct--define-key (quote ergoemacs-keymap) (kbd "M-K") nil) (ergoemacs-component-struct--define-key (quote ergoemacs-keymap) (kbd "M-U") nil) (ergoemacs-component-struct--define-key (quote ergoemacs-keymap) (kbd "M-O") nil) (ergoemacs-component-struct--define-key (quote ergoemacs-keymap) (kbd "M-N") nil) (ergoemacs-component-struct--define-key (quote ergoemacs-keymap) (kbd "M-A") nil) (ergoemacs-component-struct--define-key (quote ergoemacs-keymap) (kbd "M-J") nil) (ergoemacs-component-struct--define-key (quote ergoemacs-keymap) (kbd "M-L") nil))) "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc")) "quit::5.3.7" [cl-struct-ergoemacs-component-struct "quit" (:name "quit" :description "Escape exits" :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") (keymap (27 keymap (110 . keyboard-quit)) (escape . keyboard-quit) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) quit us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (isearch-mode-map (keymap (escape . isearch-abort)))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (org-read-date-minibuffer-setup-hook #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (minibuffer-local-map (keymap (escape . minibuffer-keyboard-quit)))))) nil nil nil "5.3.7" ("5.3.7") nil nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) quit programmer-dv)))) (escape . keyboard-quit)) (isearch-mode-map programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key (isearch-mode-map quit programmer-dv)))) (escape . isearch-abort)))) global-map nil] "move-buffer::5.7.5" [cl-struct-ergoemacs-component-struct "move-buffer" (:name "move-buffer" :description "Move Beginning/End of buffer" :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") (keymap (27 keymap (78 . ergoemacs-end-or-beginning-of-buffer) (110 . ergoemacs-beginning-or-end-of-buffer)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) move-buffer us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil "5.7.5" ("5.7.5") ([134217788] [134217790]) nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) move-buffer programmer-dv)))) (27 keymap (98 . ergoemacs-beginning-or-end-of-buffer) (66 . ergoemacs-end-or-beginning-of-buffer))))) global-map nil] "search::5.7.5" [cl-struct-ergoemacs-component-struct "search" (:name "search" :description "Search and Replace" :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") (keymap (27 keymap (58 . isearch-backward) (59 . isearch-forward) (37 . query-replace-regexp) (53 . query-replace) (89 . isearch-backward) (121 . isearch-forward)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) search us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (dired-mode-map (keymap (27 keymap (37 . dired-do-query-replace-regexp) (53 . dired-do-query-replace-regexp))) browse-kill-ring-mode-map (keymap (remap keymap (isearch-backward . browse-kill-ring-search-backward) (isearch-forward . browse-kill-ring-search-forward))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil ((global-map [134217765] (vr/query-replace))) "5.7.5" ("5.7.5") ([201326629] [134217765] [18] [19]) nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) search programmer-dv)))) (27 keymap (102 . isearch-forward) (70 . isearch-backward) (40 . query-replace) (49 . query-replace-regexp))))) global-map nil] "switch::5.7.5" [cl-struct-ergoemacs-component-struct "switch" (:name "switch" :description "Window/Frame/Tab Switching" :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") (keymap (27 keymap (48 . delete-window) (36 . split-window-right) (52 . split-window-below) (50 . delete-window) (51 . delete-other-windows) (96 . ergoemacs-switch-to-next-frame) (126 . ergoemacs-switch-to-previous-frame) (83 . ergoemacs-move-cursor-previous-pane) (115 . ergoemacs-move-cursor-next-pane)) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) switch us))))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ()) nil nil nil "5.7.5" ("5.7.5") ([24 50] [24 51] [24 48] [24 49]) nil nil nil (meta) ([apps] [menu] [27]) nil nil nil "us" #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ((nil programmer-dv) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) switch programmer-dv)))) (27 keymap (111 . ergoemacs-move-cursor-next-pane) (79 . ergoemacs-move-cursor-previous-pane) (126 . ergoemacs-switch-to-previous-frame) (36 . ergoemacs-switch-to-next-frame) (123 . delete-other-windows) (91 . delete-window) (125 . split-window-below) (51 . split-window-right))))) global-map nil]))] ergoemacs-component-struct--hash [object pcache-entry "pcache-entry" 1442351083.1228697 7776000 #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data ())] ergoemacs-map--hash [object pcache-entry "pcache-entry" 1442351083.1347113 7776000 #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data (global-menu-bb8708fddf73cdb9e45c9af4f0cfbf09 (keymap (file "File" keymap (new-file menu-item "New" ergoemacs-new-empty-buffer) (make-frame menu-item "New Frame" make-frame-command) (open-file menu-item "Open..." find-file) (open-directory menu-item "Open Containing Folder" (keymap (open-directory-in-dired menu-item "In Dired" dired-jump) (open-directory-in-desktop menu-item "In File Manager" ergoemacs-open-in-desktop) (sep1 menu-item "--") (open-eshell-here menu-item "In Emacs Shell" ergoemacs-eshell-here) (open-shell-here menu-item "In Shell" ergoemacs-shell-here) nil)) (kill-buffer menu-item "Close" ergoemacs-close-current-buffer) (separator1 menu-item "--") (save-buffer menu-item "Save" save-buffer) (write-file menu-item "Save As..." write-file) (revert-buffer menu-item "Revert to Saved" revert-buffer) (print-buffer menu-item "Print" ergoemacs-print-buffer-confirm) (separator4 menu-item "--") (split-window-below menu-item "Split Window" split-window-below) (split-window-right menu-item "Split Window right" split-window-right) (one-window menu-item "Unsplit Window" delete-other-windows) (separator5 menu-item "--") (execute-command menu-item "Execute Command" execute-extended-command) (repeat-earlier-command menu-item "Repeat Earlier Command" repeat-complex-command) (separator6 menu-item "--") (exit-emacs menu-item "Quit" save-buffers-kill-emacs) "File") (edit "Edit" keymap (undo menu-item "Undo" undo :enable (and (not buffer-read-only) (not (eq t buffer-undo-list)) (if (eq last-command (quote undo)) (listp pending-undo-list) (consp buffer-undo-list))) :help "Undo last operation") (redo menu-item "Redo" ergoemacs-redo :enable (and (not buffer-read-only) (not (eq t buffer-undo-list)) (or (not (and (boundp (quote undo-tree-mode)) undo-tree-mode)) (and (and (boundp (quote undo-tree-mode)) undo-tree-mode) (null (undo-tree-node-next (undo-tree-current buffer-undo-tree))))))) (redo-sep menu-item "--") (cut menu-item "Cut" ergoemacs-cut-line-or-region :help "Delete text in Line/region and copy it to the clipboard" :enable (or (eq ergoemacs-handle-ctl-c-or-ctl-x (quote only-copy-cut)) (region-active-p))) (copy menu-item "Copy" ergoemacs-copy-line-or-region :help "Copy text in line/region to the clipboard" :enable (or (eq ergoemacs-handle-ctl-c-or-ctl-x (quote only-copy-cut)) (region-active-p))) (paste menu-item "Paste" ergoemacs-paste :help "Paste text from clipboard") (paste-from-menu menu-item "Paste from Kill Menu" yank-menu :enable (and (cdr yank-menu) (not buffer-read-only)) :help "Choose a string from the kill ring and paste it") (clear menu-item "Clear" delete-region :enable (and mark-active (not buffer-read-only)) :help "Delete the text in region between mark and current position") (mark-whole-buffer menu-item "Select All" mark-whole-buffer :help "Mark the whole buffer for a subsequent cut/copy") (separator-search menu-item "--") (blank-operations menu-item "Blank/Whitespace Operations" (keymap (trim-trailing-space menu-item "Trim Trailing Space" delete-trailing-whitespace :help "Trim Trailing spaces on each line") (separator-tabify menu-item "--") (tabify-region menu-item "Change multiple spaces to tabs (Tabify)" (lambda nil (interactive) (if mark-active (tabify (region-beginning) (region-end)) (tabify (point-min) (point-max)))) :help "Convert multiple spaces in the nonempty region to tabs when possible" :enable (not buffer-read-only)) (untabify menu-item "Change Tabs To Spaces (Untabify)" (lambda nil (interactive) (if mark-active (untabify (region-beginning) (region-end)) (untabify (point-min) (point-max)))) :help "Convert all tabs in the nonempty region or buffer to multiple spaces" :enable (not buffer-read-only)))) (copy-to-clipboard menu-item "Copy File/Path to Clipboard" (keymap (copy-full-path menu-item "Current Full File Path to Clipboard" ergoemacs-copy-full-path :enable (buffer-file-name)) (copy-file-name menu-item "Current File Name to Clipboard" ergoemacs-copy-file-name :enable (buffer-file-name)) (copy-dir-path menu-item "Current Dir. Path to Clipboard" ergoemacs-copy-dir-path :enable (buffer-file-name)))) (convert-case-to menu-item "Convert Case To" (keymap (capitalize-region menu-item "Capitalize" capitalize-region :help "Capitalize (initial caps) words in the nonempty region" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (downcase-region menu-item "downcase" downcase-region :help "Make words in the nonempty region lower-case" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (upcase-region menu-item "UPCASE" upcase-region :help "Make words in the nonempty region upper-case" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (toggle-case-region menu-item "Toggle Capitalization/Case" ergoemacs-toggle-letter-case :enable (not buffer-read-only)) (toggle-camel menu-item "Toggle CamelCase to camel_case" ergoemacs-toggle-camel-case :enable (not buffer-read-only)))) (eol-conversion menu-item "EOL Conversion" (keymap (windows menu-item "Windows/DOS" (lambda nil (interactive) (ergoemacs-eol-conversion (quote dos))) :enable (not (ergoemacs-eol-p (quote dos)))) (unix menu-item "Unix/OSX" (lambda nil (interactive) (ergoemacs-eol-conversion (quote unix))) :enable (not (ergoemacs-eol-p (quote unix)))) (mac menu-item "Old Mac" (lambda nil (interactive) (ergoemacs-eol-conversion (quote mac))) :enable (not (ergoemacs-eol-p (quote mac)))))) (sort menu-item "Sort" (keymap (regexp-fields menu-item "Regexp Fields" sort-regexp-fields :help "Sort the nonempty region lexicographically" :enable (and last-kbd-macro (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (pages menu-item "Pages" sort-pages :help "Sort pages in the nonempty region alphabetically" :enable (and last-kbd-macro (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-paragraphs menu-item "Paragraphs" sort-paragraphs :help "Sort paragraphs in the nonempty region alphabetically" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-numeric-fields menu-item "Numeric Field" sort-numeric-fields :help "Sort lines in the nonempty region numerically by the Nth field" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-fields menu-item "Field" sort-fields :help "Sort lines in the nonempty region lexicographically by the Nth field" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-columns menu-item "Columns" sort-columns :help "Sort lines in the nonempty region alphabetically, by a certain range of columns" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-lines menu-item "Lines" sort-lines :help "Sort lines in the nonempty region alphabetically" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (reverse-region menu-item "Reverse" reverse-region :help "Reverse the order of the selected lines" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))))) (separator-bookmark menu-item "--") (fill menu-item "Fill" fill-region :enable (and mark-active (not buffer-read-only)) :help "Fill text in region to fit between left and right margin") (props menu-item "Text Properties" facemenu-menu) "Edit") (search "Search" keymap (isearch-forward menu-item "String Forward..." isearch-forward :help "Search forward for a string as you type it") (isearch-backward menu-item "    Backward..." isearch-backward :help "Search backwards for a string as you type it") (re-isearch-forward menu-item "Regexp Forward..." isearch-forward-regexp :help "Search forward for a regular expression as you type it") (re-isearch-backward menu-item "    Backward..." isearch-backward-regexp :help "Search backwards for a regular expression as you type it") (separator-repeat-search menu-item "--") (repeat-forward menu-item "Repeat Forward" nonincremental-repeat-search-forward :enable (or (and (memq menu-bar-last-search-type (quote (string word))) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search forward") (repeat-backward menu-item "    Repeat Backward" nonincremental-repeat-search-backward :enable (or (and (memq menu-bar-last-search-type (quote (string word))) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search forward") (separator-isearch menu-item "--") (i-search menu-item "String Search" (keymap (search-forward menu-item "Forward String..." search-forward) (search-backward menu-item "    Backward..." search-backward) (search-forward-regexp menu-item "Forward Regexp..." re-search-forward) (search-backward-regexp menu-item "    Backward..." re-search-backward) "String Search")) (replace menu-item "Replace" (keymap (query-replace menu-item "Replace String..." query-replace :enable (not buffer-read-only) :help "Replace string interactively, ask about each occurrence") (query-replace-regexp menu-item "Replace Regexp..." query-replace-regexp :enable (not buffer-read-only) :help "Replace regular expression interactively, ask about each occurrence") (separator-replace-tags menu-item "--") (tags-repl menu-item "Replace in Tagged Files..." tags-query-replace :help "Interactively replace a regexp in all tagged files") (tags-repl-continue menu-item "Continue Replace" tags-loop-continue :help "Continue last tags replace operation") "Replace")) (grep menu-item "Grep..." grep :enable (executable-find "grep")) (occur menu-item "Occurrences in buffer..." occur :help "Show Lines in a buffer that match a regular expression") (moccur menu-item "Occurrences in all buffers..." multi-occur :help "Show Lines in all buffers that match a regular expression") (separator-go-to menu-item "--") (goto menu-item "Go To" (keymap (go-to-line menu-item "Goto Line..." goto-line :help "Read a line number and go to that line") (separator-tags menu-item "--") (find-tag menu-item "Find Tag..." find-tag :help "Find definition of function or variable") (find-tag-otherw menu-item "Find Tag in Other Window..." find-tag-other-window :help "Find function/variable definition in another window") (next-tag menu-item "Find Next Tag" menu-bar-next-tag :enable (and (boundp (quote tags-location-ring)) (not (ring-empty-p tags-location-ring))) :help "Find next function/variable matching last tag name") (next-tag-otherw menu-item "Next Tag in Other Window" menu-bar-next-tag-other-window :enable (and (boundp (quote tags-location-ring)) (not (ring-empty-p tags-location-ring))) :help "Find next function/variable matching last tag name in another window") (apropos-tags menu-item "Tags Apropos..." tags-apropos :help "Find function/variables whose names match regexp") (separator-tag-file menu-item "--") (set-tags-name menu-item "Set Tags File Name..." visit-tags-table :help "Tell Tags commands which tag table file to use") "Go To")) (bookmark menu-item "Bookmarks" menu-bar-bookmark-map) "Search") (view "View" keymap (menu-font-size menu-item "Zoom" (keymap (zoom-in menu-item "Zoom In" text-scale-increase) (zoom-out menu-item "Zoom Out" text-scale-decrease) (zoom-reset menu-item "Zoom Reset" ergoemacs-text-scale-normal-size))) (menu-set-font menu-item "Set Default Font..." menu-set-font :visible (display-multi-font-p) :help "Select a default font") (\, (when (fboundp (quote customize-themes)) (quote (color-theme menu-item "Customize Color Themes" customize-themes :help "Customize Emacs Themes.")))) (separator-font-size menu-item "--") (highlight-current-line menu-item "Highlight Current Line" global-hl-line-mode :help "Have the cursor line always Highlighted" :button (:toggle and (boundp (quote global-hl-line-mode)) global-hl-line-mode)) (paren-mode menu-item "Highlight Matching Parentheses" show-paren-mode :button (:toggle . show-paren-mode)) (ruler-mode menu-item "Ruler Mode" ruler-mode :button (:toggle . ruler-mode)) (blink-cursor menu-item "Cursor Blink" blink-cursor-mode :button (:toggle . blink-cursor-mode)) (tabbar-mode menu-item "Tabbar" ergoemacs-menu-tabbar-toggle :button (:toggle and (boundp (quote tabbar-mode)) tabbar-mode)) (separator-speedbar menu-item "--") (showhide-speedbar menu-item "Speedbar" speedbar-frame-mode :help "Display a Speedbar quick-navigation frame" :button (:toggle and (boundp (quote speedbar-frame)) (frame-live-p speedbar-frame) (frame-visible-p speedbar-frame))) (linecolumn-separator "--") (line-number-mode menu-item "Line Numbers" line-number-mode :help "Show the current line number in the mode line" :button (:toggle and (default-boundp (quote line-number-mode)) (default-value (quote line-number-mode)))) (global-whitespace-mode menu-item "Show/Hide whitespaces" global-whitespace-mode :button (:toggle . global-whitespace-mode)) (global-linum-mode menu-item "Show/Hide line numbers in margin" global-linum-mode :button (:toggle . global-linum-mode))) (languages "Languages" keymap (A menu-item "A" (keymap (ada-mode menu-item "Ada" ada-mode) (antlr-mode menu-item "Antlr" antlr-mode) (asm-mode menu-item "Asm" asm-mode) (autoconf-mode menu-item "Autoconf" autoconf-mode) (awk-mode menu-item "Awk" awk-mode))) (B menu-item "B" (keymap (bat-mode menu-item "Bat" bat-mode) (bibtex-mode menu-item "Bibtex" bibtex-mode) (bibtex-style-mode menu-item "Bibtex style" bibtex-style-mode) (bovine-grammar-mode menu-item "Bovine grammar" bovine-grammar-mode))) (C menu-item "C" (keymap (c-mode menu-item "C" c-mode) (c++-mode menu-item "C++" c++-mode) (change-log-mode menu-item "Change log" change-log-mode) (compilation-mode menu-item "Compilation" compilation-mode) (conf-unix-mode menu-item "Conf unix" conf-unix-mode) (csharp-mode menu-item "Csharp" csharp-mode) (css-mode menu-item "Css" css-mode))) (D menu-item "D" (keymap (d-mode menu-item "D" d-mode) (dcl-mode menu-item "Dcl" dcl-mode) (delphi-mode menu-item "Delphi" delphi-mode) (dns-mode menu-item "Dns" dns-mode) (doctex-mode menu-item "Doctex" doctex-mode) (dsssl-mode menu-item "Dsssl" dsssl-mode))) (emacs-lisp-mode menu-item "Emacs lisp" emacs-lisp-mode) (F menu-item "F" (keymap (f90-mode menu-item "F90" f90-mode) (fish-mode menu-item "Fish" fish-mode) (fortran-mode menu-item "Fortran" fortran-mode))) (G menu-item "G" (keymap (gdb-script-mode menu-item "Gdb script" gdb-script-mode) (ghc-core-mode menu-item "Ghc core" ghc-core-mode) (ghci-script-mode menu-item "Ghci script" ghci-script-mode) (glsl-mode menu-item "Glsl" glsl-mode) (go-mode menu-item "Go" go-mode) (groovy-mode menu-item "Groovy" groovy-mode))) (H menu-item "H" (keymap (haskell-mode menu-item "Haskell" haskell-mode) (haskell-cabal-mode menu-item "Haskell cabal" haskell-cabal-mode) (html-mode menu-item "Html" html-mode))) (I menu-item "I" (keymap (icon-mode menu-item "Icon" icon-mode) (idl-mode menu-item "Idl" idl-mode) (idlwave-mode menu-item "Idlwave" idlwave-mode))) (J menu-item "J" (keymap (java-mode menu-item "Java" java-mode) (javascript-mode menu-item "Javascript" javascript-mode) (js2-mode menu-item "Js2" js2-mode) (json-mode menu-item "Json" json-mode))) (L menu-item "L" (keymap (latex-mode menu-item "Latex" latex-mode) (ld-script-mode menu-item "Ld script" ld-script-mode) (less-css-mode menu-item "Less css" less-css-mode) (lisp-mode menu-item "Lisp" lisp-mode) (literate-haskell-mode menu-item "Literate haskell" literate-haskell-mode))) (M menu-item "M" (keymap (m4-mode menu-item "M4" m4-mode) (makefile-automake-mode menu-item "Makefile automake" makefile-automake-mode) (makefile-gmake-mode menu-item "Makefile gmake" makefile-gmake-mode) (makefile-imake-mode menu-item "Makefile imake" makefile-imake-mode) (makefile-makepp-mode menu-item "Makefile makepp" makefile-makepp-mode) (markdown-mode menu-item "Markdown" markdown-mode) (matlab-mode menu-item "Matlab" matlab-mode) (metafont-mode menu-item "Metafont" metafont-mode) (metapost-mode menu-item "Metapost" metapost-mode) (mixal-mode menu-item "Mixal" mixal-mode) (m2-mode menu-item "Modula-2" m2-mode))) (nroff-mode menu-item "Nroff" nroff-mode) (O menu-item "O" (keymap (objc-mode menu-item "Objc" objc-mode) (octave-mode menu-item "Octave" octave-mode) (org-mode menu-item "Org" org-mode))) (P menu-item "P" (keymap (pascal-mode menu-item "Pascal" pascal-mode) (perl-mode menu-item "Perl" perl-mode) (pike-mode menu-item "Pike" pike-mode) (prolog-mode menu-item "Prolog" prolog-mode) (ps-mode menu-item "Ps" ps-mode) (python-mode menu-item "Python" python-mode))) (R menu-item "R" (keymap (rst-mode menu-item "Rst" rst-mode) (ruby-mode menu-item "Ruby" ruby-mode) (rust-mode menu-item "Rust" rust-mode))) (S menu-item "S" (keymap (scala-mode menu-item "Scala" scala-mode) (scheme-mode menu-item "Scheme" scheme-mode) (scss-mode menu-item "Scss" scss-mode) (conf-mode menu-item "Settings" conf-mode) (sgml-mode menu-item "Sgml" sgml-mode) (sh-mode menu-item "Sh" sh-mode) (shell-script-mode menu-item "Shell script" shell-script-mode) (sieve-mode menu-item "Sieve" sieve-mode) (simula-mode menu-item "Simula" simula-mode) (snmp-mode menu-item "SKMP MIBs" snmp-mode) (snmpv2-mode menu-item "SNMPv2 MIBs" snmpv2-mode) (sql-mode menu-item "Sql" sql-mode) (srecode-template-mode menu-item "Srecode template" srecode-template-mode))) (T menu-item "T" (keymap (tcl-mode menu-item "Tcl" tcl-mode) (tex-mode menu-item "Tex" tex-mode) (texinfo-mode menu-item "Texinfo" texinfo-mode) (text-mode menu-item "Text" text-mode) (toml-mode menu-item "Toml" toml-mode) (typescript-mode menu-item "Typescript" typescript-mode))) (V menu-item "V" (keymap (vera-mode menu-item "Vera" vera-mode) (verilog-mode menu-item "Verilog" verilog-mode) (vhdl-mode menu-item "Vhdl" vhdl-mode))) (W menu-item "W" (keymap (web-mode menu-item "Web" web-mode) (wisent-grammar-mode menu-item "Wisent grammar" wisent-grammar-mode))) (xml-mode menu-item "Xml" xml-mode) (separator1 menu-item "--") (package menu-item "Manage Packages" list-packages)) (options "Options" keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693946))) (transient-mark-mode menu-item "Highlight Active Region" transient-mark-mode :enable (not cua-mode) :help "Make text in active region stand out in color (Transient Mark mode)" :button (:toggle and (default-boundp (quote transient-mark-mode)) (default-value (quote transient-mark-mode)))) (highlight-paren-mode menu-item "Highlight Matching Parentheses" show-paren-mode :help "Highlight matching/mismatched parentheses at cursor (Show Paren mode)" :button (:toggle and (default-boundp (quote show-paren-mode)) (default-value (quote show-paren-mode)))) (highlight-separator "--") (line-wrapping menu-item "Line Wrapping in This Buffer" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693855))) (window-wrap menu-item "Wrap at Window Edge" #[nil "\203 \300\303!\210\304
\205 \305\306!\207" [visual-line-mode word-wrap truncate-lines 0 nil toggle-truncate-lines -1] 2 nil nil] :help "Wrap long lines at window edge" :button (:radio and (null truncate-lines) (not (truncated-partial-width-window-p)) (not word-wrap)) :visible (menu-bar-menu-frame-live-and-visible-p) :enable (not (truncated-partial-width-window-p))) (truncate menu-item "Truncate Long Lines" #[nil "\203 \300\302!\210\303\304\305!\207" [visual-line-mode word-wrap 0 nil toggle-truncate-lines 1] 2 nil nil] :help "Truncate long lines at window edge" :button (:radio or truncate-lines (truncated-partial-width-window-p)) :visible (menu-bar-menu-frame-live-and-visible-p) :enable (not (truncated-partial-width-window-p))) (word-wrap menu-item "Word Wrap (Visual Line mode)" #[nil "\204 \300\301!\210\302\303!\207" [visual-line-mode 1 message "Visual-Line mode enabled"] 2 nil nil] :help "Wrap long lines at word boundaries" :button (:radio and (null truncate-lines) (not (truncated-partial-width-window-p)) word-wrap) :visible (menu-bar-menu-frame-live-and-visible-p)) "Line Wrapping")) (case-fold-search menu-item "Ignore Case for Search" toggle-case-fold-search :help "Ignore letter-case in search commands" :button (:toggle and (default-boundp (quote case-fold-search)) (default-value (quote case-fold-search)))) (cua-emulation-mode menu-item "Shift movement mark region (CUA)" cua-mode :visible (and (boundp (quote cua-enable-cua-keys)) (not cua-enable-cua-keys)) :help "Use shifted movement keys to set and extend the region" :button (:toggle and (default-boundp (quote cua-mode)) (default-value (quote cua-mode)))) (cua-mode menu-item "Use CUA Keys (Cut/Paste with C-x/C-c/C-v)" cua-mode :visible (or (not (boundp (quote cua-enable-cua-keys))) cua-enable-cua-keys) :help "Use C-z/C-x/C-c/C-v keys for undo/cut/copy/paste" :button (:toggle and (default-boundp (quote cua-mode)) (default-value (quote cua-mode)))) (edit-options-separator "--") (uniquify menu-item "Use Directory Names in Buffer Names" toggle-uniquify-buffer-names :help "Uniquify buffer names by adding parent directory names" :button (:toggle and (default-boundp (quote uniquify-buffer-name-style)) (default-value (quote uniquify-buffer-name-style)))) (save-place menu-item "Save Place in Files between Sessions" toggle-save-place-globally :help "Visit files of previous session when restarting Emacs" :button (:toggle and (default-boundp (quote save-place)) (default-value (quote save-place)))) (cursor-separator "--") (blink-cursor-mode menu-item "Blink Cursor" blink-cursor-mode :help "Whether the cursor blinks (Blink Cursor mode)" :button (:toggle and (default-boundp (quote blink-cursor-mode)) (default-value (quote blink-cursor-mode)))) (debugger-separator "--") (debug-on-error menu-item "Enter Debugger on Error" toggle-debug-on-error :help "Enter Lisp debugger when an error is signaled" :button (:toggle and (default-boundp (quote debug-on-error)) (default-value (quote debug-on-error)))) (debug-on-quit menu-item "Enter Debugger on Quit/C-g" toggle-debug-on-quit :help "Enter Lisp debugger when C-g is pressed" :button (:toggle and (default-boundp (quote debug-on-quit)) (default-value (quote debug-on-quit)))) (mule-separator "--") (mule menu-item "Multilingual Environment" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693861))) (set-language-environment menu-item "Set Language Environment" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693852))) (Default menu-item "Default" setup-specified-language-environment) "Set Language Environment" (Chinese "Chinese" . setup-chinese-environment-map) (Cyrillic "Cyrillic" . setup-cyrillic-environment-map) (Indian "Indian" . setup-indian-environment-map) (Sinhala "Sinhala" . setup-specified-language-environment) (English "English" . setup-specified-language-environment) (ASCII "ASCII" . setup-specified-language-environment) (Ethiopic "Ethiopic" . setup-specified-language-environment) (European "European" . setup-european-environment-map) (Turkish "Turkish" . setup-specified-language-environment) (Greek "Greek" . setup-specified-language-environment) (Hebrew "Hebrew" . setup-specified-language-environment) (Windows-1255 "Windows-1255" . setup-specified-language-environment) (Japanese "Japanese" . setup-specified-language-environment) (Korean "Korean" . setup-specified-language-environment) (Lao "Lao" . setup-specified-language-environment) (TaiViet "TaiViet" . setup-specified-language-environment) (Thai "Thai" . setup-specified-language-environment) (Tibetan "Tibetan" . setup-specified-language-environment) (Vietnamese "Vietnamese" . setup-specified-language-environment) (IPA "IPA" . setup-specified-language-environment) (Arabic "Arabic" . setup-specified-language-environment) (Persian "Persian" . setup-specified-language-environment) (UTF-8 "UTF-8" . setup-specified-language-environment) (Khmer "Khmer" . setup-specified-language-environment) (Burmese "Burmese" . setup-specified-language-environment) (Cham "Cham" . setup-specified-language-environment))) (separator-mule "--") (toggle-input-method menu-item "Toggle Input Method" toggle-input-method) (set-input-method menu-item "Select Input Method..." set-input-method) (separator-input-method "--") (set-various-coding-system menu-item "Set Coding Systems" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693903))) (universal-coding-system-argument menu-item "For Next Command" universal-coding-system-argument :help "Coding system to be used by next command") (separator-1 "--") (set-buffer-file-coding-system menu-item "For Saving This Buffer" set-buffer-file-coding-system :help "How to encode this buffer when saved") (revert-buffer-with-coding-system menu-item "For Reverting This File Now" revert-buffer-with-coding-system :enable buffer-file-name :help "Revisit this file immediately using specified coding system") (set-file-name-coding-system menu-item "For File Name" set-file-name-coding-system :help "How to decode/encode file names") (separator-2 "--") (set-keyboard-coding-system menu-item "For Keyboard" set-keyboard-coding-system :help "How to decode keyboard input") (set-terminal-coding-system menu-item "For Terminal" set-terminal-coding-system :enable (null (memq initial-window-system (quote (x w32 ns)))) :help "How to encode terminal output") (separator-3 "--") (set-selection-coding-system menu-item "For X Selections/Clipboard" set-selection-coding-system :visible (display-selections-p) :help "How to en/decode data to/from selection/clipboard") (set-next-selection-coding-system menu-item "For Next X Selection" set-next-selection-coding-system :visible (display-selections-p) :help "How to en/decode next selection/clipboard operation") (set-buffer-process-coding-system menu-item "For I/O with Subprocess" set-buffer-process-coding-system :visible (fboundp (quote start-process)) :enable (get-buffer-process (current-buffer)) :help "How to en/decode I/O from/to subprocess connected to this buffer") "Set Coding System") :enable (default-value (quote enable-multibyte-characters))) (view-hello-file menu-item "Show Multilingual Sample Text" view-hello-file :enable (file-readable-p (expand-file-name "HELLO" data-directory)) :help "Demonstrate various character sets") (separator-coding-system "--") (describe-language-environment menu-item "Describe Language Environment" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693894))) (Default menu-item "Default" describe-specified-language-support) "Describe Language Environment" (Chinese "Chinese" . describe-chinese-environment-map) (Cyrillic "Cyrillic" . describe-cyrillic-environment-map) (Indian "Indian" . describe-indian-environment-map) (Sinhala "Sinhala" . describe-specified-language-support) (English "English" . describe-specified-language-support) (ASCII "ASCII" . describe-specified-language-support) (Ethiopic "Ethiopic" . describe-specified-language-support) (European "European" . describe-european-environment-map) (Turkish "Turkish" . describe-specified-language-support) (Greek "Greek" . describe-specified-language-support) (Hebrew "Hebrew" . describe-specified-language-support) (Windows-1255 "Windows-1255" . describe-specified-language-support) (Japanese "Japanese" . describe-specified-language-support) (Korean "Korean" . describe-specified-language-support) (Lao "Lao" . describe-specified-language-support) (TaiViet "TaiViet" . describe-specified-language-support) (Thai "Thai" . describe-specified-language-support) (Tibetan "Tibetan" . describe-specified-language-support) (Vietnamese "Vietnamese" . describe-specified-language-support) (IPA "IPA" . describe-specified-language-support) (Arabic "Arabic" . describe-specified-language-support) (Persian "Persian" . describe-specified-language-support) (UTF-8 "UTF-8" . describe-specified-language-support) (Khmer "Khmer" . describe-specified-language-support) (Burmese "Burmese" . describe-specified-language-support)) :help "Show multilingual settings for a specific language") (describe-input-method menu-item "Describe Input Method" describe-input-method) (describe-coding-system menu-item "Describe Coding System..." describe-coding-system) (list-character-sets menu-item "List Character Sets" list-character-sets :help "Show table of available character sets") (mule-diag menu-item "Show All Multilingual Settings" mule-diag :help "Display multilingual environment settings") "Mule (Multilingual Environment)")) (showhide-separator "--") (showhide menu-item "Show/Hide" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693862))) (showhide-tool-bar menu-item "Tool-bar" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693858))) (showhide-tool-bar-none menu-item "None" menu-bar-showhide-tool-bar-menu-customize-disable :help "Turn tool-bar off" :visible (display-graphic-p) :button (:radio eq tool-bar-mode nil)) (showhide-tool-bar-top menu-item "On the Top" menu-bar-showhide-tool-bar-menu-customize-enable-top :help "Tool-bar at the top" :visible (display-graphic-p) :button (:radio and tool-bar-mode (eq (frame-parameter (menu-bar-frame-for-menubar) (quote tool-bar-position)) (quote top)))) (showhide-tool-bar-bottom menu-item "On the Bottom" menu-bar-showhide-tool-bar-menu-customize-enable-bottom :help "Tool-bar at the bottom" :visible (display-graphic-p) :button (:radio and tool-bar-mode (eq (frame-parameter (menu-bar-frame-for-menubar) (quote tool-bar-position)) (quote bottom)))) (showhide-tool-bar-right menu-item "On the Right" menu-bar-showhide-tool-bar-menu-customize-enable-right :help "Tool-bar at the right side" :visible (display-graphic-p) :button (:radio and tool-bar-mode (eq (frame-parameter (menu-bar-frame-for-menubar) (quote tool-bar-position)) (quote right)))) (showhide-tool-bar-left menu-item "On the Left" menu-bar-showhide-tool-bar-menu-customize-enable-left :help "Tool-bar at the left side" :visible (display-graphic-p) :button (:radio and tool-bar-mode (eq (frame-parameter (menu-bar-frame-for-menubar) (quote tool-bar-position)) (quote left)))) "Tool-bar") :visible (display-graphic-p)) (menu-bar-mode menu-item "Menu-bar" toggle-menu-bar-mode-from-frame :help "Turn menu-bar on/off" :button (:toggle menu-bar-positive-p (frame-parameter (menu-bar-frame-for-menubar) (quote menu-bar-lines)))) (showhide-tooltip-mode menu-item "Tooltips" tooltip-mode :help "Turn tooltips on/off" :visible (and (display-graphic-p) (fboundp (quote x-show-tip))) :button (:toggle . tooltip-mode)) (showhide-scroll-bar menu-item "Scroll-bar" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693907))) (none menu-item "None" menu-bar-no-scroll-bar :help "Turn off scroll-bar" :visible (display-graphic-p) :button (:radio eq (cdr (assq (quote vertical-scroll-bars) (frame-parameters))) nil)) (left menu-item "On the Left" menu-bar-left-scroll-bar :help "Scroll-bar on the left side" :visible (display-graphic-p) :button (:radio eq (cdr (assq (quote vertical-scroll-bars) (frame-parameters))) (quote left))) (right menu-item "On the Right" menu-bar-right-scroll-bar :help "Scroll-bar on the right side" :visible (display-graphic-p) :button (:radio eq (cdr (assq (quote vertical-scroll-bars) (frame-parameters))) (quote right))) "Scroll-bar") :visible (display-graphic-p)) (showhide-fringe menu-item "Fringe" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693914))) (none menu-item "None" menu-bar-showhide-fringe-menu-customize-disable :help "Turn off fringe" :visible (display-graphic-p) :button (:radio eq fringe-mode 0)) (left menu-item "On the Left" menu-bar-showhide-fringe-menu-customize-left :help "Fringe only on the left side" :visible (display-graphic-p) :button (:radio equal fringe-mode (quote (nil . 0)))) (right menu-item "On the Right" menu-bar-showhide-fringe-menu-customize-right :help "Fringe only on the right side" :visible (display-graphic-p) :button (:radio equal fringe-mode (quote (0)))) (default menu-item "Default" menu-bar-showhide-fringe-menu-customize-reset :help "Default width fringe on both left and right side" :visible (display-graphic-p) :button (:radio eq fringe-mode nil)) (customize menu-item "Customize Fringe" menu-bar-showhide-fringe-menu-customize :help "Detailed customization of fringe" :visible (display-graphic-p)) (indicate-empty-lines menu-item "Empty Line Indicators" toggle-indicate-empty-lines :help "Indicate trailing empty lines in fringe, globally" :button (:toggle and (default-boundp (quote indicate-empty-lines)) (default-value (quote indicate-empty-lines)))) (showhide-fringe-ind menu-item "Buffer Boundaries" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693848))) (none menu-item "No Indicators" menu-bar-showhide-fringe-ind-none :help "Hide all buffer boundary indicators and arrows" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries nil)) (left menu-item "In Left Fringe" menu-bar-showhide-fringe-ind-left :help "Show buffer boundaries and arrows in left fringe" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries (quote left))) (right menu-item "In Right Fringe" menu-bar-showhide-fringe-ind-right :help "Show buffer boundaries and arrows in right fringe" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries (quote right))) (box menu-item "Opposite, No Arrows" menu-bar-showhide-fringe-ind-box :help "Show top/bottom indicators in opposite fringes, no arrows" :visible (display-graphic-p) :button (:radio equal indicate-buffer-boundaries (quote ((top . left) (bottom . right))))) (mixed menu-item "Opposite, Arrows Right" menu-bar-showhide-fringe-ind-mixed :help "Show top/bottom indicators in opposite fringes, arrows in right" :visible (display-graphic-p) :button (:radio equal indicate-buffer-boundaries (quote ((t . right) (top . left))))) (customize menu-item "Other (Customize)" menu-bar-showhide-fringe-ind-customize :help "Additional choices available through Custom buffer" :visible (display-graphic-p) :button (:radio not (member indicate-buffer-boundaries (quote (nil left right ((top . left) (bottom . right)) ((t . right) (top . left))))))) "Buffer boundaries") :visible (display-graphic-p) :help "Indicate buffer boundaries in fringe") "Fringe") :visible (display-graphic-p)) (showhide-speedbar menu-item "Speedbar" speedbar-frame-mode :help "Display a Speedbar quick-navigation frame" :button (:toggle and (boundp (quote speedbar-frame)) (frame-live-p (symbol-value (quote speedbar-frame))) (frame-visible-p (symbol-value (quote speedbar-frame))))) (datetime-separator "--") (showhide-date-time menu-item "Time, Load and Mail" display-time-mode :help "Display time, system load averages and mail status in mode line" :button (:toggle and (default-boundp (quote display-time-mode)) (default-value (quote display-time-mode)))) (showhide-battery menu-item "Battery Status" display-battery-mode :help "Display battery status information in mode line" :button (:toggle and (default-boundp (quote display-battery-mode)) (default-value (quote display-battery-mode)))) (linecolumn-separator "--") (size-indication-mode menu-item "Size Indication" size-indication-mode :help "Show the size of the buffer in the mode line" :button (:toggle and (default-boundp (quote size-indication-mode)) (default-value (quote size-indication-mode)))) (line-number-mode menu-item "Line Numbers" line-number-mode :help "Show the current line number in the mode line" :button (:toggle and (default-boundp (quote line-number-mode)) (default-value (quote line-number-mode)))) (column-number-mode menu-item "Column Numbers" column-number-mode :help "Show the current column number in the mode line" :button (:toggle and (default-boundp (quote column-number-mode)) (default-value (quote column-number-mode)))) "Show/Hide")) (menu-system-font menu-item "Use System Font" toggle-use-system-font :help "Use the monospaced font defined by the system" :button (:toggle and (default-boundp (quote font-use-system-font)) (default-value (quote font-use-system-font)))) (menu-set-font menu-item "Set Default Font..." menu-set-font :visible (display-multi-font-p) :help "Select a default font") (custom-separator "--") (save menu-item "Save Options" menu-bar-options-save :help "Save options set from the menu above") (package menu-item "Manage Emacs Packages" package-list-packages :help "Install or uninstall additional Emacs packages") (customize menu-item "Customize Emacs" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693917))) (customize-themes menu-item "Custom Themes" customize-themes :help "Choose a pre-defined customization theme") (customize menu-item "Top-level Customization Group" customize :help "The master group called `Emacs'") (customize-browse menu-item "Browse Customization Groups" customize-browse :help "Browse all customization groups") (separator-3 "--") (customize-saved menu-item "Saved Options" customize-saved :help "Customize previously saved options") (customize-changed-options menu-item "New Options..." customize-changed-options :help "Options added or changed in recent Emacs versions") (separator-2 "--") (customize-option menu-item "Specific Option..." customize-option :help "Customize value of specific option") (customize-face menu-item "Specific Face..." customize-face :help "Customize attributes of specific face") (customize-group menu-item "Specific Group..." customize-group :help "Customize settings of specific group") (separator-1 "--") (customize-apropos menu-item "All Settings Matching..." customize-apropos :help "Browse customizable settings matching a regexp or word list") (customize-apropos-options menu-item "Options Matching..." customize-apropos-options :help "Browse options matching a regexp or word list") (customize-apropos-faces menu-item "Faces Matching..." customize-apropos-faces :help "Browse faces matching a regexp or word list") "Customize")) "Options") (mouse-1 . tmm-menubar-mouse) (tools "Tools" keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693912))) (grep menu-item "Search Files (Grep)..." grep :help "Search files for strings or regexps (with Grep)") (compile menu-item "Compile..." compile :help "Invoke compiler or Make, view compilation errors") (shell menu-item "Shell Command..." shell-command :help "Invoke a shell command and catch its output") (shell-on-region menu-item "Shell Command on Region..." shell-command-on-region :enable mark-active :help "Pass marked region to a shell command") (gdb menu-item "Debugger (GDB)..." gdb :help "Debug a program from within Emacs with GDB") (ede menu-item "Project Support (EDE)" global-ede-mode :help "Toggle the Emacs Development Environment (Global EDE mode)" :button (:toggle bound-and-true-p global-ede-mode)) (semantic menu-item "Source Code Parsers (Semantic)" semantic-mode :help "Toggle automatic parsing in source code buffers (Semantic mode)" :button (:toggle bound-and-true-p semantic-mode)) (separator-prog "--") (Syntax\ Checking menu-item "Syntax Checking" (keymap "Syntax Checking" (Enable\ on-the-fly\ syntax\ checking menu-item "Enable on-the-fly syntax checking" flycheck-mode :enable (or flycheck-mode (flycheck-get-checker-for-buffer)) :button (:toggle . flycheck-mode)) (Check\ current\ buffer menu-item "Check current buffer" flycheck-buffer :enable flycheck-mode) (Clear\ errors\ in\ buffer menu-item "Clear errors in buffer" flycheck-clear) (nil menu-item "---") (Go\ to\ next\ error menu-item "Go to next error" flycheck-next-error :enable flycheck-mode) (Go\ to\ previous\ error menu-item "Go to previous error" flycheck-previous-error :enable flycheck-mode) (Show\ all\ errors menu-item "Show all errors" flycheck-list-errors :enable flycheck-mode) (nil-7 menu-item "---") (Copy\ messages\ at\ point menu-item "Copy messages at point" flycheck-copy-errors-as-kill :enable (flycheck-overlays-at (point))) (nil-9 menu-item "---") (Select\ syntax\ checker menu-item "Select syntax checker" flycheck-select-checker :enable flycheck-mode) (Disable\ syntax\ checker menu-item "Disable syntax checker" flycheck-disable-checker :enable flycheck-mode) (Set\ executable\ of\ syntax\ checker menu-item "Set executable of syntax checker" flycheck-set-checker-executable :enable flycheck-mode) (nil-13 menu-item "---") (Describe\ syntax\ checker menu-item "Describe syntax checker" flycheck-describe-checker) (Show\ Flycheck\ version menu-item "Show Flycheck version" flycheck-version) (Read\ the\ Flycheck\ manual menu-item "Read the Flycheck manual" flycheck-info))) (spell menu-item "Spell Checking" ispell-menu-map) (separator-spell "--") (compare menu-item "Compare (Ediff)" menu-bar-ediff-menu) (ediff-merge menu-item "Merge" menu-bar-ediff-merge-menu) (epatch menu-item "Apply Patch" menu-bar-epatch-menu) (separator-compare "--") (vc menu-item "Version Control" vc-menu-map :filter vc-menu-map-filter) (separator-vc "--") (gnus menu-item "Read Net News" gnus :help "Read network news groups") (rmail menu-item "Read Mail" menu-bar-read-mail :visible (and read-mail-command (not (eq read-mail-command (quote ignore)))) :help "Read your mail") (compose-mail menu-item "Compose New Mail" compose-mail :visible (and mail-user-agent (not (eq mail-user-agent (quote ignore)))) :help "Start writing a new mail message") (directory-search menu-item "Directory Search" eudc-tools-menu) (browse-web menu-item "Browse the Web..." browse-web) (separator-net "--") (calendar menu-item "Calendar" calendar :help "Invoke the Emacs built-in calendar") (calc menu-item "Programmable Calculator" calc :help "Invoke the Emacs built-in full scientific calculator") (simple-calculator menu-item "Simple Calculator" calculator :help "Invoke the Emacs built-in quick calculator") (separator-encryption-decryption "--") (encryption-decryption menu-item "Encryption/Decryption" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693888))) (decrypt-file menu-item "Decrypt File..." epa-decrypt-file :help "Decrypt a file") (encrypt-file menu-item "Encrypt File..." epa-encrypt-file :help "Encrypt a file") (verify-file menu-item "Verify File..." epa-verify-file :help "Verify digital signature of a file") (sign-file menu-item "Sign File..." epa-sign-file :help "Create digital signature of a file") (separator-file "--") (decrypt-region menu-item "Decrypt Region" epa-decrypt-region :help "Decrypt the current region") (encrypt-region menu-item "Encrypt Region" epa-encrypt-region :help "Encrypt the current region") (verify-region menu-item "Verify Region" epa-verify-region :help "Verify digital signature of the current region") (sign-region menu-item "Sign Region" epa-sign-region :help "Create digital signature of the current region") (separator-keys "--") (list-keys menu-item "List Keys" epa-list-keys :help "Browse your public keyring") (import-keys menu-item "Import Keys from File..." epa-import-keys :help "Import public keys from a file") (import-keys-region menu-item "Import Keys from Region" epa-import-keys-region :help "Import public keys from the current region") (export-keys menu-item "Export Keys" epa-export-keys :help "Export public keys to a file") (insert-keys menu-item "Insert Keys" epa-insert-keys :help "Insert public keys after the current point") "Encryption/Decryption")) (separator-games "--") (games) "Tools") (buffer "Buffers" keymap "Buffers" (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693876))) [("*scratch*  " (nil) lambda nil (interactive) (funcall menu-bar-select-buffer-function "*scratch*")) ("*Messages*  *" (nil) lambda nil (interactive) (funcall menu-bar-select-buffer-function "*Messages*"))] (command-separator "--") (next-buffer menu-item "Next Buffer" next-buffer :help "Switch to the \"next\" buffer in a cyclic order") (previous-buffer menu-item "Previous Buffer" previous-buffer :help "Switch to the \"previous\" buffer in a cyclic order") (select-named-buffer menu-item "Select Named Buffer..." switch-to-buffer :help "Prompt for a buffer name, and select that buffer in the current window") (list-all-buffers menu-item "List All Buffers" list-buffers :help "Pop up a window listing all Emacs buffers")) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693790))) (help-menu "?" keymap (whoops menu-item "Whoops!?" (keymap (what-did-i-do menu-item "What did I do !?" view-lossage :help "Display last 100 input keystrokes") (exit-recurive-edit menu-item "Exit Recursive Editing" top-level :help "Exit all Recursive editing Levels") (keyboard-quit menu-item "Cancel Current Action" keyboard-quit :help "Quit any operation in progress"))) (help-for-help menu-item "Help for Help..." help-for-help :help "Emacs main help command") (separator-1 menu-item "--") (apropos menu-item "Apropos (Find matching)" (keymap (commands menu-item "Commands..." apropos-command :help "Find commands matching a regular expression") (user-options menu-item "User Options..." ergoemacs-apropos-user-options :help "Find user options matching a regular expression") (all-vars menu-item "All Variables..." apropos-variable :help "Find a variable that matches a regular expression") (var-values menu-item "Variable Values..." apropos-value :help "Find variable values that matches a regular expression.") (symbols menu-item "Symbols..." apropos :help "Find functions/variables that match a regular expression.") (symbol-desc menu-item "Symbol Descriptions (Doc)..." apropos-documentation :help "Find functions/variables whose documentation match a regular expression") (tags menu-item "Tags..." tags-apropos :help "Find Tags Matching Regular Expression"))) (describe menu-item "Describe" (keymap (function menu-item "Function..." describe-function :help "Describe command or other function") (variable menu-item "Variable..." describe-variable :help "Describe an emacs user option or other variable.") (face menu-item "Face..." describe-face :help "Describe a face") (key menu-item "Key..." describe-key :help "Describe a command bound to a key") (input menu-item "Input Method..." describe-input-method) (coding menu-item "Coding System..." describe-coding-system) (separator-ergoemacs-describe "--") (theme-component menu-item "Ergoemacs Component" describe-ergoemacs-component) (theme menu-item "Ergoemacs Theme" describe-ergoemacs-theme) (layout menu-item "Ergoemacs Layout" describe-ergoemacs-layout) (separator-curr-modes menu-item "--") (curr-major-mode menu-item "Current Major Mode" ergoemacs-describe-major-mode :help "Describe this buffers major and minor modes.") (curr-modes menu-item "Current Modes" (lambda nil (interactive) (call-interactively (quote describe-mode))) :help "Describe this buffers major and minor modes.") (curr-keys menu-item "Current Key Bindings" describe-bindings :help "List all key-bindings with brief descriptions.") (curr-syntax menu-item "Current Syntax Table" describe-syntax :help "Describe the syntax specifications in the current syntax table"))) (learn-more menu-item "Learn More" (keymap (emacs menu-item "Emacs" (keymap (manual menu-item "Manual" info-emacs-manual) (command-desc menu-item "    Command Description..." Info-goto-emacs-command-node :help "Show emacs manual section about a command") (index menu-item "    Index..." emacs-index-search :help "Lookup topic in Emacs manual") (glossary menu-item "    Glossary" search-emacs-glossary) (separator-emacs menu-item "--") (faq menu-item "FAQ" view-emacs-FAQ :help "Read frequently asked questions about Emacs (with answers)") (whats-new menu-item "What's new" view-emacs-news :help "New features of emacs") (known-problems menu-item "Known problems" view-emacs-problems :help "Known problems of this Emacs version."))) (emacs-lisp menu-item "Emacs Lisp" (keymap (xah-lisp menu-item "Xah Emacs Lisp Tutorial" (lambda nil (interactive) (browse-url ergoemacs-xah-emacs-lisp-tutorial-url)) :help "Read Emacs Lisp Tutorial") (intro menu-item "Intro to Elisp" (lambda nil (interactive) (info "eintr")) :help "Read introduction to Emacs Lisp") (manual menu-item "Manual" (lambda nil (interactive) (info "elisp")) :help "Read Emacs Lisp reference Manual") (index menu-item "    Index..." elisp-index-search :help "Lookup topic in emacs lisp manual") (elisp-separator menu-item "--") (locate-library menu-item "Locate Library" locate-library :help "Locate lisp library"))) (last-accessed-info menu-item "Last Accessed Manual (Info)" info :help "Open Info, at the last doc place visited.") (info-dir menu-item "All Manuals (`Info')" Info-directory :help "Open a list of all the info docs.") (man-dir menu-item "Unix Man Pages..." woman :help "Unix Manual entries (with WoMan)"))) (separator-2 menu-item "--") (eroemacs-current-keybindings menu-item "Current Ergoemacs Keybindings" ergoemacs-describe-current-theme) (ergoemacs-mode-web-page menu-item "Ergoemacs-mode web-page" (lambda nil (interactive) (browse-url ergoemacs-mode-web-page-url)) :help "Online help about ergoemacs.") (separator-3 menu-item "--") (send-bug-report menu-item "Send Emacs Bug Report" report-emacs-bug :help "Report an emacs bug.") (emacs-web-page menu-item "Emacs Web Page" (lambda nil (interactive) (browse-url "http://www.gnu.org/software/emacs/")) :help "Emacs Web Page") (separator-licence menu-item "--") (license menu-item "License" describe-copying) "?")) global-composed-list-bb8708fddf73cdb9e45c9af4f0cfbf09 ((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) quit programmer-dv)))) (escape . keyboard-quit)) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) standard-fixed programmer-dv)))) (14 . ergoemacs-new-empty-buffer) (15 . find-file) (33554447 . ergoemacs-open-in-external-app) (33554452 . ergoemacs-open-last-closed) (23 . ergoemacs-close-current-buffer) (6 . isearch-forward) (19 . save-buffer) (33554451 . write-file) (16 . ergoemacs-print-buffer-confirm) (1 . mark-whole-buffer) (26 . undo) (33554458 . undo-tree-redo) (S-delete . ergoemacs-cut-line-or-region) (3 keymap (ergoemacs-timeout . ergoemacs-copy-line-or-region)) (C-insert . ergoemacs-copy-line-or-region) (33554454 . ergoemacs-paste-cycle) (S-insert . ergoemacs-paste) (22 . ergoemacs-paste) (33554446 . make-frame-command) (delete . delete-char) (M-delete . kill-word) (C-delete . kill-word) (home . move-beginning-of-line) (end . move-end-of-line) (C-home . beginning-of-buffer) (C-end . end-of-buffer) (C-left . backward-word) (C-right . forward-word) (M-up . ergoemacs-backward-block) (M-down . ergoemacs-forward-block) (f5 . revert-buffer) (18 . revert-buffer) (M-f4 . ergoemacs-delete-frame) (S-down-mouse-1 . mouse-save-then-kill) (S-mouse-1 . ignore) (67108907 . text-scale-increase) (67108909 . text-scale-decrease) (67108910 . keyboard-quit) (67108911 . info) (67108912 . ergoemacs-text-scale-normal-size) (C-next . ergoemacs-next-user-buffer) (C-pause . kill-compilation) (C-prior . ergoemacs-previous-user-buffer) (67108925 . text-scale-increase) (67108927 . info) (C-S-next . ergoemacs-next-emacs-buffer) (C-S-prior . ergoemacs-previous-emacs-buffer) (33554438 . occur) (33554455 . delete-frame) (67108960 . other-frame) (12 . goto-line) (24 keymap (ergoemacs-timeout . ergoemacs-cut-line-or-region) (2 . ibuffer)) (25 . undo-tree-redo) (M-S-next . forward-page) (27 keymap (delete . kill-word) (up . ergoemacs-backward-block) (down . ergoemacs-forward-block) (f4 . ergoemacs-delete-frame) (S-next . forward-page) (S-prior . backward-page)) (M-S-prior . backward-page)) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) fn-keys programmer-dv)))) (C-f2 . ergoemacs-cut-all) (C-f3 . ergoemacs-copy-all) (C-f4 . ergoemacs-paste-cycle) (C-f5 . undo-tree-redo) (C-f8 . highlight-symbol-prev) (C-f9 . highlight-symbol-next) (M-f2 . ergoemacs-cut-all) (M-f3 . ergoemacs-copy-all) (27 keymap (f2 . ergoemacs-cut-all) (f3 . ergoemacs-copy-all) (f5 . undo-tree-redo)) (M-f5 . undo-tree-redo) (S-f3 . ergoemacs-toggle-letter-case) (f11 . previous-line) (f12 . next-line) (f3 . ergoemacs-copy-line-or-region) (f6 . ergoemacs-unchorded-alt-modal) (f8 keymap (111 . occur) (104 keymap (114 . highlight-regexp) (112 . highlight-phrase) (108 . highlight-lines-matching-regexp) (46 . highlight-symbol-at-point) (117 . unhighlight-regexp) (102 . hi-lock-find-patterns) (119 . hi-lock-write-interactive-patterns) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693797)))) (119 . isearch-forward-word) (95 . isearch-forward-symbol) (46 . isearch-forward-symbol-at-point) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693842))) (f8 . highlight-symbol-at-point) (f9 . highlight-symbol-query-replace)) (f2 . ergoemacs-cut-line-or-region) (f4 . ergoemacs-paste)) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) apps programmer-dv)))) (menu keymap (45 . ergoemacs-org-edit-src) (91 . delete-window) (123 . delete-other-windows) (125 . split-window-vertically) (40 . query-replace) (f2 . ergoemacs-cut-all) (f3 . ergoemacs-copy-all) (return . execute-extended-command) (13 . execute-extended-command) (3 . indent-region) (32 . set-mark-command) (97 . mark-whole-buffer) (101 lambda (&optional arg) (interactive "P") (ergoemacs-command-loop "C-x" (quote :ctl-to-alt))) (117 lambda (&optional arg) (interactive "P") (ergoemacs-command-loop "C-c" (quote :unchorded-ctl))) (100 keymap (8 . help-for-help) (help . help-for-help) (f1 . help-for-help) (46 . display-local-help) (63 . help-for-help) (1 . about-emacs) (3 . describe-copying) (4 . view-emacs-debugging) (5 . view-external-packages) (6 . view-emacs-FAQ) (13 . view-order-manuals) (14 . view-emacs-news) (15 . describe-distribution) (16 . view-emacs-problems) (20 . view-emacs-todo) (23 . describe-no-warranty) (28 . describe-input-method) (67 . describe-coding-system) (70 . Info-goto-emacs-command-node) (73 . describe-input-method) (75 . Info-goto-emacs-key-command-node) (76 . describe-language-environment) (83 . info-lookup-symbol) (97 . apropos-command) (98 . describe-bindings) (99 . describe-key-briefly) (100 . apropos-documentation) (101 . view-echo-area-messages) (102 . describe-function) (103 . describe-gnu-project) (104 . view-hello-file) (105 . info) (52 . describe-char) (107 . describe-key) (108 . view-lossage) (109 . describe-mode) (110 . view-emacs-news) (112 . finder-by-keyword) (80 . describe-package) (114 . info-emacs-manual) (115 . describe-syntax) (116 . help-with-tutorial) (119 . where-is) (118 . describe-variable) (113 . help-quit) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693829))) (39 . ergoemacs-describe-current-theme) (49 . describe-function) (50 . describe-variable) (51 . describe-key) (53 . man) (55 . ergoemacs-lookup-google) (56 . ergoemacs-lookup-wikipedia) (57 . ergoemacs-lookup-word-definition) (96 . elisp-index-search) (111 . ergoemacs-where-is-old-binding) (122 . ergoemacs-clean) (26 . ergoemacs-clean-library) (90 . ergoemacs-clean-nw)) (109 . "") (111 . save-buffer) (15 . write-file) (114 . find-file) (105 . ergoemacs-read-key--universal-argument) (44 . ergoemacs-close-current-buffer) (113 . ergoemacs-cut-line-or-region) (106 . ergoemacs-copy-line-or-region) (107 . ergoemacs-paste) (120 . undo-tree-redo) (121 . switch-to-buffer) (39 . undo) (112 keymap (106 . goto-char) (105 . goto-line) (67108911 keymap (105 . goto-line) (98 . next-error) (108 . previous-error) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693799)))) (98 . next-error) (108 . previous-error) (3 . move-to-column) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693831)))))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) apps-toggle programmer-dv)))) (menu keymap (99 keymap (99 . column-number-mode) (100 . toggle-debug-on-error) (101 . toggle-debug-on-error) (102 . auto-fill-mode) (108 . toggle-truncate-lines) (113 . toggle-debug-on-quit) (114 . read-only-mode) (18 . revert-buffer)))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) apps-apps programmer-dv)))) (menu keymap (98 keymap (97 . org-agenda) (65 . org-capture) (1 . org-capture) (99 . calc) (100 . dired-jump) (101 . eshell) (112 . powershell) (102 . ergoemacs-open-in-desktop) (103 . grep) (109 . magit-status) (111 . ergoemacs-open-in-external-app) (114 . R) (115 . shell) (116 . org-capture) (20 . org-agenda) (84 . org-agenda)))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) apps-punctuation programmer-dv)))) (menu keymap (116 keymap (114 . "#") (110 . "$") (118 . ":") (44 . "^") (111 . "*") (113 . "~") (99 . ergoemacs-smart-bracket) (116 . ergoemacs-smart-paren) (119 . ergoemacs-smart-curly) (104 . ergoemacs-smart-quote) (103 . ergoemacs-smart-apostrophe) (109 . "`") (102 . "?") (100 . "%") (98 . "@") (112 . ">") (117 . "_") (107 . "<") (46 . "+") (101 . "=") (106 . "-") (121 . "&") (105 . "|") (120 . "!")))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) copy programmer-dv)))) (27 keymap (113 . ergoemacs-cut-line-or-region) (106 . ergoemacs-copy-line-or-region) (107 . ergoemacs-paste) (75 . ergoemacs-paste-cycle) (74 . ergoemacs-copy-all) (81 . ergoemacs-cut-all) (34 . undo-tree-redo) (39 . undo)) (3 keymap (ergoemacs-timeout . ergoemacs-copy-line-or-region)) (24 keymap (ergoemacs-timeout . ergoemacs-cut-line-or-region)) (26 . undo) (33554458 . undo-tree-redo) (25 . undo-tree-redo)) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) execute programmer-dv)))) (27 keymap (97 . execute-extended-command) (65 . shell-command))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) fixed-newline programmer-dv)))) (27 keymap (13 . newline-and-indent))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) help programmer-dv)))) (8 keymap (39 . ergoemacs-describe-current-theme) (49 . describe-function) (50 . describe-variable) (51 . describe-key) (52 . describe-char) (53 . man) (55 . ergoemacs-lookup-google) (56 . ergoemacs-lookup-wikipedia) (57 . ergoemacs-lookup-word-definition) (96 . elisp-index-search) (111 . ergoemacs-where-is-old-binding) (122 . ergoemacs-clean) (26 . ergoemacs-clean-library)) (f1 keymap (39 . ergoemacs-describe-current-theme) (49 . describe-function) (50 . describe-variable) (51 . describe-key) (52 . describe-char) (53 . man) (55 . ergoemacs-lookup-google) (56 . ergoemacs-lookup-wikipedia) (57 . ergoemacs-lookup-word-definition) (96 . elisp-index-search) (111 . ergoemacs-where-is-old-binding))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) kill-line programmer-dv)))) (27 keymap (105 . kill-line) (73 . ergoemacs-kill-line-backward))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) misc programmer-dv)))) (27 keymap (108 . recenter-top-bottom) (120 . avy-goto-word-or-subword-1))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) move-bracket programmer-dv)))) (M-left . ergoemacs-backward-open-bracket) (27 keymap (72 . ergoemacs-backward-open-bracket) (78 . ergoemacs-forward-close-bracket) (left . ergoemacs-backward-open-bracket) (right . ergoemacs-forward-close-bracket)) (M-right . ergoemacs-forward-close-bracket)) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) move-buffer programmer-dv)))) (27 keymap (98 . ergoemacs-beginning-or-end-of-buffer) (66 . ergoemacs-end-or-beginning-of-buffer))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) move-char programmer-dv)))) (27 keymap (104 . backward-char) (110 . forward-char) (99 . previous-line) (116 . next-line) (8 . left-word) (14 . right-word) (3 . backward-paragraph) (20 . forward-paragraph) (32 . set-mark-command) (101 . delete-backward-char) (117 . delete-char) (9 . backward-paragraph))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) move-line programmer-dv)))) (27 keymap (100 . ergoemacs-beginning-of-line-or-what) (68 . ergoemacs-end-of-line-or-what))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) move-page programmer-dv)))) (27 keymap (3 . scroll-other-window-down) (20 . scroll-other-window) (67 . scroll-down-command) (84 . scroll-up-command))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) move-paragraph programmer-dv)))) (27 keymap (71 . ergoemacs-backward-block) (82 . ergoemacs-forward-block))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) move-word programmer-dv)))) (27 keymap (103 . backward-word) (114 . forward-word) (46 . backward-kill-word) (112 . kill-word))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) search programmer-dv)))) (27 keymap (102 . isearch-forward) (70 . isearch-backward) (40 . query-replace) (49 . query-replace-regexp))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) select-items programmer-dv)))) (27 keymap (33554464 . mark-paragraph) (41 . ergoemacs-extend-selection) (50 . ergoemacs-select-text-in-quote) (61 . ergoemacs-select-current-block) (42 . ergoemacs-select-current-line))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) switch programmer-dv)))) (27 keymap (111 . ergoemacs-move-cursor-next-pane) (79 . ergoemacs-move-cursor-previous-pane) (126 . ergoemacs-switch-to-previous-frame) (36 . ergoemacs-switch-to-next-frame) (123 . delete-other-windows) (91 . delete-window) (125 . split-window-below) (51 . split-window-right))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) text-transform programmer-dv)))) (27 keymap (45 . comment-dwim) (44 . ergoemacs-shrink-whitespaces) (90 . ergoemacs-toggle-camel-case) (122 . ergoemacs-toggle-letter-case) (121 . ergoemacs-call-keyword-completion) (89 . flyspell-auto-correct-word) (59 . ergoemacs-compact-uncompact-block))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) ergoemacs-undefined programmer-dv)))) (19 . ergoemacs-map-undefined) (67108911 . ergoemacs-map-undefined) (31 . ergoemacs-map-undefined) (25 . ergoemacs-map-undefined) (23 . ergoemacs-map-undefined) (11 . ergoemacs-map-undefined) (12 . ergoemacs-map-undefined) (4 . ergoemacs-map-undefined) (67108896 . ergoemacs-map-undefined) (14 . ergoemacs-map-undefined) (16 . ergoemacs-map-undefined) (6 . ergoemacs-map-undefined) (2 . ergoemacs-map-undefined) (5 . ergoemacs-map-undefined) (1 . ergoemacs-map-undefined) (22 . ergoemacs-map-undefined) (18 . ergoemacs-map-undefined) (24 keymap (104 . ergoemacs-map-undefined) (23 . ergoemacs-map-undefined) (19 . ergoemacs-map-undefined) (6 . ergoemacs-map-undefined) (117 . ergoemacs-map-undefined) (50 . ergoemacs-map-undefined) (51 . ergoemacs-map-undefined) (48 . ergoemacs-map-undefined) (49 . ergoemacs-map-undefined)) (27 keymap (121 . ergoemacs-map-undefined) (119 . ergoemacs-map-undefined) (33 . ergoemacs-map-undefined) (120 . ergoemacs-map-undefined) (60 . ergoemacs-map-undefined) (62 . ergoemacs-map-undefined) (22 . ergoemacs-map-undefined) (118 . ergoemacs-map-undefined) (125 . ergoemacs-map-undefined) (123 . ergoemacs-map-undefined) (100 . ergoemacs-map-undefined) (102 . ergoemacs-map-undefined) (98 . ergoemacs-map-undefined) (67108901 . ergoemacs-map-undefined) (37 . ergoemacs-map-undefined) (59 . ergoemacs-map-undefined)))) global-ret-bb8708fddf73cdb9e45c9af4f0cfbf09 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) ergoemacs-unbound programmer-dv))))) ergoemacs-map---bb8708fddf73cdb9e45c9af4f0cfbf09 #s(hash-table size 487 test equal rehash-size 1.5 rehash-threshold 0.8 data ([27 45] comment-dwim [27 44] ergoemacs-shrink-whitespaces [27 90] ergoemacs-toggle-camel-case [27 122] ergoemacs-toggle-letter-case [27 121] ergoemacs-call-keyword-completion [27 89] flyspell-auto-correct-word [27 59] ergoemacs-compact-uncompact-block [27 111] ergoemacs-move-cursor-next-pane [27 79] ergoemacs-move-cursor-previous-pane [27 126] ergoemacs-switch-to-previous-frame [27 36] ergoemacs-switch-to-next-frame [27 123] delete-other-windows [27 91] delete-window [27 125] split-window-below [27 51] split-window-right [27 33554464] mark-paragraph [27 41] ergoemacs-extend-selection [27 50] ergoemacs-select-text-in-quote [27 61] ergoemacs-select-current-block [27 42] ergoemacs-select-current-line [27 102] isearch-forward [27 70] isearch-backward [27 40] query-replace [27 49] query-replace-regexp [27 103] backward-word [27 114] forward-word [27 46] backward-kill-word [27 112] kill-word [27 71] ergoemacs-backward-block [27 82] ergoemacs-forward-block [27 3] backward-paragraph [27 20] forward-paragraph [27 67] scroll-down-command [27 84] scroll-up-command [27 100] ergoemacs-beginning-of-line-or-what [27 68] ergoemacs-end-of-line-or-what [27 104] backward-char [27 110] forward-char [27 99] previous-line [27 116] next-line [27 8] left-word [27 14] right-word [27 32] set-mark-command [27 101] delete-backward-char [27 117] delete-char [27 9] backward-paragraph [27 98] ergoemacs-beginning-or-end-of-buffer [27 66] ergoemacs-end-or-beginning-of-buffer [M-left] ergoemacs-backward-open-bracket [27 72] ergoemacs-backward-open-bracket [27 78] ergoemacs-forward-close-bracket [27 left] ergoemacs-backward-open-bracket [27 right] ergoemacs-forward-close-bracket [M-right] ergoemacs-forward-close-bracket [27 108] recenter-top-bottom [27 120] avy-goto-word-or-subword-1 [27 105] kill-line [27 73] ergoemacs-kill-line-backward [8 39] ergoemacs-describe-current-theme [8 49] describe-function [8 50] describe-variable [8 51] describe-key [8 52] describe-char [8 53] man [8 55] ergoemacs-lookup-google [8 56] ergoemacs-lookup-wikipedia [8 57] ergoemacs-lookup-word-definition [8 96] elisp-index-search [8 111] ergoemacs-where-is-old-binding [8 122] ergoemacs-clean [8 26] ergoemacs-clean-library [f1 39] ergoemacs-describe-current-theme [f1 49] describe-function [f1 50] describe-variable [f1 51] describe-key [f1 52] describe-char [f1 53] man [f1 55] ergoemacs-lookup-google [f1 56] ergoemacs-lookup-wikipedia [f1 57] ergoemacs-lookup-word-definition [f1 96] elisp-index-search [f1 111] ergoemacs-where-is-old-binding [27 13] newline-and-indent [27 97] execute-extended-command [27 65] shell-command [27 113] ergoemacs-cut-line-or-region [27 106] ergoemacs-copy-line-or-region [27 107] ergoemacs-paste [27 75] ergoemacs-paste-cycle [27 74] ergoemacs-copy-all [27 81] ergoemacs-cut-all [27 34] undo-tree-redo [27 39] undo [3 ergoemacs-timeout] ergoemacs-copy-line-or-region [24 ergoemacs-timeout] ergoemacs-cut-line-or-region [26] undo [33554458] undo-tree-redo [25] undo-tree-redo [menu 116 114] "#" [menu 116 110] "$" [menu 116 118] ":" [menu 116 44] "^" [menu 116 111] "*" [menu 116 113] "~" [menu 116 99] ergoemacs-smart-bracket [menu 116 116] ergoemacs-smart-paren [menu 116 119] ergoemacs-smart-curly [menu 116 104] ergoemacs-smart-quote [menu 116 103] ergoemacs-smart-apostrophe [menu 116 109] "`" [menu 116 102] "?" [menu 116 100] "%" [menu 116 98] "@" [menu 116 112] ">" [menu 116 117] "_" [menu 116 107] "<" [menu 116 46] "+" [menu 116 101] "=" [menu 116 106] "-" [menu 116 121] "&" [menu 116 105] "|" [menu 116 120] "!" [menu 98 97] org-agenda [menu 98 65] org-capture [menu 98 1] org-capture [menu 98 99] calc [menu 98 100] dired-jump [menu 98 101] eshell [menu 98 112] powershell [menu 98 102] ergoemacs-open-in-desktop [menu 98 103] grep [menu 98 109] magit-status [menu 98 111] ergoemacs-open-in-external-app [menu 98 114] R [menu 98 115] shell [menu 98 116] org-capture [menu 98 20] org-agenda [menu 98 84] org-agenda [menu 99 99] column-number-mode [menu 99 100] toggle-debug-on-error [menu 99 101] toggle-debug-on-error [menu 99 102] auto-fill-mode [menu 99 108] toggle-truncate-lines [menu 99 113] toggle-debug-on-quit [menu 99 114] read-only-mode [menu 99 18] revert-buffer [menu 45] ergoemacs-org-edit-src [menu 91] delete-window [menu 123] delete-other-windows [menu 125] split-window-vertically [menu 40] query-replace [menu f2] ergoemacs-cut-all [menu f3] ergoemacs-copy-all [menu return] execute-extended-command [menu 13] execute-extended-command [menu 3] indent-region [menu 32] set-mark-command [menu 97] mark-whole-buffer [menu 101] (lambda (&optional arg) (interactive "P") (ergoemacs-command-loop "C-x" (quote :ctl-to-alt))) [menu 117] (lambda (&optional arg) (interactive "P") (ergoemacs-command-loop "C-c" (quote :unchorded-ctl))) [menu 100 8] help-for-help [menu 100 help] help-for-help [menu 100 f1] help-for-help [menu 100 46] display-local-help [menu 100 63] help-for-help [menu 100 1] about-emacs [menu 100 3] describe-copying [menu 100 4] view-emacs-debugging [menu 100 5] view-external-packages [menu 100 6] view-emacs-FAQ [menu 100 13] view-order-manuals [menu 100 14] view-emacs-news [menu 100 15] describe-distribution [menu 100 16] view-emacs-problems [menu 100 20] view-emacs-todo [menu 100 23] describe-no-warranty [menu 100 28] describe-input-method [menu 100 67] describe-coding-system [menu 100 70] Info-goto-emacs-command-node [menu 100 73] describe-input-method [menu 100 75] Info-goto-emacs-key-command-node [menu 100 76] describe-language-environment [menu 100 83] info-lookup-symbol [menu 100 97] apropos-command [menu 100 98] describe-bindings [menu 100 99] describe-key-briefly [menu 100 100] apropos-documentation [menu 100 101] view-echo-area-messages [menu 100 102] describe-function [menu 100 103] describe-gnu-project [menu 100 104] view-hello-file [menu 100 105] info [menu 100 52] describe-char [menu 100 107] describe-key [menu 100 108] view-lossage [menu 100 109] describe-mode [menu 100 110] view-emacs-news [menu 100 112] finder-by-keyword [menu 100 80] describe-package [menu 100 114] info-emacs-manual [menu 100 115] describe-syntax [menu 100 116] help-with-tutorial [menu 100 119] where-is [menu 100 118] describe-variable [menu 100 113] help-quit [menu 100 ergoemacs-labeled] (lambda nil (interactive) (quote (:map-key -2305843009213693829))) [menu 100 39] ergoemacs-describe-current-theme [menu 100 49] describe-function [menu 100 50] describe-variable [menu 100 51] describe-key [menu 100 53] man [menu 100 55] ergoemacs-lookup-google [menu 100 56] ergoemacs-lookup-wikipedia [menu 100 57] ergoemacs-lookup-word-definition [menu 100 96] elisp-index-search [menu 100 111] ergoemacs-where-is-old-binding [menu 100 122] ergoemacs-clean [menu 100 26] ergoemacs-clean-library [menu 100 90] ergoemacs-clean-nw [menu 109] "" [menu 111] save-buffer [menu 15] write-file [menu 114] find-file [menu 105] ergoemacs-read-key--universal-argument [menu 44] ergoemacs-close-current-buffer [menu 113] ergoemacs-cut-line-or-region [menu 106] ergoemacs-copy-line-or-region [menu 107] ergoemacs-paste [menu 120] undo-tree-redo [menu 121] switch-to-buffer [menu 39] undo [menu 112 106] goto-char [menu 112 105] goto-line [menu 112 67108911 105] goto-line [menu 112 67108911 98] next-error [menu 112 67108911 108] previous-error [menu 112 67108911 ergoemacs-labeled] (lambda nil (interactive) (quote (:map-key -2305843009213693799))) [menu 112 98] next-error [menu 112 108] previous-error [menu 112 3] move-to-column [menu 112 ergoemacs-labeled] (lambda nil (interactive) (quote (:map-key -2305843009213693831))) [C-f2] ergoemacs-cut-all [C-f3] ergoemacs-copy-all [C-f4] ergoemacs-paste-cycle [C-f5] undo-tree-redo [C-f8] highlight-symbol-prev [C-f9] highlight-symbol-next [M-f2] ergoemacs-cut-all [M-f3] ergoemacs-copy-all [27 f2] ergoemacs-cut-all [27 f3] ergoemacs-copy-all [27 f5] undo-tree-redo [M-f5] undo-tree-redo [S-f3] ergoemacs-toggle-letter-case [f11] previous-line [f12] next-line [f3] ergoemacs-copy-line-or-region [f6] ergoemacs-unchorded-alt-modal [f8 111] occur [f8 104 114] highlight-regexp [f8 104 112] highlight-phrase [f8 104 108] highlight-lines-matching-regexp [f8 104 46] highlight-symbol-at-point [f8 104 117] unhighlight-regexp [f8 104 102] hi-lock-find-patterns [f8 104 119] hi-lock-write-interactive-patterns [f8 104 ergoemacs-labeled] (lambda nil (interactive) (quote (:map-key -2305843009213693797))) [f8 119] isearch-forward-word [f8 95] isearch-forward-symbol [f8 46] isearch-forward-symbol-at-point [f8 ergoemacs-labeled] (lambda nil (interactive) (quote (:map-key -2305843009213693842))) [f8 f8] highlight-symbol-at-point [f8 f9] highlight-symbol-query-replace [f2] ergoemacs-cut-line-or-region [f4] ergoemacs-paste [14] ergoemacs-new-empty-buffer [15] find-file [33554447] ergoemacs-open-in-external-app [33554452] ergoemacs-open-last-closed [23] ergoemacs-close-current-buffer [6] isearch-forward [19] save-buffer [33554451] write-file [16] ergoemacs-print-buffer-confirm [1] mark-whole-buffer [S-delete] ergoemacs-cut-line-or-region [C-insert] ergoemacs-copy-line-or-region [33554454] ergoemacs-paste-cycle [S-insert] ergoemacs-paste [22] ergoemacs-paste [33554446] make-frame-command [delete] delete-char [M-delete] kill-word [C-delete] kill-word [home] move-beginning-of-line [end] move-end-of-line [C-home] beginning-of-buffer [C-end] end-of-buffer [C-left] backward-word [C-right] forward-word [M-up] ergoemacs-backward-block [M-down] ergoemacs-forward-block [f5] revert-buffer [18] revert-buffer [M-f4] ergoemacs-delete-frame [S-down-mouse-1] mouse-save-then-kill [S-mouse-1] ignore [67108907] text-scale-increase [67108909] text-scale-decrease [67108910] keyboard-quit [67108911] info [67108912] ergoemacs-text-scale-normal-size [C-next] ergoemacs-next-user-buffer [C-pause] kill-compilation [C-prior] ergoemacs-previous-user-buffer [67108925] text-scale-increase [67108927] info [C-S-next] ergoemacs-next-emacs-buffer [C-S-prior] ergoemacs-previous-emacs-buffer [33554438] occur [33554455] delete-frame [67108960] other-frame [12] goto-line [24 2] ibuffer [M-S-next] forward-page [27 delete] kill-word [27 up] ergoemacs-backward-block [27 down] ergoemacs-forward-block [27 f4] ergoemacs-delete-frame [27 S-next] forward-page [27 S-prior] backward-page [M-S-prior] backward-page [escape] keyboard-quit [menu-bar help-menu] ("?" keymap (whoops menu-item "Whoops!?" (keymap (what-did-i-do menu-item "What did I do !?" view-lossage :help "Display last 100 input keystrokes") (exit-recurive-edit menu-item "Exit Recursive Editing" top-level :help "Exit all Recursive editing Levels") (keyboard-quit menu-item "Cancel Current Action" keyboard-quit :help "Quit any operation in progress"))) (help-for-help menu-item "Help for Help..." help-for-help :help "Emacs main help command") (separator-1 menu-item "--") (apropos menu-item "Apropos (Find matching)" (keymap (commands menu-item "Commands..." apropos-command :help "Find commands matching a regular expression") (user-options menu-item "User Options..." ergoemacs-apropos-user-options :help "Find user options matching a regular expression") (all-vars menu-item "All Variables..." apropos-variable :help "Find a variable that matches a regular expression") (var-values menu-item "Variable Values..." apropos-value :help "Find variable values that matches a regular expression.") (symbols menu-item "Symbols..." apropos :help "Find functions/variables that match a regular expression.") (symbol-desc menu-item "Symbol Descriptions (Doc)..." apropos-documentation :help "Find functions/variables whose documentation match a regular expression") (tags menu-item "Tags..." tags-apropos :help "Find Tags Matching Regular Expression"))) (describe menu-item "Describe" (keymap (function menu-item "Function..." describe-function :help "Describe command or other function") (variable menu-item "Variable..." describe-variable :help "Describe an emacs user option or other variable.") (face menu-item "Face..." describe-face :help "Describe a face") (key menu-item "Key..." describe-key :help "Describe a command bound to a key") (input menu-item "Input Method..." describe-input-method) (coding menu-item "Coding System..." describe-coding-system) (separator-ergoemacs-describe "--") (theme-component menu-item "Ergoemacs Component" describe-ergoemacs-component) (theme menu-item "Ergoemacs Theme" describe-ergoemacs-theme) (layout menu-item "Ergoemacs Layout" describe-ergoemacs-layout) (separator-curr-modes menu-item "--") (curr-major-mode menu-item "Current Major Mode" ergoemacs-describe-major-mode :help "Describe this buffers major and minor modes.") (curr-modes menu-item "Current Modes" (lambda nil (interactive) (call-interactively (quote describe-mode))) :help "Describe this buffers major and minor modes.") (curr-keys menu-item "Current Key Bindings" describe-bindings :help "List all key-bindings with brief descriptions.") (curr-syntax menu-item "Current Syntax Table" describe-syntax :help "Describe the syntax specifications in the current syntax table"))) (learn-more menu-item "Learn More" (keymap (emacs menu-item "Emacs" (keymap (manual menu-item "Manual" info-emacs-manual) (command-desc menu-item "    Command Description..." Info-goto-emacs-command-node :help "Show emacs manual section about a command") (index menu-item "    Index..." emacs-index-search :help "Lookup topic in Emacs manual") (glossary menu-item "    Glossary" search-emacs-glossary) (separator-emacs menu-item "--") (faq menu-item "FAQ" view-emacs-FAQ :help "Read frequently asked questions about Emacs (with answers)") (whats-new menu-item "What's new" view-emacs-news :help "New features of emacs") (known-problems menu-item "Known problems" view-emacs-problems :help "Known problems of this Emacs version."))) (emacs-lisp menu-item "Emacs Lisp" (keymap (xah-lisp menu-item "Xah Emacs Lisp Tutorial" (lambda nil (interactive) (browse-url ergoemacs-xah-emacs-lisp-tutorial-url)) :help "Read Emacs Lisp Tutorial") (intro menu-item "Intro to Elisp" (lambda nil (interactive) (info "eintr")) :help "Read introduction to Emacs Lisp") (manual menu-item "Manual" (lambda nil (interactive) (info "elisp")) :help "Read Emacs Lisp reference Manual") (index menu-item "    Index..." elisp-index-search :help "Lookup topic in emacs lisp manual") (elisp-separator menu-item "--") (locate-library menu-item "Locate Library" locate-library :help "Locate lisp library"))) (last-accessed-info menu-item "Last Accessed Manual (Info)" info :help "Open Info, at the last doc place visited.") (info-dir menu-item "All Manuals (`Info')" Info-directory :help "Open a list of all the info docs.") (man-dir menu-item "Unix Man Pages..." woman :help "Unix Manual entries (with WoMan)"))) (separator-2 menu-item "--") (eroemacs-current-keybindings menu-item "Current Ergoemacs Keybindings" ergoemacs-describe-current-theme) (ergoemacs-mode-web-page menu-item "Ergoemacs-mode web-page" (lambda nil (interactive) (browse-url ergoemacs-mode-web-page-url)) :help "Online help about ergoemacs.") (separator-3 menu-item "--") (send-bug-report menu-item "Send Emacs Bug Report" report-emacs-bug :help "Report an emacs bug.") (emacs-web-page menu-item "Emacs Web Page" (lambda nil (interactive) (browse-url "http://www.gnu.org/software/emacs/")) :help "Emacs Web Page") (separator-licence menu-item "--") (license menu-item "License" describe-copying) "?") [menu-bar languages] ("Languages" keymap (A menu-item "A" (keymap (ada-mode menu-item "Ada" ada-mode) (antlr-mode menu-item "Antlr" antlr-mode) (asm-mode menu-item "Asm" asm-mode) (autoconf-mode menu-item "Autoconf" autoconf-mode) (awk-mode menu-item "Awk" awk-mode))) (B menu-item "B" (keymap (bat-mode menu-item "Bat" bat-mode) (bibtex-mode menu-item "Bibtex" bibtex-mode) (bibtex-style-mode menu-item "Bibtex style" bibtex-style-mode) (bovine-grammar-mode menu-item "Bovine grammar" bovine-grammar-mode))) (C menu-item "C" (keymap (c-mode menu-item "C" c-mode) (c++-mode menu-item "C++" c++-mode) (change-log-mode menu-item "Change log" change-log-mode) (compilation-mode menu-item "Compilation" compilation-mode) (conf-unix-mode menu-item "Conf unix" conf-unix-mode) (csharp-mode menu-item "Csharp" csharp-mode) (css-mode menu-item "Css" css-mode))) (D menu-item "D" (keymap (d-mode menu-item "D" d-mode) (dcl-mode menu-item "Dcl" dcl-mode) (delphi-mode menu-item "Delphi" delphi-mode) (dns-mode menu-item "Dns" dns-mode) (doctex-mode menu-item "Doctex" doctex-mode) (dsssl-mode menu-item "Dsssl" dsssl-mode))) (emacs-lisp-mode menu-item "Emacs lisp" emacs-lisp-mode) (F menu-item "F" (keymap (f90-mode menu-item "F90" f90-mode) (fish-mode menu-item "Fish" fish-mode) (fortran-mode menu-item "Fortran" fortran-mode))) (G menu-item "G" (keymap (gdb-script-mode menu-item "Gdb script" gdb-script-mode) (ghc-core-mode menu-item "Ghc core" ghc-core-mode) (ghci-script-mode menu-item "Ghci script" ghci-script-mode) (glsl-mode menu-item "Glsl" glsl-mode) (go-mode menu-item "Go" go-mode) (groovy-mode menu-item "Groovy" groovy-mode))) (H menu-item "H" (keymap (haskell-mode menu-item "Haskell" haskell-mode) (haskell-cabal-mode menu-item "Haskell cabal" haskell-cabal-mode) (html-mode menu-item "Html" html-mode))) (I menu-item "I" (keymap (icon-mode menu-item "Icon" icon-mode) (idl-mode menu-item "Idl" idl-mode) (idlwave-mode menu-item "Idlwave" idlwave-mode))) (J menu-item "J" (keymap (java-mode menu-item "Java" java-mode) (javascript-mode menu-item "Javascript" javascript-mode) (js2-mode menu-item "Js2" js2-mode) (json-mode menu-item "Json" json-mode))) (L menu-item "L" (keymap (latex-mode menu-item "Latex" latex-mode) (ld-script-mode menu-item "Ld script" ld-script-mode) (less-css-mode menu-item "Less css" less-css-mode) (lisp-mode menu-item "Lisp" lisp-mode) (literate-haskell-mode menu-item "Literate haskell" literate-haskell-mode))) (M menu-item "M" (keymap (m4-mode menu-item "M4" m4-mode) (makefile-automake-mode menu-item "Makefile automake" makefile-automake-mode) (makefile-gmake-mode menu-item "Makefile gmake" makefile-gmake-mode) (makefile-imake-mode menu-item "Makefile imake" makefile-imake-mode) (makefile-makepp-mode menu-item "Makefile makepp" makefile-makepp-mode) (markdown-mode menu-item "Markdown" markdown-mode) (matlab-mode menu-item "Matlab" matlab-mode) (metafont-mode menu-item "Metafont" metafont-mode) (metapost-mode menu-item "Metapost" metapost-mode) (mixal-mode menu-item "Mixal" mixal-mode) (m2-mode menu-item "Modula-2" m2-mode))) (nroff-mode menu-item "Nroff" nroff-mode) (O menu-item "O" (keymap (objc-mode menu-item "Objc" objc-mode) (octave-mode menu-item "Octave" octave-mode) (org-mode menu-item "Org" org-mode))) (P menu-item "P" (keymap (pascal-mode menu-item "Pascal" pascal-mode) (perl-mode menu-item "Perl" perl-mode) (pike-mode menu-item "Pike" pike-mode) (prolog-mode menu-item "Prolog" prolog-mode) (ps-mode menu-item "Ps" ps-mode) (python-mode menu-item "Python" python-mode))) (R menu-item "R" (keymap (rst-mode menu-item "Rst" rst-mode) (ruby-mode menu-item "Ruby" ruby-mode) (rust-mode menu-item "Rust" rust-mode))) (S menu-item "S" (keymap (scala-mode menu-item "Scala" scala-mode) (scheme-mode menu-item "Scheme" scheme-mode) (scss-mode menu-item "Scss" scss-mode) (conf-mode menu-item "Settings" conf-mode) (sgml-mode menu-item "Sgml" sgml-mode) (sh-mode menu-item "Sh" sh-mode) (shell-script-mode menu-item "Shell script" shell-script-mode) (sieve-mode menu-item "Sieve" sieve-mode) (simula-mode menu-item "Simula" simula-mode) (snmp-mode menu-item "SKMP MIBs" snmp-mode) (snmpv2-mode menu-item "SNMPv2 MIBs" snmpv2-mode) (sql-mode menu-item "Sql" sql-mode) (srecode-template-mode menu-item "Srecode template" srecode-template-mode))) (T menu-item "T" (keymap (tcl-mode menu-item "Tcl" tcl-mode) (tex-mode menu-item "Tex" tex-mode) (texinfo-mode menu-item "Texinfo" texinfo-mode) (text-mode menu-item "Text" text-mode) (toml-mode menu-item "Toml" toml-mode) (typescript-mode menu-item "Typescript" typescript-mode))) (V menu-item "V" (keymap (vera-mode menu-item "Vera" vera-mode) (verilog-mode menu-item "Verilog" verilog-mode) (vhdl-mode menu-item "Vhdl" vhdl-mode))) (W menu-item "W" (keymap (web-mode menu-item "Web" web-mode) (wisent-grammar-mode menu-item "Wisent grammar" wisent-grammar-mode))) (xml-mode menu-item "Xml" xml-mode) (separator1 menu-item "--") (package menu-item "Manage Packages" list-packages)) [menu-bar view] ("View" keymap (menu-font-size menu-item "Zoom" (keymap (zoom-in menu-item "Zoom In" text-scale-increase) (zoom-out menu-item "Zoom Out" text-scale-decrease) (zoom-reset menu-item "Zoom Reset" ergoemacs-text-scale-normal-size))) (menu-set-font menu-item "Set Default Font..." menu-set-font :visible (display-multi-font-p) :help "Select a default font") (\, (when (fboundp (quote customize-themes)) (quote (color-theme menu-item "Customize Color Themes" customize-themes :help "Customize Emacs Themes.")))) (separator-font-size menu-item "--") (highlight-current-line menu-item "Highlight Current Line" global-hl-line-mode :help "Have the cursor line always Highlighted" :button (:toggle and (boundp (quote global-hl-line-mode)) global-hl-line-mode)) (paren-mode menu-item "Highlight Matching Parentheses" show-paren-mode :button (:toggle . show-paren-mode)) (ruler-mode menu-item "Ruler Mode" ruler-mode :button (:toggle . ruler-mode)) (blink-cursor menu-item "Cursor Blink" blink-cursor-mode :button (:toggle . blink-cursor-mode)) (tabbar-mode menu-item "Tabbar" ergoemacs-menu-tabbar-toggle :button (:toggle and (boundp (quote tabbar-mode)) tabbar-mode)) (separator-speedbar menu-item "--") (showhide-speedbar menu-item "Speedbar" speedbar-frame-mode :help "Display a Speedbar quick-navigation frame" :button (:toggle and (boundp (quote speedbar-frame)) (frame-live-p speedbar-frame) (frame-visible-p speedbar-frame))) (linecolumn-separator "--") (line-number-mode menu-item "Line Numbers" line-number-mode :help "Show the current line number in the mode line" :button (:toggle and (default-boundp (quote line-number-mode)) (default-value (quote line-number-mode)))) (global-whitespace-mode menu-item "Show/Hide whitespaces" global-whitespace-mode :button (:toggle . global-whitespace-mode)) (global-linum-mode menu-item "Show/Hide line numbers in margin" global-linum-mode :button (:toggle . global-linum-mode))) [menu-bar search] ("Search" keymap (isearch-forward menu-item "String Forward..." isearch-forward :help "Search forward for a string as you type it") (isearch-backward menu-item "    Backward..." isearch-backward :help "Search backwards for a string as you type it") (re-isearch-forward menu-item "Regexp Forward..." isearch-forward-regexp :help "Search forward for a regular expression as you type it") (re-isearch-backward menu-item "    Backward..." isearch-backward-regexp :help "Search backwards for a regular expression as you type it") (separator-repeat-search menu-item "--") (repeat-forward menu-item "Repeat Forward" nonincremental-repeat-search-forward :enable (or (and (memq menu-bar-last-search-type (quote (string word))) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search forward") (repeat-backward menu-item "    Repeat Backward" nonincremental-repeat-search-backward :enable (or (and (memq menu-bar-last-search-type (quote (string word))) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search forward") (separator-isearch menu-item "--") (i-search menu-item "String Search" (keymap (search-forward menu-item "Forward String..." search-forward) (search-backward menu-item "    Backward..." search-backward) (search-forward-regexp menu-item "Forward Regexp..." re-search-forward) (search-backward-regexp menu-item "    Backward..." re-search-backward) "String Search")) (replace menu-item "Replace" (keymap (query-replace menu-item "Replace String..." query-replace :enable (not buffer-read-only) :help "Replace string interactively, ask about each occurrence") (query-replace-regexp menu-item "Replace Regexp..." query-replace-regexp :enable (not buffer-read-only) :help "Replace regular expression interactively, ask about each occurrence") (separator-replace-tags menu-item "--") (tags-repl menu-item "Replace in Tagged Files..." tags-query-replace :help "Interactively replace a regexp in all tagged files") (tags-repl-continue menu-item "Continue Replace" tags-loop-continue :help "Continue last tags replace operation") "Replace")) (grep menu-item "Grep..." grep :enable (executable-find "grep")) (occur menu-item "Occurrences in buffer..." occur :help "Show Lines in a buffer that match a regular expression") (moccur menu-item "Occurrences in all buffers..." multi-occur :help "Show Lines in all buffers that match a regular expression") (separator-go-to menu-item "--") (goto menu-item "Go To" (keymap (go-to-line menu-item "Goto Line..." goto-line :help "Read a line number and go to that line") (separator-tags menu-item "--") (find-tag menu-item "Find Tag..." find-tag :help "Find definition of function or variable") (find-tag-otherw menu-item "Find Tag in Other Window..." find-tag-other-window :help "Find function/variable definition in another window") (next-tag menu-item "Find Next Tag" menu-bar-next-tag :enable (and (boundp (quote tags-location-ring)) (not (ring-empty-p tags-location-ring))) :help "Find next function/variable matching last tag name") (next-tag-otherw menu-item "Next Tag in Other Window" menu-bar-next-tag-other-window :enable (and (boundp (quote tags-location-ring)) (not (ring-empty-p tags-location-ring))) :help "Find next function/variable matching last tag name in another window") (apropos-tags menu-item "Tags Apropos..." tags-apropos :help "Find function/variables whose names match regexp") (separator-tag-file menu-item "--") (set-tags-name menu-item "Set Tags File Name..." visit-tags-table :help "Tell Tags commands which tag table file to use") "Go To")) (bookmark menu-item "Bookmarks" menu-bar-bookmark-map) "Search") [menu-bar edit] ("Edit" keymap (undo menu-item "Undo" undo :enable (and (not buffer-read-only) (not (eq t buffer-undo-list)) (if (eq last-command (quote undo)) (listp pending-undo-list) (consp buffer-undo-list))) :help "Undo last operation") (redo menu-item "Redo" ergoemacs-redo :enable (and (not buffer-read-only) (not (eq t buffer-undo-list)) (or (not (and (boundp (quote undo-tree-mode)) undo-tree-mode)) (and (and (boundp (quote undo-tree-mode)) undo-tree-mode) (null (undo-tree-node-next (undo-tree-current buffer-undo-tree))))))) (redo-sep menu-item "--") (cut menu-item "Cut" ergoemacs-cut-line-or-region :help "Delete text in Line/region and copy it to the clipboard" :enable (or (eq ergoemacs-handle-ctl-c-or-ctl-x (quote only-copy-cut)) (region-active-p))) (copy menu-item "Copy" ergoemacs-copy-line-or-region :help "Copy text in line/region to the clipboard" :enable (or (eq ergoemacs-handle-ctl-c-or-ctl-x (quote only-copy-cut)) (region-active-p))) (paste menu-item "Paste" ergoemacs-paste :help "Paste text from clipboard") (paste-from-menu menu-item "Paste from Kill Menu" yank-menu :enable (and (cdr yank-menu) (not buffer-read-only)) :help "Choose a string from the kill ring and paste it") (clear menu-item "Clear" delete-region :enable (and mark-active (not buffer-read-only)) :help "Delete the text in region between mark and current position") (mark-whole-buffer menu-item "Select All" mark-whole-buffer :help "Mark the whole buffer for a subsequent cut/copy") (separator-search menu-item "--") (blank-operations menu-item "Blank/Whitespace Operations" (keymap (trim-trailing-space menu-item "Trim Trailing Space" delete-trailing-whitespace :help "Trim Trailing spaces on each line") (separator-tabify menu-item "--") (tabify-region menu-item "Change multiple spaces to tabs (Tabify)" (lambda nil (interactive) (if mark-active (tabify (region-beginning) (region-end)) (tabify (point-min) (point-max)))) :help "Convert multiple spaces in the nonempty region to tabs when possible" :enable (not buffer-read-only)) (untabify menu-item "Change Tabs To Spaces (Untabify)" (lambda nil (interactive) (if mark-active (untabify (region-beginning) (region-end)) (untabify (point-min) (point-max)))) :help "Convert all tabs in the nonempty region or buffer to multiple spaces" :enable (not buffer-read-only)))) (copy-to-clipboard menu-item "Copy File/Path to Clipboard" (keymap (copy-full-path menu-item "Current Full File Path to Clipboard" ergoemacs-copy-full-path :enable (buffer-file-name)) (copy-file-name menu-item "Current File Name to Clipboard" ergoemacs-copy-file-name :enable (buffer-file-name)) (copy-dir-path menu-item "Current Dir. Path to Clipboard" ergoemacs-copy-dir-path :enable (buffer-file-name)))) (convert-case-to menu-item "Convert Case To" (keymap (capitalize-region menu-item "Capitalize" capitalize-region :help "Capitalize (initial caps) words in the nonempty region" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (downcase-region menu-item "downcase" downcase-region :help "Make words in the nonempty region lower-case" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (upcase-region menu-item "UPCASE" upcase-region :help "Make words in the nonempty region upper-case" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (toggle-case-region menu-item "Toggle Capitalization/Case" ergoemacs-toggle-letter-case :enable (not buffer-read-only)) (toggle-camel menu-item "Toggle CamelCase to camel_case" ergoemacs-toggle-camel-case :enable (not buffer-read-only)))) (eol-conversion menu-item "EOL Conversion" (keymap (windows menu-item "Windows/DOS" (lambda nil (interactive) (ergoemacs-eol-conversion (quote dos))) :enable (not (ergoemacs-eol-p (quote dos)))) (unix menu-item "Unix/OSX" (lambda nil (interactive) (ergoemacs-eol-conversion (quote unix))) :enable (not (ergoemacs-eol-p (quote unix)))) (mac menu-item "Old Mac" (lambda nil (interactive) (ergoemacs-eol-conversion (quote mac))) :enable (not (ergoemacs-eol-p (quote mac)))))) (sort menu-item "Sort" (keymap (regexp-fields menu-item "Regexp Fields" sort-regexp-fields :help "Sort the nonempty region lexicographically" :enable (and last-kbd-macro (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (pages menu-item "Pages" sort-pages :help "Sort pages in the nonempty region alphabetically" :enable (and last-kbd-macro (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-paragraphs menu-item "Paragraphs" sort-paragraphs :help "Sort paragraphs in the nonempty region alphabetically" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-numeric-fields menu-item "Numeric Field" sort-numeric-fields :help "Sort lines in the nonempty region numerically by the Nth field" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-fields menu-item "Field" sort-fields :help "Sort lines in the nonempty region lexicographically by the Nth field" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-columns menu-item "Columns" sort-columns :help "Sort lines in the nonempty region alphabetically, by a certain range of columns" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-lines menu-item "Lines" sort-lines :help "Sort lines in the nonempty region alphabetically" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (reverse-region menu-item "Reverse" reverse-region :help "Reverse the order of the selected lines" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))))) (separator-bookmark menu-item "--") (fill menu-item "Fill" fill-region :enable (and mark-active (not buffer-read-only)) :help "Fill text in region to fit between left and right margin") (props menu-item "Text Properties" facemenu-menu) "Edit") [menu-bar file] ("File" keymap (new-file menu-item "New" ergoemacs-new-empty-buffer) (make-frame menu-item "New Frame" make-frame-command) (open-file menu-item "Open..." find-file) (open-directory menu-item "Open Containing Folder" (keymap (open-directory-in-dired menu-item "In Dired" dired-jump) (open-directory-in-desktop menu-item "In File Manager" ergoemacs-open-in-desktop) (sep1 menu-item "--") (open-eshell-here menu-item "In Emacs Shell" ergoemacs-eshell-here) (open-shell-here menu-item "In Shell" ergoemacs-shell-here) nil)) (kill-buffer menu-item "Close" ergoemacs-close-current-buffer) (separator1 menu-item "--") (save-buffer menu-item "Save" save-buffer) (write-file menu-item "Save As..." write-file) (revert-buffer menu-item "Revert to Saved" revert-buffer) (print-buffer menu-item "Print" ergoemacs-print-buffer-confirm) (separator4 menu-item "--") (split-window-below menu-item "Split Window" split-window-below) (split-window-right menu-item "Split Window right" split-window-right) (one-window menu-item "Unsplit Window" delete-other-windows) (separator5 menu-item "--") (execute-command menu-item "Execute Command" execute-extended-command) (repeat-earlier-command menu-item "Repeat Earlier Command" repeat-complex-command) (separator6 menu-item "--") (exit-emacs menu-item "Quit" save-buffers-kill-emacs) "File"))) undefined-keys-bb8708fddf73cdb9e45c9af4f0cfbf09 ([134217787] [24 49] [24 48] [24 51] [24 50] [18] [134217765] [201326629] [134217826] [134217830] [134217828] [134217851] [134217853] [134217846] [22] [134217750] [1] [5] [2] [6] [16] [14] [67108896] [4] [134217790] [134217788] [12] [11] [134217848] [134217761] [23] [134217847] [25] [134217849] [31] [67108911] [24 117] [24 6] [19] [24 19] [24 23] [24 104]) nil (keymap (ergoemacs-ignore . ergoemacs-command-loop--ignore) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) ergoemacs-unbound programmer-dv)))) keymap (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) quit programmer-dv)))) (escape . keyboard-quit)) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) standard-fixed programmer-dv)))) (14 . ergoemacs-new-empty-buffer) (15 . find-file) (33554447 . ergoemacs-open-in-external-app) (33554452 . ergoemacs-open-last-closed) (23 . ergoemacs-close-current-buffer) (6 . isearch-forward) (19 . save-buffer) (33554451 . write-file) (16 . ergoemacs-print-buffer-confirm) (1 . mark-whole-buffer) (26 . undo) (33554458 . undo-tree-redo) (S-delete . ergoemacs-cut-line-or-region) (3 keymap (ergoemacs-timeout . ergoemacs-copy-line-or-region)) (C-insert . ergoemacs-copy-line-or-region) (33554454 . ergoemacs-paste-cycle) (S-insert . ergoemacs-paste) (22 . ergoemacs-paste) (33554446 . make-frame-command) (delete . delete-char) (M-delete . kill-word) (C-delete . kill-word) (home . move-beginning-of-line) (end . move-end-of-line) (C-home . beginning-of-buffer) (C-end . end-of-buffer) (C-left . backward-word) (C-right . forward-word) (M-up . ergoemacs-backward-block) (M-down . ergoemacs-forward-block) (f5 . revert-buffer) (18 . revert-buffer) (M-f4 . ergoemacs-delete-frame) (S-down-mouse-1 . mouse-save-then-kill) (S-mouse-1 . ignore) (67108907 . text-scale-increase) (67108909 . text-scale-decrease) (67108910 . keyboard-quit) (67108911 . info) (67108912 . ergoemacs-text-scale-normal-size) (C-next . ergoemacs-next-user-buffer) (C-pause . kill-compilation) (C-prior . ergoemacs-previous-user-buffer) (67108925 . text-scale-increase) (67108927 . info) (C-S-next . ergoemacs-next-emacs-buffer) (C-S-prior . ergoemacs-previous-emacs-buffer) (33554438 . occur) (33554455 . delete-frame) (67108960 . other-frame) (12 . goto-line) (24 keymap (ergoemacs-timeout . ergoemacs-cut-line-or-region) (2 . ibuffer)) (25 . undo-tree-redo) (M-S-next . forward-page) (27 keymap (delete . kill-word) (up . ergoemacs-backward-block) (down . ergoemacs-forward-block) (f4 . ergoemacs-delete-frame) (S-next . forward-page) (S-prior . backward-page)) (M-S-prior . backward-page)) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) fn-keys programmer-dv)))) (C-f2 . ergoemacs-cut-all) (C-f3 . ergoemacs-copy-all) (C-f4 . ergoemacs-paste-cycle) (C-f5 . undo-tree-redo) (C-f8 . highlight-symbol-prev) (C-f9 . highlight-symbol-next) (M-f2 . ergoemacs-cut-all) (M-f3 . ergoemacs-copy-all) (27 keymap (f2 . ergoemacs-cut-all) (f3 . ergoemacs-copy-all) (f5 . undo-tree-redo)) (M-f5 . undo-tree-redo) (S-f3 . ergoemacs-toggle-letter-case) (f11 . previous-line) (f12 . next-line) (f3 . ergoemacs-copy-line-or-region) (f6 . ergoemacs-unchorded-alt-modal) (f8 keymap (111 . occur) (104 keymap (114 . highlight-regexp) (112 . highlight-phrase) (108 . highlight-lines-matching-regexp) (46 . highlight-symbol-at-point) (117 . unhighlight-regexp) (102 . hi-lock-find-patterns) (119 . hi-lock-write-interactive-patterns) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693797)))) (119 . isearch-forward-word) (95 . isearch-forward-symbol) (46 . isearch-forward-symbol-at-point) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693842))) (f8 . highlight-symbol-at-point) (f9 . highlight-symbol-query-replace)) (f2 . ergoemacs-cut-line-or-region) (f4 . ergoemacs-paste)) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) apps programmer-dv)))) (menu keymap (45 . ergoemacs-org-edit-src) (91 . delete-window) (123 . delete-other-windows) (125 . split-window-vertically) (40 . query-replace) (f2 . ergoemacs-cut-all) (f3 . ergoemacs-copy-all) (return . execute-extended-command) (13 . execute-extended-command) (3 . indent-region) (32 . set-mark-command) (97 . mark-whole-buffer) (101 lambda (&optional arg) (interactive "P") (ergoemacs-command-loop "C-x" (quote :ctl-to-alt))) (117 lambda (&optional arg) (interactive "P") (ergoemacs-command-loop "C-c" (quote :unchorded-ctl))) (100 keymap (8 . help-for-help) (help . help-for-help) (f1 . help-for-help) (46 . display-local-help) (63 . help-for-help) (1 . about-emacs) (3 . describe-copying) (4 . view-emacs-debugging) (5 . view-external-packages) (6 . view-emacs-FAQ) (13 . view-order-manuals) (14 . view-emacs-news) (15 . describe-distribution) (16 . view-emacs-problems) (20 . view-emacs-todo) (23 . describe-no-warranty) (28 . describe-input-method) (67 . describe-coding-system) (70 . Info-goto-emacs-command-node) (73 . describe-input-method) (75 . Info-goto-emacs-key-command-node) (76 . describe-language-environment) (83 . info-lookup-symbol) (97 . apropos-command) (98 . describe-bindings) (99 . describe-key-briefly) (100 . apropos-documentation) (101 . view-echo-area-messages) (102 . describe-function) (103 . describe-gnu-project) (104 . view-hello-file) (105 . info) (52 . describe-char) (107 . describe-key) (108 . view-lossage) (109 . describe-mode) (110 . view-emacs-news) (112 . finder-by-keyword) (80 . describe-package) (114 . info-emacs-manual) (115 . describe-syntax) (116 . help-with-tutorial) (119 . where-is) (118 . describe-variable) (113 . help-quit) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693829))) (39 . ergoemacs-describe-current-theme) (49 . describe-function) (50 . describe-variable) (51 . describe-key) (53 . man) (55 . ergoemacs-lookup-google) (56 . ergoemacs-lookup-wikipedia) (57 . ergoemacs-lookup-word-definition) (96 . elisp-index-search) (111 . ergoemacs-where-is-old-binding) (122 . ergoemacs-clean) (26 . ergoemacs-clean-library) (90 . ergoemacs-clean-nw)) (109 . "") (111 . save-buffer) (15 . write-file) (114 . find-file) (105 . ergoemacs-read-key--universal-argument) (44 . ergoemacs-close-current-buffer) (113 . ergoemacs-cut-line-or-region) (106 . ergoemacs-copy-line-or-region) (107 . ergoemacs-paste) (120 . undo-tree-redo) (121 . switch-to-buffer) (39 . undo) (112 keymap (106 . goto-char) (105 . goto-line) (67108911 keymap (105 . goto-line) (98 . next-error) (108 . previous-error) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693799)))) (98 . next-error) (108 . previous-error) (3 . move-to-column) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693831)))))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) apps-toggle programmer-dv)))) (menu keymap (99 keymap (99 . column-number-mode) (100 . toggle-debug-on-error) (101 . toggle-debug-on-error) (102 . auto-fill-mode) (108 . toggle-truncate-lines) (113 . toggle-debug-on-quit) (114 . read-only-mode) (18 . revert-buffer)))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) apps-apps programmer-dv)))) (menu keymap (98 keymap (97 . org-agenda) (65 . org-capture) (1 . org-capture) (99 . calc) (100 . dired-jump) (101 . eshell) (112 . powershell) (102 . ergoemacs-open-in-desktop) (103 . grep) (109 . magit-status) (111 . ergoemacs-open-in-external-app) (114 . R) (115 . shell) (116 . org-capture) (20 . org-agenda) (84 . org-agenda)))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) apps-punctuation programmer-dv)))) (menu keymap (116 keymap (114 . "#") (110 . "$") (118 . ":") (44 . "^") (111 . "*") (113 . "~") (99 . ergoemacs-smart-bracket) (116 . ergoemacs-smart-paren) (119 . ergoemacs-smart-curly) (104 . ergoemacs-smart-quote) (103 . ergoemacs-smart-apostrophe) (109 . "`") (102 . "?") (100 . "%") (98 . "@") (112 . ">") (117 . "_") (107 . "<") (46 . "+") (101 . "=") (106 . "-") (121 . "&") (105 . "|") (120 . "!")))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) copy programmer-dv)))) (27 keymap (113 . ergoemacs-cut-line-or-region) (106 . ergoemacs-copy-line-or-region) (107 . ergoemacs-paste) (75 . ergoemacs-paste-cycle) (74 . ergoemacs-copy-all) (81 . ergoemacs-cut-all) (34 . undo-tree-redo) (39 . undo)) (3 keymap (ergoemacs-timeout . ergoemacs-copy-line-or-region)) (24 keymap (ergoemacs-timeout . ergoemacs-cut-line-or-region)) (26 . undo) (33554458 . undo-tree-redo) (25 . undo-tree-redo)) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) execute programmer-dv)))) (27 keymap (97 . execute-extended-command) (65 . shell-command))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) fixed-newline programmer-dv)))) (27 keymap (13 . newline-and-indent))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) help programmer-dv)))) (8 keymap (39 . ergoemacs-describe-current-theme) (49 . describe-function) (50 . describe-variable) (51 . describe-key) (52 . describe-char) (53 . man) (55 . ergoemacs-lookup-google) (56 . ergoemacs-lookup-wikipedia) (57 . ergoemacs-lookup-word-definition) (96 . elisp-index-search) (111 . ergoemacs-where-is-old-binding) (122 . ergoemacs-clean) (26 . ergoemacs-clean-library)) (f1 keymap (39 . ergoemacs-describe-current-theme) (49 . describe-function) (50 . describe-variable) (51 . describe-key) (52 . describe-char) (53 . man) (55 . ergoemacs-lookup-google) (56 . ergoemacs-lookup-wikipedia) (57 . ergoemacs-lookup-word-definition) (96 . elisp-index-search) (111 . ergoemacs-where-is-old-binding))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) kill-line programmer-dv)))) (27 keymap (105 . kill-line) (73 . ergoemacs-kill-line-backward))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) misc programmer-dv)))) (27 keymap (108 . recenter-top-bottom) (120 . avy-goto-word-or-subword-1))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) move-bracket programmer-dv)))) (M-left . ergoemacs-backward-open-bracket) (27 keymap (72 . ergoemacs-backward-open-bracket) (78 . ergoemacs-forward-close-bracket) (left . ergoemacs-backward-open-bracket) (right . ergoemacs-forward-close-bracket)) (M-right . ergoemacs-forward-close-bracket)) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) move-buffer programmer-dv)))) (27 keymap (98 . ergoemacs-beginning-or-end-of-buffer) (66 . ergoemacs-end-or-beginning-of-buffer))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) move-char programmer-dv)))) (27 keymap (104 . backward-char) (110 . forward-char) (99 . previous-line) (116 . next-line) (8 . left-word) (14 . right-word) (3 . backward-paragraph) (20 . forward-paragraph) (32 . set-mark-command) (101 . delete-backward-char) (117 . delete-char) (9 . backward-paragraph))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) move-line programmer-dv)))) (27 keymap (100 . ergoemacs-beginning-of-line-or-what) (68 . ergoemacs-end-of-line-or-what))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) move-page programmer-dv)))) (27 keymap (3 . scroll-other-window-down) (20 . scroll-other-window) (67 . scroll-down-command) (84 . scroll-up-command))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) move-paragraph programmer-dv)))) (27 keymap (71 . ergoemacs-backward-block) (82 . ergoemacs-forward-block))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) move-word programmer-dv)))) (27 keymap (103 . backward-word) (114 . forward-word) (46 . backward-kill-word) (112 . kill-word))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) search programmer-dv)))) (27 keymap (102 . isearch-forward) (70 . isearch-backward) (40 . query-replace) (49 . query-replace-regexp))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) select-items programmer-dv)))) (27 keymap (33554464 . mark-paragraph) (41 . ergoemacs-extend-selection) (50 . ergoemacs-select-text-in-quote) (61 . ergoemacs-select-current-block) (42 . ergoemacs-select-current-line))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) switch programmer-dv)))) (27 keymap (111 . ergoemacs-move-cursor-next-pane) (79 . ergoemacs-move-cursor-previous-pane) (126 . ergoemacs-switch-to-previous-frame) (36 . ergoemacs-switch-to-next-frame) (123 . delete-other-windows) (91 . delete-window) (125 . split-window-below) (51 . split-window-right))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) text-transform programmer-dv)))) (27 keymap (45 . comment-dwim) (44 . ergoemacs-shrink-whitespaces) (90 . ergoemacs-toggle-camel-case) (122 . ergoemacs-toggle-letter-case) (121 . ergoemacs-call-keyword-completion) (89 . flyspell-auto-correct-word) (59 . ergoemacs-compact-uncompact-block))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693952) ergoemacs-undefined programmer-dv)))) (19 . ergoemacs-map-undefined) (67108911 . ergoemacs-map-undefined) (31 . ergoemacs-map-undefined) (25 . ergoemacs-map-undefined) (23 . ergoemacs-map-undefined) (11 . ergoemacs-map-undefined) (12 . ergoemacs-map-undefined) (4 . ergoemacs-map-undefined) (67108896 . ergoemacs-map-undefined) (14 . ergoemacs-map-undefined) (16 . ergoemacs-map-undefined) (6 . ergoemacs-map-undefined) (2 . ergoemacs-map-undefined) (5 . ergoemacs-map-undefined) (1 . ergoemacs-map-undefined) (22 . ergoemacs-map-undefined) (18 . ergoemacs-map-undefined) (24 keymap (104 . ergoemacs-map-undefined) (23 . ergoemacs-map-undefined) (19 . ergoemacs-map-undefined) (6 . ergoemacs-map-undefined) (117 . ergoemacs-map-undefined) (50 . ergoemacs-map-undefined) (51 . ergoemacs-map-undefined) (48 . ergoemacs-map-undefined) (49 . ergoemacs-map-undefined)) (27 keymap (121 . ergoemacs-map-undefined) (119 . ergoemacs-map-undefined) (33 . ergoemacs-map-undefined) (120 . ergoemacs-map-undefined) (60 . ergoemacs-map-undefined) (62 . ergoemacs-map-undefined) (22 . ergoemacs-map-undefined) (118 . ergoemacs-map-undefined) (125 . ergoemacs-map-undefined) (123 . ergoemacs-map-undefined) (100 . ergoemacs-map-undefined) (102 . ergoemacs-map-undefined) (98 . ergoemacs-map-undefined) (67108901 . ergoemacs-map-undefined) (37 . ergoemacs-map-undefined) (59 . ergoemacs-map-undefined))) keymap #^[nil nil keymap 
#^^[3 0 set-mark-command move-beginning-of-line backward-char mc/mmlte--up web-mode-fold-or-unfold move-end-of-line forward-char keyboard-quit mc/mark-previous-like-this indent-for-tab-command electric-newline-and-maybe-indent kill-line recenter-top-bottom newline mc/mark-next-like-this open-line previous-line quoted-insert isearch-backward isearch-forward mc/mmlte--down universal-argument scroll-up-command kill-region Control-X-prefix yank suspend-frame ESC-prefix toggle-input-method abort-recursive-edit nil show-subtree self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command delete-backward-char] #^^[1 0 #^^[2 0 
#^^[3 0 set-mark-command move-beginning-of-line backward-char mc/mmlte--up web-mode-fold-or-unfold move-end-of-line forward-char keyboard-quit mc/mark-previous-like-this indent-for-tab-command electric-newline-and-maybe-indent kill-line recenter-top-bottom newline mc/mark-next-like-this open-line previous-line quoted-insert isearch-backward isearch-forward mc/mmlte--down universal-argument scroll-up-command kill-region Control-X-prefix yank suspend-frame ESC-prefix toggle-input-method abort-recursive-edit nil show-subtree self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command delete-backward-char] self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command] self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command] self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command self-insert-command] (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693952))) (S-mouse-3 . kmacro-end-call-mouse) (C-mouse-5 . mwheel-scroll) (S-mouse-5 . mwheel-scroll) (mouse-5 . mwheel-scroll) (C-mouse-4 . mwheel-scroll) (S-mouse-4 . mwheel-scroll) (mouse-4 . mwheel-scroll) (XF86WakeUp . ignore) (tool-bar menu-item "tool bar" ignore :filter tool-bar-make-keymap) (f10 . menu-bar-open) (bottom-divider keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693796))) (down-mouse-1 . mouse-drag-mode-line)) (right-divider keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693795))) (down-mouse-1 . mouse-drag-vertical-line)) (vertical-line keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693794))) (mouse-1 . mouse-select-window) (down-mouse-1 . mouse-drag-vertical-line) (C-mouse-2 . mouse-split-window-vertically)) (vertical-scroll-bar keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693793))) (mouse-1 . scroll-bar-toolkit-scroll) (C-mouse-2 . mouse-split-window-vertically)) (header-line keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693792))) (mouse-1 . mouse-select-window) (down-mouse-1 . mouse-drag-header-line)) (mode-line keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693791))) (C-mouse-2 . mouse-split-window-horizontally) (mouse-3 . mouse-delete-window) (mouse-2 . mouse-delete-other-windows) (down-mouse-1 . mouse-drag-mode-line) (drag-mouse-1 . mouse-select-window) (mouse-1 . mouse-select-window)) (C-down-mouse-3 menu-item "Menu Bar" ignore :filter (lambda (_) (if (zerop (or (frame-parameter nil (quote menu-bar-lines)) 0)) (mouse-menu-bar-map) (mouse-menu-major-mode-map)))) (S-down-mouse-1 . mouse-appearance-menu) (C-down-mouse-1 . mouse-buffer-menu) (mouse-3 . mouse-save-then-kill) (mouse-2 . mouse-yank-primary) (triple-mouse-1 . mouse-set-point) (double-mouse-1 . mouse-set-point) (drag-mouse-1 . mouse-set-region) (mouse-1 . mouse-set-point) (down-mouse-1 . mouse-drag-region) (M-mouse-2 . mouse-yank-secondary) (M-mouse-3 . mouse-secondary-save-then-kill) (M-down-mouse-1 . mouse-drag-secondary) (M-drag-mouse-1 . mouse-set-secondary) (M-mouse-1 . mouse-start-secondary) (C-down-mouse-2 . facemenu-menu) (M-f10 . toggle-frame-maximized) (f11 . toggle-frame-fullscreen) (compose-last-chars . compose-last-chars) (f1 . help-command) (help . help-command) (f2 . 2C-command) (menu-bar keymap (file menu-item "File" (keymap (new-file menu-item "New" ergoemacs-new-empty-buffer) (make-frame menu-item "New Frame" make-frame-command :keys "Ctrl+X 5 2") (open-file menu-item "Open..." find-file :keys "Ctrl+O") (open-directory menu-item "Open Containing Folder" (keymap (open-directory-in-dired menu-item "In Dired" dired-jump :keys "Menu b d") (open-directory-in-desktop menu-item "In File Manager" ergoemacs-open-in-desktop :keys "Menu b f") (sep1 menu-item "--") (open-eshell-here menu-item "In Emacs Shell" ergoemacs-eshell-here) (open-shell-here menu-item "In Shell" ergoemacs-shell-here) nil) :filter ergoemacs-menu--filter) (kill-buffer menu-item "Close" ergoemacs-close-current-buffer :keys "Ctrl+W") (separator1 menu-item "--") (save-buffer menu-item "Save" save-buffer :keys "Ctrl+S") (write-file menu-item "Save As..." write-file :keys "Shift+Ctrl+S") (revert-buffer menu-item "Revert to Saved" revert-buffer :keys "Ctrl+R") (print-buffer menu-item "Print" ergoemacs-print-buffer-confirm :keys "Ctrl+P") (separator4 menu-item "--") (split-window-below menu-item "Split Window" split-window-below :keys "Alt+}") (split-window-right menu-item "Split Window right" split-window-right) (one-window menu-item "Unsplit Window" delete-other-windows :keys "Menu {") (separator5 menu-item "--") (execute-command menu-item "Execute Command" execute-extended-command :keys "Alt+A") (repeat-earlier-command menu-item "Repeat Earlier Command" repeat-complex-command :keys "Ctrl+X Alt+:") (separator6 menu-item "--") (exit-emacs menu-item "Quit" save-buffers-kill-emacs) "File") :filter ergoemacs-menu--filter) (edit menu-item "Edit" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693765))) (undo) (redo) (redo-sep menu-item "--") (cut menu-item "Cut" ergoemacs-cut-line-or-region :help "Delete text in Line/region and copy it to the clipboard" :enable (or (eq ergoemacs-handle-ctl-c-or-ctl-x (quote only-copy-cut)) (region-active-p)) :keys "Ctrl+X") (copy menu-item "Copy" ergoemacs-copy-line-or-region :help "Copy text in line/region to the clipboard" :enable (or (eq ergoemacs-handle-ctl-c-or-ctl-x (quote only-copy-cut)) (region-active-p)) :keys "Ctrl+C") (paste menu-item "Paste" ergoemacs-paste :help "Paste text from clipboard" :keys "Ctrl+V") (paste-from-menu menu-item "Paste from Kill Menu" yank-menu :enable (and (cdr yank-menu) (not buffer-read-only)) :help "Choose a string from the kill ring and paste it" :filter ergoemacs-menu--filter) (clear menu-item "Clear" delete-region :enable (and mark-active (not buffer-read-only)) :help "Delete the text in region between mark and current position") (mark-whole-buffer menu-item "Select All" mark-whole-buffer :help "Mark the whole buffer for a subsequent cut/copy" :keys "Ctrl+A") (separator-search menu-item "--") (blank-operations menu-item "Blank/Whitespace Operations" (keymap (trim-trailing-space menu-item "Trim Trailing Space" delete-trailing-whitespace :help "Trim Trailing spaces on each line") (separator-tabify menu-item "--") (tabify-region menu-item "Change multiple spaces to tabs (Tabify)" (lambda nil (interactive) (if mark-active (tabify (region-beginning) (region-end)) (tabify (point-min) (point-max)))) :help "Convert multiple spaces in the nonempty region to tabs when possible" :enable (not buffer-read-only)) (untabify menu-item "Change Tabs To Spaces (Untabify)" (lambda nil (interactive) (if mark-active (untabify (region-beginning) (region-end)) (untabify (point-min) (point-max)))) :help "Convert all tabs in the nonempty region or buffer to multiple spaces" :enable (not buffer-read-only))) :filter ergoemacs-menu--filter) (copy-to-clipboard menu-item "Copy File/Path to Clipboard" (keymap (copy-full-path menu-item "Current Full File Path to Clipboard" ergoemacs-copy-full-path :enable (buffer-file-name)) (copy-file-name menu-item "Current File Name to Clipboard" ergoemacs-copy-file-name :enable (buffer-file-name)) (copy-dir-path menu-item "Current Dir. Path to Clipboard" ergoemacs-copy-dir-path :enable (buffer-file-name))) :filter ergoemacs-menu--filter) (convert-case-to menu-item "Convert Case To" (keymap (capitalize-region menu-item "Capitalize" capitalize-region :help "Capitalize (initial caps) words in the nonempty region" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (downcase-region menu-item "downcase" downcase-region :help "Make words in the nonempty region lower-case" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning))) :keys "Ctrl+X Ctrl+L") (upcase-region menu-item "UPCASE" upcase-region :help "Make words in the nonempty region upper-case" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning))) :keys "Ctrl+X Ctrl+U") (toggle-case-region menu-item "Toggle Capitalization/Case" ergoemacs-toggle-letter-case :enable (not buffer-read-only) :keys "Alt+Z") (toggle-camel menu-item "Toggle CamelCase to camel_case" ergoemacs-toggle-camel-case :enable (not buffer-read-only) :keys "Shift+Alt+Z")) :filter ergoemacs-menu--filter) (eol-conversion menu-item "EOL Conversion" (keymap (windows menu-item "Windows/DOS" (lambda nil (interactive) (ergoemacs-eol-conversion (quote dos))) :enable (not (ergoemacs-eol-p (quote dos)))) (unix menu-item "Unix/OSX" (lambda nil (interactive) (ergoemacs-eol-conversion (quote unix))) :enable (not (ergoemacs-eol-p (quote unix)))) (mac menu-item "Old Mac" (lambda nil (interactive) (ergoemacs-eol-conversion (quote mac))) :enable (not (ergoemacs-eol-p (quote mac))))) :filter ergoemacs-menu--filter) (sort menu-item "Sort" (keymap (regexp-fields menu-item "Regexp Fields" sort-regexp-fields :help "Sort the nonempty region lexicographically" :enable (and last-kbd-macro (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (pages menu-item "Pages" sort-pages :help "Sort pages in the nonempty region alphabetically" :enable (and last-kbd-macro (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-paragraphs menu-item "Paragraphs" sort-paragraphs :help "Sort paragraphs in the nonempty region alphabetically" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-numeric-fields menu-item "Numeric Field" sort-numeric-fields :help "Sort lines in the nonempty region numerically by the Nth field" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-fields menu-item "Field" sort-fields :help "Sort lines in the nonempty region lexicographically by the Nth field" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-columns menu-item "Columns" sort-columns :help "Sort lines in the nonempty region alphabetically, by a certain range of columns" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (sort-lines menu-item "Lines" sort-lines :help "Sort lines in the nonempty region alphabetically" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning)))) (reverse-region menu-item "Reverse" reverse-region :help "Reverse the order of the selected lines" :enable (and (not buffer-read-only) mark-active (> (region-end) (region-beginning))))) :filter ergoemacs-menu--filter) (separator-bookmark menu-item "--") (fill menu-item "Fill" fill-region :enable (and mark-active (not buffer-read-only)) :help "Fill text in region to fit between left and right margin") (props menu-item "Text Properties" facemenu-menu :filter ergoemacs-menu--filter) "Edit") :filter ergoemacs-menu--filter) (search menu-item "Search" (keymap (isearch-forward menu-item "String Forward..." isearch-forward :help "Search forward for a string as you type it" :keys "Ctrl+F") (isearch-backward menu-item "    Backward..." isearch-backward :help "Search backwards for a string as you type it" :keys "Shift+Alt+F") (re-isearch-forward menu-item "Regexp Forward..." isearch-forward-regexp :help "Search forward for a regular expression as you type it" :keys "Ctrl+Alt+S") (re-isearch-backward menu-item "    Backward..." isearch-backward-regexp :help "Search backwards for a regular expression as you type it" :keys "Ctrl+Alt+R") (separator-repeat-search menu-item "--") (repeat-forward menu-item "Repeat Forward" nonincremental-repeat-search-forward :enable (or (and (memq menu-bar-last-search-type (quote (string word))) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search forward") (repeat-backward menu-item "    Repeat Backward" nonincremental-repeat-search-backward :enable (or (and (memq menu-bar-last-search-type (quote (string word))) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search forward") (separator-isearch menu-item "--") (i-search menu-item "String Search" (keymap (search-forward menu-item "Forward String..." search-forward) (search-backward menu-item "    Backward..." search-backward) (search-forward-regexp menu-item "Forward Regexp..." re-search-forward) (search-backward-regexp menu-item "    Backward..." re-search-backward) "String Search") :filter ergoemacs-menu--filter) (replace menu-item "Replace" (keymap (query-replace menu-item "Replace String..." query-replace :enable (not buffer-read-only) :help "Replace string interactively, ask about each occurrence" :keys "Alt+(") (query-replace-regexp menu-item "Replace Regexp..." query-replace-regexp :enable (not buffer-read-only) :help "Replace regular expression interactively, ask about each occurrence" :keys "Alt+1") (separator-replace-tags menu-item "--") (tags-repl menu-item "Replace in Tagged Files..." tags-query-replace :help "Interactively replace a regexp in all tagged files") (tags-repl-continue menu-item "Continue Replace" tags-loop-continue :help "Continue last tags replace operation") "Replace") :filter ergoemacs-menu--filter) (grep menu-item "Grep..." grep :enable (executable-find "grep") :keys "Menu b g") (occur menu-item "Occurrences in buffer..." occur :help "Show Lines in a buffer that match a regular expression" :keys "Alt+S o") (moccur menu-item "Occurrences in all buffers..." multi-occur :help "Show Lines in all buffers that match a regular expression") (separator-go-to menu-item "--") (goto menu-item "Go To" (keymap (go-to-line menu-item "Goto Line..." goto-line :help "Read a line number and go to that line" :keys "Ctrl+L") (separator-tags menu-item "--") (find-tag menu-item "Find Tag..." find-tag :help "Find definition of function or variable") (find-tag-otherw menu-item "Find Tag in Other Window..." find-tag-other-window :help "Find function/variable definition in another window" :keys "Ctrl+X 4 .") (next-tag menu-item "Find Next Tag" menu-bar-next-tag :enable (and (boundp (quote tags-location-ring)) (not (ring-empty-p tags-location-ring))) :help "Find next function/variable matching last tag name") (next-tag-otherw menu-item "Next Tag in Other Window" menu-bar-next-tag-other-window :enable (and (boundp (quote tags-location-ring)) (not (ring-empty-p tags-location-ring))) :help "Find next function/variable matching last tag name in another window") (apropos-tags menu-item "Tags Apropos..." tags-apropos :help "Find function/variables whose names match regexp") (separator-tag-file menu-item "--") (set-tags-name menu-item "Set Tags File Name..." visit-tags-table :help "Tell Tags commands which tag table file to use") "Go To") :filter ergoemacs-menu--filter) (bookmark menu-item "Bookmarks" menu-bar-bookmark-map :filter ergoemacs-menu--filter) "Search") :filter ergoemacs-menu--filter) (view menu-item "View" (keymap (menu-font-size menu-item "Zoom" (keymap (zoom-in menu-item "Zoom In" text-scale-increase :keys "Ctrl++") (zoom-out menu-item "Zoom Out" text-scale-decrease) (zoom-reset menu-item "Zoom Reset" ergoemacs-text-scale-normal-size :keys "Ctrl+0")) :filter ergoemacs-menu--filter) (menu-set-font menu-item "Set Default Font..." menu-set-font :visible (display-multi-font-p) :help "Select a default font") (\, (when (fboundp (quote customize-themes)) (quote (color-theme menu-item "Customize Color Themes" customize-themes :help "Customize Emacs Themes.")))) (separator-font-size menu-item "--") (highlight-current-line menu-item "Highlight Current Line" global-hl-line-mode :help "Have the cursor line always Highlighted" :button (:toggle and (boundp (quote global-hl-line-mode)) global-hl-line-mode)) (paren-mode menu-item "Highlight Matching Parentheses" show-paren-mode :button (:toggle . show-paren-mode)) (ruler-mode menu-item "Ruler Mode" ruler-mode :button (:toggle . ruler-mode)) (blink-cursor menu-item "Cursor Blink" blink-cursor-mode :button (:toggle . blink-cursor-mode)) (tabbar-mode menu-item "Tabbar" ergoemacs-menu-tabbar-toggle :button (:toggle and (boundp (quote tabbar-mode)) tabbar-mode)) (separator-speedbar menu-item "--") (showhide-speedbar menu-item "Speedbar" speedbar-frame-mode :help "Display a Speedbar quick-navigation frame" :button (:toggle and (boundp (quote speedbar-frame)) (frame-live-p speedbar-frame) (frame-visible-p speedbar-frame))) (linecolumn-separator "--") (line-number-mode menu-item "Line Numbers" line-number-mode :help "Show the current line number in the mode line" :button (:toggle and (default-boundp (quote line-number-mode)) (default-value (quote line-number-mode)))) (global-whitespace-mode menu-item "Show/Hide whitespaces" global-whitespace-mode :button (:toggle . global-whitespace-mode)) (global-linum-mode menu-item "Show/Hide line numbers in margin" global-linum-mode :button (:toggle . global-linum-mode))) :filter ergoemacs-menu--filter) (languages menu-item "Languages" (keymap (A menu-item "A" (keymap (ada-mode menu-item "Ada" ada-mode) (antlr-mode menu-item "Antlr" antlr-mode) (asm-mode menu-item "Asm" asm-mode) (autoconf-mode menu-item "Autoconf" autoconf-mode) (awk-mode menu-item "Awk" awk-mode)) :filter ergoemacs-menu--filter) (B menu-item "B" (keymap (bat-mode menu-item "Bat" bat-mode) (bibtex-mode menu-item "Bibtex" bibtex-mode) (bibtex-style-mode menu-item "Bibtex style" bibtex-style-mode) (bovine-grammar-mode menu-item "Bovine grammar" bovine-grammar-mode)) :filter ergoemacs-menu--filter) (C menu-item "C" (keymap (c-mode menu-item "C" c-mode) (c++-mode menu-item "C++" c++-mode) (change-log-mode menu-item "Change log" change-log-mode) (compilation-mode menu-item "Compilation" compilation-mode) (conf-unix-mode menu-item "Conf unix" conf-unix-mode) (csharp-mode menu-item "Csharp" csharp-mode) (css-mode menu-item "Css" css-mode)) :filter ergoemacs-menu--filter) (D menu-item "D" (keymap (d-mode menu-item "D" d-mode) (dcl-mode menu-item "Dcl" dcl-mode) (delphi-mode menu-item "Delphi" delphi-mode) (dns-mode menu-item "Dns" dns-mode) (doctex-mode menu-item "Doctex" doctex-mode) (dsssl-mode menu-item "Dsssl" dsssl-mode)) :filter ergoemacs-menu--filter) (emacs-lisp-mode menu-item "Emacs lisp" emacs-lisp-mode) (F menu-item "F" (keymap (f90-mode menu-item "F90" f90-mode) (fish-mode menu-item "Fish" fish-mode) (fortran-mode menu-item "Fortran" fortran-mode)) :filter ergoemacs-menu--filter) (G menu-item "G" (keymap (gdb-script-mode menu-item "Gdb script" gdb-script-mode) (ghc-core-mode menu-item "Ghc core" ghc-core-mode) (ghci-script-mode menu-item "Ghci script" ghci-script-mode) (glsl-mode menu-item "Glsl" glsl-mode) (go-mode menu-item "Go" go-mode) (groovy-mode menu-item "Groovy" groovy-mode)) :filter ergoemacs-menu--filter) (H menu-item "H" (keymap (haskell-mode menu-item "Haskell" haskell-mode) (haskell-cabal-mode menu-item "Haskell cabal" haskell-cabal-mode) (html-mode menu-item "Html" html-mode)) :filter ergoemacs-menu--filter) (I menu-item "I" (keymap (icon-mode menu-item "Icon" icon-mode) (idl-mode menu-item "Idl" idl-mode) (idlwave-mode menu-item "Idlwave" idlwave-mode)) :filter ergoemacs-menu--filter) (J menu-item "J" (keymap (java-mode menu-item "Java" java-mode) (javascript-mode menu-item "Javascript" javascript-mode) (js2-mode menu-item "Js2" js2-mode) (json-mode menu-item "Json" json-mode)) :filter ergoemacs-menu--filter) (L menu-item "L" (keymap (latex-mode menu-item "Latex" latex-mode) (ld-script-mode menu-item "Ld script" ld-script-mode) (less-css-mode menu-item "Less css" less-css-mode) (lisp-mode menu-item "Lisp" lisp-mode) (literate-haskell-mode menu-item "Literate haskell" literate-haskell-mode)) :filter ergoemacs-menu--filter) (M menu-item "M" (keymap (m4-mode menu-item "M4" m4-mode) (makefile-automake-mode menu-item "Makefile automake" makefile-automake-mode) (makefile-gmake-mode menu-item "Makefile gmake" makefile-gmake-mode) (makefile-imake-mode menu-item "Makefile imake" makefile-imake-mode) (makefile-makepp-mode menu-item "Makefile makepp" makefile-makepp-mode) (markdown-mode menu-item "Markdown" markdown-mode) (matlab-mode menu-item "Matlab" matlab-mode) (metafont-mode menu-item "Metafont" metafont-mode) (metapost-mode menu-item "Metapost" metapost-mode) (mixal-mode menu-item "Mixal" mixal-mode) (m2-mode menu-item "Modula-2" m2-mode)) :filter ergoemacs-menu--filter) (nroff-mode menu-item "Nroff" nroff-mode) (O menu-item "O" (keymap (objc-mode menu-item "Objc" objc-mode) (octave-mode menu-item "Octave" octave-mode) (org-mode menu-item "Org" org-mode)) :filter ergoemacs-menu--filter) (P menu-item "P" (keymap (pascal-mode menu-item "Pascal" pascal-mode) (perl-mode menu-item "Perl" perl-mode) (pike-mode menu-item "Pike" pike-mode) (prolog-mode menu-item "Prolog" prolog-mode) (ps-mode menu-item "Ps" ps-mode) (python-mode menu-item "Python" python-mode)) :filter ergoemacs-menu--filter) (R menu-item "R" (keymap (rst-mode menu-item "Rst" rst-mode) (ruby-mode menu-item "Ruby" ruby-mode) (rust-mode menu-item "Rust" rust-mode)) :filter ergoemacs-menu--filter) (S menu-item "S" (keymap (scala-mode menu-item "Scala" scala-mode) (scheme-mode menu-item "Scheme" scheme-mode) (scss-mode menu-item "Scss" scss-mode) (conf-mode menu-item "Settings" conf-mode) (sgml-mode menu-item "Sgml" sgml-mode) (sh-mode menu-item "Sh" sh-mode) (shell-script-mode menu-item "Shell script" shell-script-mode) (sieve-mode menu-item "Sieve" sieve-mode) (simula-mode menu-item "Simula" simula-mode) (snmp-mode menu-item "SKMP MIBs" snmp-mode) (snmpv2-mode menu-item "SNMPv2 MIBs" snmpv2-mode) (sql-mode menu-item "Sql" sql-mode) (srecode-template-mode menu-item "Srecode template" srecode-template-mode)) :filter ergoemacs-menu--filter) (T menu-item "T" (keymap (tcl-mode menu-item "Tcl" tcl-mode) (tex-mode menu-item "Tex" tex-mode) (texinfo-mode menu-item "Texinfo" texinfo-mode) (text-mode menu-item "Text" text-mode) (toml-mode menu-item "Toml" toml-mode) (typescript-mode menu-item "Typescript" typescript-mode)) :filter ergoemacs-menu--filter) (V menu-item "V" (keymap (vera-mode menu-item "Vera" vera-mode) (verilog-mode menu-item "Verilog" verilog-mode) (vhdl-mode menu-item "Vhdl" vhdl-mode)) :filter ergoemacs-menu--filter) (W menu-item "W" (keymap (web-mode menu-item "Web" web-mode) (wisent-grammar-mode menu-item "Wisent grammar" wisent-grammar-mode)) :filter ergoemacs-menu--filter) (xml-mode menu-item "Xml" xml-mode) (separator1 menu-item "--") (package menu-item "Manage Packages" list-packages)) :filter ergoemacs-menu--filter) (options menu-item "Options" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693946))) (transient-mark-mode menu-item "Highlight Active Region" transient-mark-mode :enable (not cua-mode) :help "Make text in active region stand out in color (Transient Mark mode)" :button (:toggle and (default-boundp (quote transient-mark-mode)) (default-value (quote transient-mark-mode)))) (highlight-paren-mode menu-item "Highlight Matching Parentheses" show-paren-mode :help "Highlight matching/mismatched parentheses at cursor (Show Paren mode)" :button (:toggle and (default-boundp (quote show-paren-mode)) (default-value (quote show-paren-mode)))) (highlight-separator "--") (line-wrapping menu-item "Line Wrapping in This Buffer" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693855))) (window-wrap menu-item "Wrap at Window Edge" #[nil "\203 \300\303!\210\304
\205 \305\306!\207" [visual-line-mode word-wrap truncate-lines 0 nil toggle-truncate-lines -1] 2 nil nil] :help "Wrap long lines at window edge" :button (:radio and (null truncate-lines) (not (truncated-partial-width-window-p)) (not word-wrap)) :visible (menu-bar-menu-frame-live-and-visible-p) :enable (not (truncated-partial-width-window-p))) (truncate menu-item "Truncate Long Lines" #[nil "\203 \300\302!\210\303\304\305!\207" [visual-line-mode word-wrap 0 nil toggle-truncate-lines 1] 2 nil nil] :help "Truncate long lines at window edge" :button (:radio or truncate-lines (truncated-partial-width-window-p)) :visible (menu-bar-menu-frame-live-and-visible-p) :enable (not (truncated-partial-width-window-p))) (word-wrap menu-item "Word Wrap (Visual Line mode)" #[nil "\204 \300\301!\210\302\303!\207" [visual-line-mode 1 message "Visual-Line mode enabled"] 2 nil nil] :help "Wrap long lines at word boundaries" :button (:radio and (null truncate-lines) (not (truncated-partial-width-window-p)) word-wrap) :visible (menu-bar-menu-frame-live-and-visible-p)) "Line Wrapping") :filter ergoemacs-menu--filter) (case-fold-search menu-item "Ignore Case for Search" toggle-case-fold-search :help "Ignore letter-case in search commands" :button (:toggle and (default-boundp (quote case-fold-search)) (default-value (quote case-fold-search)))) (cua-emulation-mode menu-item "Shift movement mark region (CUA)" cua-mode :visible (and (boundp (quote cua-enable-cua-keys)) (not cua-enable-cua-keys)) :help "Use shifted movement keys to set and extend the region" :button (:toggle and (default-boundp (quote cua-mode)) (default-value (quote cua-mode)))) (cua-mode menu-item "Use CUA Keys (Cut/Paste with C-x/C-c/C-v)" cua-mode :visible (or (not (boundp (quote cua-enable-cua-keys))) cua-enable-cua-keys) :help "Use C-z/C-x/C-c/C-v keys for undo/cut/copy/paste" :button (:toggle and (default-boundp (quote cua-mode)) (default-value (quote cua-mode)))) (edit-options-separator "--") (uniquify menu-item "Use Directory Names in Buffer Names" toggle-uniquify-buffer-names :help "Uniquify buffer names by adding parent directory names" :button (:toggle and (default-boundp (quote uniquify-buffer-name-style)) (default-value (quote uniquify-buffer-name-style)))) (save-place menu-item "Save Place in Files between Sessions" toggle-save-place-globally :help "Visit files of previous session when restarting Emacs" :button (:toggle and (default-boundp (quote save-place)) (default-value (quote save-place)))) (cursor-separator "--") (blink-cursor-mode menu-item "Blink Cursor" blink-cursor-mode :help "Whether the cursor blinks (Blink Cursor mode)" :button (:toggle and (default-boundp (quote blink-cursor-mode)) (default-value (quote blink-cursor-mode)))) (debugger-separator "--") (debug-on-error menu-item "Enter Debugger on Error" toggle-debug-on-error :help "Enter Lisp debugger when an error is signaled" :button (:toggle and (default-boundp (quote debug-on-error)) (default-value (quote debug-on-error))) :keys "Menu c d") (debug-on-quit menu-item "Enter Debugger on Quit/C-g" toggle-debug-on-quit :help "Enter Lisp debugger when C-g is pressed" :button (:toggle and (default-boundp (quote debug-on-quit)) (default-value (quote debug-on-quit))) :keys "Menu c q") (mule-separator "--") (mule menu-item "Multilingual Environment" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693861))) (set-language-environment menu-item "Set Language Environment" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693852))) (Default menu-item "Default" setup-specified-language-environment) "Set Language Environment" (Chinese menu-item "Chinese" setup-chinese-environment-map :filter ergoemacs-menu--filter) (Cyrillic menu-item "Cyrillic" setup-cyrillic-environment-map :filter ergoemacs-menu--filter) (Indian menu-item "Indian" setup-indian-environment-map :filter ergoemacs-menu--filter) (Sinhala "Sinhala" . setup-specified-language-environment) (English "English" . setup-specified-language-environment) (ASCII "ASCII" . setup-specified-language-environment) (Ethiopic "Ethiopic" . setup-specified-language-environment) (European menu-item "European" setup-european-environment-map :filter ergoemacs-menu--filter) (Turkish "Turkish" . setup-specified-language-environment) (Greek "Greek" . setup-specified-language-environment) (Hebrew "Hebrew" . setup-specified-language-environment) (Windows-1255 "Windows-1255" . setup-specified-language-environment) (Japanese "Japanese" . setup-specified-language-environment) (Korean "Korean" . setup-specified-language-environment) (Lao "Lao" . setup-specified-language-environment) (TaiViet "TaiViet" . setup-specified-language-environment) (Thai "Thai" . setup-specified-language-environment) (Tibetan "Tibetan" . setup-specified-language-environment) (Vietnamese "Vietnamese" . setup-specified-language-environment) (IPA "IPA" . setup-specified-language-environment) (Arabic "Arabic" . setup-specified-language-environment) (Persian "Persian" . setup-specified-language-environment) (UTF-8 "UTF-8" . setup-specified-language-environment) (Khmer "Khmer" . setup-specified-language-environment) (Burmese "Burmese" . setup-specified-language-environment) (Cham "Cham" . setup-specified-language-environment)) :filter ergoemacs-menu--filter) (separator-mule "--") (toggle-input-method menu-item "Toggle Input Method" toggle-input-method :keys "Ctrl+\\") (set-input-method menu-item "Select Input Method..." set-input-method :keys "Ctrl+X Enter Ctrl+\\") (separator-input-method "--") (set-various-coding-system menu-item "Set Coding Systems" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693903))) (universal-coding-system-argument menu-item "For Next Command" universal-coding-system-argument :help "Coding system to be used by next command" :keys "Ctrl+X Enter c") (separator-1 "--") (set-buffer-file-coding-system menu-item "For Saving This Buffer" set-buffer-file-coding-system :help "How to encode this buffer when saved" :keys "Ctrl+X Enter f") (revert-buffer-with-coding-system menu-item "For Reverting This File Now" revert-buffer-with-coding-system :enable buffer-file-name :help "Revisit this file immediately using specified coding system" :keys "Ctrl+X Enter r") (set-file-name-coding-system menu-item "For File Name" set-file-name-coding-system :help "How to decode/encode file names" :keys "Ctrl+X Enter Shift+F") (separator-2 "--") (set-keyboard-coding-system menu-item "For Keyboard" set-keyboard-coding-system :help "How to decode keyboard input" :keys "Ctrl+X Enter k") (set-terminal-coding-system menu-item "For Terminal" set-terminal-coding-system :enable (null (memq initial-window-system (quote (x w32 ns)))) :help "How to encode terminal output" :keys "Ctrl+X Enter t") (separator-3 "--") (set-selection-coding-system menu-item "For X Selections/Clipboard" set-selection-coding-system :visible (display-selections-p) :help "How to en/decode data to/from selection/clipboard" :keys "Ctrl+X Enter x") (set-next-selection-coding-system menu-item "For Next X Selection" set-next-selection-coding-system :visible (display-selections-p) :help "How to en/decode next selection/clipboard operation" :keys "Ctrl+X Enter Shift+X") (set-buffer-process-coding-system menu-item "For I/O with Subprocess" set-buffer-process-coding-system :visible (fboundp (quote start-process)) :enable (get-buffer-process (current-buffer)) :help "How to en/decode I/O from/to subprocess connected to this buffer" :keys "Ctrl+X Enter p") "Set Coding System") :enable (default-value (quote enable-multibyte-characters)) :filter ergoemacs-menu--filter) (view-hello-file menu-item "Show Multilingual Sample Text" view-hello-file :enable (file-readable-p (expand-file-name "HELLO" data-directory)) :help "Demonstrate various character sets" :keys "F1 h") (separator-coding-system "--") (describe-language-environment menu-item "Describe Language Environment" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693894))) (Default menu-item "Default" describe-specified-language-support) "Describe Language Environment" (Chinese menu-item "Chinese" describe-chinese-environment-map :filter ergoemacs-menu--filter) (Cyrillic menu-item "Cyrillic" describe-cyrillic-environment-map :filter ergoemacs-menu--filter) (Indian menu-item "Indian" describe-indian-environment-map :filter ergoemacs-menu--filter) (Sinhala "Sinhala" . describe-specified-language-support) (English "English" . describe-specified-language-support) (ASCII "ASCII" . describe-specified-language-support) (Ethiopic "Ethiopic" . describe-specified-language-support) (European menu-item "European" describe-european-environment-map :filter ergoemacs-menu--filter) (Turkish "Turkish" . describe-specified-language-support) (Greek "Greek" . describe-specified-language-support) (Hebrew "Hebrew" . describe-specified-language-support) (Windows-1255 "Windows-1255" . describe-specified-language-support) (Japanese "Japanese" . describe-specified-language-support) (Korean "Korean" . describe-specified-language-support) (Lao "Lao" . describe-specified-language-support) (TaiViet "TaiViet" . describe-specified-language-support) (Thai "Thai" . describe-specified-language-support) (Tibetan "Tibetan" . describe-specified-language-support) (Vietnamese "Vietnamese" . describe-specified-language-support) (IPA "IPA" . describe-specified-language-support) (Arabic "Arabic" . describe-specified-language-support) (Persian "Persian" . describe-specified-language-support) (UTF-8 "UTF-8" . describe-specified-language-support) (Khmer "Khmer" . describe-specified-language-support) (Burmese "Burmese" . describe-specified-language-support)) :help "Show multilingual settings for a specific language" :filter ergoemacs-menu--filter) (describe-input-method menu-item "Describe Input Method" describe-input-method :keys "F1 Shift+I") (describe-coding-system menu-item "Describe Coding System..." describe-coding-system :keys "F1 Shift+C") (list-character-sets menu-item "List Character Sets" list-character-sets :help "Show table of available character sets") (mule-diag menu-item "Show All Multilingual Settings" mule-diag :help "Display multilingual environment settings") "Mule (Multilingual Environment)") :filter ergoemacs-menu--filter) (showhide-separator "--") (showhide menu-item "Show/Hide" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693862))) (showhide-tool-bar menu-item "Tool-bar" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693858))) (showhide-tool-bar-none menu-item "None" menu-bar-showhide-tool-bar-menu-customize-disable :help "Turn tool-bar off" :visible (display-graphic-p) :button (:radio eq tool-bar-mode nil)) (showhide-tool-bar-top menu-item "On the Top" menu-bar-showhide-tool-bar-menu-customize-enable-top :help "Tool-bar at the top" :visible (display-graphic-p) :button (:radio and tool-bar-mode (eq (frame-parameter (menu-bar-frame-for-menubar) (quote tool-bar-position)) (quote top)))) (showhide-tool-bar-bottom menu-item "On the Bottom" menu-bar-showhide-tool-bar-menu-customize-enable-bottom :help "Tool-bar at the bottom" :visible (display-graphic-p) :button (:radio and tool-bar-mode (eq (frame-parameter (menu-bar-frame-for-menubar) (quote tool-bar-position)) (quote bottom)))) (showhide-tool-bar-right menu-item "On the Right" menu-bar-showhide-tool-bar-menu-customize-enable-right :help "Tool-bar at the right side" :visible (display-graphic-p) :button (:radio and tool-bar-mode (eq (frame-parameter (menu-bar-frame-for-menubar) (quote tool-bar-position)) (quote right)))) (showhide-tool-bar-left menu-item "On the Left" menu-bar-showhide-tool-bar-menu-customize-enable-left :help "Tool-bar at the left side" :visible (display-graphic-p) :button (:radio and tool-bar-mode (eq (frame-parameter (menu-bar-frame-for-menubar) (quote tool-bar-position)) (quote left)))) "Tool-bar") :visible (display-graphic-p) :filter ergoemacs-menu--filter) (menu-bar-mode menu-item "Menu-bar" toggle-menu-bar-mode-from-frame :help "Turn menu-bar on/off" :button (:toggle menu-bar-positive-p (frame-parameter (menu-bar-frame-for-menubar) (quote menu-bar-lines)))) (showhide-tooltip-mode menu-item "Tooltips" tooltip-mode :help "Turn tooltips on/off" :visible (and (display-graphic-p) (fboundp (quote x-show-tip))) :button (:toggle . tooltip-mode)) (showhide-scroll-bar menu-item "Scroll-bar" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693907))) (none menu-item "None" menu-bar-no-scroll-bar :help "Turn off scroll-bar" :visible (display-graphic-p) :button (:radio eq (cdr (assq (quote vertical-scroll-bars) (frame-parameters))) nil)) (left menu-item "On the Left" menu-bar-left-scroll-bar :help "Scroll-bar on the left side" :visible (display-graphic-p) :button (:radio eq (cdr (assq (quote vertical-scroll-bars) (frame-parameters))) (quote left))) (right menu-item "On the Right" menu-bar-right-scroll-bar :help "Scroll-bar on the right side" :visible (display-graphic-p) :button (:radio eq (cdr (assq (quote vertical-scroll-bars) (frame-parameters))) (quote right))) "Scroll-bar") :visible (display-graphic-p) :filter ergoemacs-menu--filter) (showhide-fringe menu-item "Fringe" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693914))) (none menu-item "None" menu-bar-showhide-fringe-menu-customize-disable :help "Turn off fringe" :visible (display-graphic-p) :button (:radio eq fringe-mode 0)) (left menu-item "On the Left" menu-bar-showhide-fringe-menu-customize-left :help "Fringe only on the left side" :visible (display-graphic-p) :button (:radio equal fringe-mode (quote (nil . 0)))) (right menu-item "On the Right" menu-bar-showhide-fringe-menu-customize-right :help "Fringe only on the right side" :visible (display-graphic-p) :button (:radio equal fringe-mode (quote (0)))) (default menu-item "Default" menu-bar-showhide-fringe-menu-customize-reset :help "Default width fringe on both left and right side" :visible (display-graphic-p) :button (:radio eq fringe-mode nil)) (customize menu-item "Customize Fringe" menu-bar-showhide-fringe-menu-customize :help "Detailed customization of fringe" :visible (display-graphic-p)) (indicate-empty-lines menu-item "Empty Line Indicators" toggle-indicate-empty-lines :help "Indicate trailing empty lines in fringe, globally" :button (:toggle and (default-boundp (quote indicate-empty-lines)) (default-value (quote indicate-empty-lines)))) (showhide-fringe-ind menu-item "Buffer Boundaries" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693848))) (none menu-item "No Indicators" menu-bar-showhide-fringe-ind-none :help "Hide all buffer boundary indicators and arrows" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries nil)) (left menu-item "In Left Fringe" menu-bar-showhide-fringe-ind-left :help "Show buffer boundaries and arrows in left fringe" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries (quote left))) (right menu-item "In Right Fringe" menu-bar-showhide-fringe-ind-right :help "Show buffer boundaries and arrows in right fringe" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries (quote right))) (box menu-item "Opposite, No Arrows" menu-bar-showhide-fringe-ind-box :help "Show top/bottom indicators in opposite fringes, no arrows" :visible (display-graphic-p) :button (:radio equal indicate-buffer-boundaries (quote ((top . left) (bottom . right))))) (mixed menu-item "Opposite, Arrows Right" menu-bar-showhide-fringe-ind-mixed :help "Show top/bottom indicators in opposite fringes, arrows in right" :visible (display-graphic-p) :button (:radio equal indicate-buffer-boundaries (quote ((t . right) (top . left))))) (customize menu-item "Other (Customize)" menu-bar-showhide-fringe-ind-customize :help "Additional choices available through Custom buffer" :visible (display-graphic-p) :button (:radio not (member indicate-buffer-boundaries (quote (nil left right ((top . left) (bottom . right)) ((t . right) (top . left))))))) "Buffer boundaries") :visible (display-graphic-p) :help "Indicate buffer boundaries in fringe" :filter ergoemacs-menu--filter) "Fringe") :visible (display-graphic-p) :filter ergoemacs-menu--filter) (showhide-speedbar menu-item "Speedbar" speedbar-frame-mode :help "Display a Speedbar quick-navigation frame" :button (:toggle and (boundp (quote speedbar-frame)) (frame-live-p (symbol-value (quote speedbar-frame))) (frame-visible-p (symbol-value (quote speedbar-frame))))) (datetime-separator "--") (showhide-date-time menu-item "Time, Load and Mail" display-time-mode :help "Display time, system load averages and mail status in mode line" :button (:toggle and (default-boundp (quote display-time-mode)) (default-value (quote display-time-mode)))) (showhide-battery menu-item "Battery Status" display-battery-mode :help "Display battery status information in mode line" :button (:toggle and (default-boundp (quote display-battery-mode)) (default-value (quote display-battery-mode)))) (linecolumn-separator "--") (size-indication-mode menu-item "Size Indication" size-indication-mode :help "Show the size of the buffer in the mode line" :button (:toggle and (default-boundp (quote size-indication-mode)) (default-value (quote size-indication-mode)))) (line-number-mode menu-item "Line Numbers" line-number-mode :help "Show the current line number in the mode line" :button (:toggle and (default-boundp (quote line-number-mode)) (default-value (quote line-number-mode)))) (column-number-mode menu-item "Column Numbers" column-number-mode :help "Show the current column number in the mode line" :button (:toggle and (default-boundp (quote column-number-mode)) (default-value (quote column-number-mode))) :keys "Menu c c") "Show/Hide") :filter ergoemacs-menu--filter) (menu-system-font menu-item "Use System Font" toggle-use-system-font :help "Use the monospaced font defined by the system" :button (:toggle and (default-boundp (quote font-use-system-font)) (default-value (quote font-use-system-font)))) (menu-set-font menu-item "Set Default Font..." menu-set-font :visible (display-multi-font-p) :help "Select a default font") (custom-separator "--") (save menu-item "Save Options" menu-bar-options-save :help "Save options set from the menu above") (package menu-item "Manage Emacs Packages" package-list-packages :help "Install or uninstall additional Emacs packages") (customize menu-item "Customize Emacs" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693917))) (customize-themes menu-item "Custom Themes" customize-themes :help "Choose a pre-defined customization theme") (customize menu-item "Top-level Customization Group" customize :help "The master group called `Emacs'") (customize-browse menu-item "Browse Customization Groups" customize-browse :help "Browse all customization groups") (separator-3 "--") (customize-saved menu-item "Saved Options" customize-saved :help "Customize previously saved options") (customize-changed-options menu-item "New Options..." customize-changed-options :help "Options added or changed in recent Emacs versions") (separator-2 "--") (customize-option menu-item "Specific Option..." customize-option :help "Customize value of specific option") (customize-face menu-item "Specific Face..." customize-face :help "Customize attributes of specific face") (customize-group menu-item "Specific Group..." customize-group :help "Customize settings of specific group") (separator-1 "--") (customize-apropos menu-item "All Settings Matching..." customize-apropos :help "Browse customizable settings matching a regexp or word list") (customize-apropos-options menu-item "Options Matching..." customize-apropos-options :help "Browse options matching a regexp or word list") (customize-apropos-faces menu-item "Faces Matching..." customize-apropos-faces :help "Browse faces matching a regexp or word list") "Customize") :filter ergoemacs-menu--filter) "Options") :filter ergoemacs-menu--filter) (mouse-1 . tmm-menubar-mouse) (tools menu-item "Tools" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693912))) (grep menu-item "Search Files (Grep)..." grep :help "Search files for strings or regexps (with Grep)" :keys "Menu b g") (compile menu-item "Compile..." compile :help "Invoke compiler or Make, view compilation errors") (shell menu-item "Shell Command..." shell-command :help "Invoke a shell command and catch its output" :keys "Shift+Alt+A") (shell-on-region menu-item "Shell Command on Region..." shell-command-on-region :enable mark-active :help "Pass marked region to a shell command" :keys "Alt+|") (gdb menu-item "Debugger (GDB)..." gdb :help "Debug a program from within Emacs with GDB") (ede menu-item "Project Support (EDE)" global-ede-mode :help "Toggle the Emacs Development Environment (Global EDE mode)" :button (:toggle bound-and-true-p global-ede-mode)) (semantic menu-item "Source Code Parsers (Semantic)" semantic-mode :help "Toggle automatic parsing in source code buffers (Semantic mode)" :button (:toggle bound-and-true-p semantic-mode)) (separator-prog "--") (Syntax\ Checking menu-item "Syntax Checking" (keymap "Syntax Checking" (Enable\ on-the-fly\ syntax\ checking menu-item "Enable on-the-fly syntax checking" flycheck-mode :enable (or flycheck-mode (flycheck-get-checker-for-buffer)) :button (:toggle . flycheck-mode)) (Check\ current\ buffer menu-item "Check current buffer" flycheck-buffer :enable flycheck-mode) (Clear\ errors\ in\ buffer menu-item "Clear errors in buffer" flycheck-clear) (nil menu-item "---") (Go\ to\ next\ error menu-item "Go to next error" flycheck-next-error :enable flycheck-mode) (Go\ to\ previous\ error menu-item "Go to previous error" flycheck-previous-error :enable flycheck-mode) (Show\ all\ errors menu-item "Show all errors" flycheck-list-errors :enable flycheck-mode) (nil-7 menu-item "---") (Copy\ messages\ at\ point menu-item "Copy messages at point" flycheck-copy-errors-as-kill :enable (flycheck-overlays-at (point))) (nil-9 menu-item "---") (Select\ syntax\ checker menu-item "Select syntax checker" flycheck-select-checker :enable flycheck-mode) (Disable\ syntax\ checker menu-item "Disable syntax checker" flycheck-disable-checker :enable flycheck-mode) (Set\ executable\ of\ syntax\ checker menu-item "Set executable of syntax checker" flycheck-set-checker-executable :enable flycheck-mode) (nil-13 menu-item "---") (Describe\ syntax\ checker menu-item "Describe syntax checker" flycheck-describe-checker) (Show\ Flycheck\ version menu-item "Show Flycheck version" flycheck-version) (Read\ the\ Flycheck\ manual menu-item "Read the Flycheck manual" flycheck-info)) :filter ergoemacs-menu--filter) (spell menu-item "Spell Checking" ispell-menu-map :filter ergoemacs-menu--filter) (separator-spell "--") (compare menu-item "Compare (Ediff)" menu-bar-ediff-menu :filter ergoemacs-menu--filter) (ediff-merge menu-item "Merge" menu-bar-ediff-merge-menu :filter ergoemacs-menu--filter) (epatch menu-item "Apply Patch" menu-bar-epatch-menu :filter ergoemacs-menu--filter) (separator-compare "--") (vc menu-item "Version Control" vc-menu-map :filter (lambda (bind) (ergoemacs-menu--filter bind (quote vc-menu-map-filter) (quote nil)))) (separator-vc "--") (gnus menu-item "Read Net News" gnus :help "Read network news groups") (rmail menu-item "Read Mail" menu-bar-read-mail :visible (and read-mail-command (not (eq read-mail-command (quote ignore)))) :help "Read your mail") (compose-mail menu-item "Compose New Mail" compose-mail :visible (and mail-user-agent (not (eq mail-user-agent (quote ignore)))) :help "Start writing a new mail message" :keys "Ctrl+X m") (directory-search menu-item "Directory Search" eudc-tools-menu :filter ergoemacs-menu--filter) (browse-web menu-item "Browse the Web..." browse-web) (separator-net "--") (calendar menu-item "Calendar" calendar :help "Invoke the Emacs built-in calendar") (calc menu-item "Programmable Calculator" calc :help "Invoke the Emacs built-in full scientific calculator" :keys "Menu b c") (simple-calculator menu-item "Simple Calculator" calculator :help "Invoke the Emacs built-in quick calculator") (separator-encryption-decryption "--") (encryption-decryption menu-item "Encryption/Decryption" (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693888))) (decrypt-file menu-item "Decrypt File..." epa-decrypt-file :help "Decrypt a file") (encrypt-file menu-item "Encrypt File..." epa-encrypt-file :help "Encrypt a file") (verify-file menu-item "Verify File..." epa-verify-file :help "Verify digital signature of a file") (sign-file menu-item "Sign File..." epa-sign-file :help "Create digital signature of a file") (separator-file "--") (decrypt-region menu-item "Decrypt Region" epa-decrypt-region :help "Decrypt the current region") (encrypt-region menu-item "Encrypt Region" epa-encrypt-region :help "Encrypt the current region") (verify-region menu-item "Verify Region" epa-verify-region :help "Verify digital signature of the current region") (sign-region menu-item "Sign Region" epa-sign-region :help "Create digital signature of the current region") (separator-keys "--") (list-keys menu-item "List Keys" epa-list-keys :help "Browse your public keyring") (import-keys menu-item "Import Keys from File..." epa-import-keys :help "Import public keys from a file") (import-keys-region menu-item "Import Keys from Region" epa-import-keys-region :help "Import public keys from the current region") (export-keys menu-item "Export Keys" epa-export-keys :help "Export public keys to a file") (insert-keys menu-item "Insert Keys" epa-insert-keys :help "Insert public keys after the current point") "Encryption/Decryption") :filter ergoemacs-menu--filter) (separator-games "--") (games) "Tools") :filter ergoemacs-menu--filter) (buffer menu-item "Buffers" (keymap "Buffers" (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693763))) [("*Help*  %" (nil) lambda nil (interactive) (funcall menu-bar-select-buffer-function "*Help*")) ("*Packages*  %" (nil) lambda nil (interactive) (funcall menu-bar-select-buffer-function "*Packages*")) ("*scratch*  " (nil) lambda nil (interactive) (funcall menu-bar-select-buffer-function "*scratch*")) ("*Messages*  *%" (nil) lambda nil (interactive) (funcall menu-bar-select-buffer-function "*Messages*")) ("*Compile-Log*  *%" (nil) lambda nil (interactive) (funcall menu-bar-select-buffer-function "*Compile-Log*")) ("*Warnings*  *%" (nil) lambda nil (interactive) (funcall menu-bar-select-buffer-function "*Warnings*"))] (frames-separator "--") (frames menu-item "Frames" (keymap "Select Frame" [("emacs@Asus-Arch" (nil) lambda nil (interactive) (menu-bar-select-frame "#<dead frame emacs@Asus-Arch 0x3df8108>")) ("F1" (nil) lambda nil (interactive) (menu-bar-select-frame "#<frame F1 0xbd29e8>"))]) :filter ergoemacs-menu--filter) (command-separator "--") (next-buffer menu-item "Next Buffer" next-buffer :help "Switch to the \"next\" buffer in a cyclic order" :keys "XF86Forward") (previous-buffer menu-item "Previous Buffer" previous-buffer :help "Switch to the \"previous\" buffer in a cyclic order" :keys "XF86Back") (select-named-buffer menu-item "Select Named Buffer..." switch-to-buffer :help "Prompt for a buffer name, and select that buffer in the current window" :keys "⎈Ctrl+X b") (list-all-buffers menu-item "List All Buffers" list-buffers :help "Pop up a window listing all Emacs buffers")) :filter ergoemacs-menu--filter) (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693790))) (help-menu menu-item "?" (keymap (whoops menu-item "Whoops!?" (keymap (what-did-i-do menu-item "What did I do !?" view-lossage :help "Display last 100 input keystrokes" :keys "F1 l") (exit-recurive-edit menu-item "Exit Recursive Editing" top-level :help "Exit all Recursive editing Levels") (keyboard-quit menu-item "Cancel Current Action" keyboard-quit :help "Quit any operation in progress" :keys "Ctrl+G")) :filter ergoemacs-menu--filter) (help-for-help menu-item "Help for Help..." help-for-help :help "Emacs main help command" :keys "F1 ?") (separator-1 menu-item "--") (apropos menu-item "Apropos (Find matching)" (keymap (commands menu-item "Commands..." apropos-command :help "Find commands matching a regular expression" :keys "F1 a") (user-options menu-item "User Options..." ergoemacs-apropos-user-options :help "Find user options matching a regular expression") (all-vars menu-item "All Variables..." apropos-variable :help "Find a variable that matches a regular expression") (var-values menu-item "Variable Values..." apropos-value :help "Find variable values that matches a regular expression.") (symbols menu-item "Symbols..." apropos :help "Find functions/variables that match a regular expression.") (symbol-desc menu-item "Symbol Descriptions (Doc)..." apropos-documentation :help "Find functions/variables whose documentation match a regular expression" :keys "F1 d") (tags menu-item "Tags..." tags-apropos :help "Find Tags Matching Regular Expression")) :filter ergoemacs-menu--filter) (describe menu-item "Describe" (keymap (function menu-item "Function..." describe-function :help "Describe command or other function") (variable menu-item "Variable..." describe-variable :help "Describe an emacs user option or other variable.") (face menu-item "Face..." describe-face :help "Describe a face") (key menu-item "Key..." describe-key :help "Describe a command bound to a key") (input menu-item "Input Method..." describe-input-method :keys "F1 Shift+I") (coding menu-item "Coding System..." describe-coding-system :keys "F1 Shift+C") (separator-ergoemacs-describe "--") (theme-component menu-item "Ergoemacs Component" describe-ergoemacs-component) (theme menu-item "Ergoemacs Theme" describe-ergoemacs-theme) (layout menu-item "Ergoemacs Layout" describe-ergoemacs-layout) (separator-curr-modes menu-item "--") (curr-major-mode menu-item "Current Major Mode" ergoemacs-describe-major-mode :help "Describe this buffers major and minor modes.") (curr-modes menu-item "Current Modes" (lambda nil (interactive) (call-interactively (quote describe-mode))) :help "Describe this buffers major and minor modes.") (curr-keys menu-item "Current Key Bindings" describe-bindings :help "List all key-bindings with brief descriptions." :keys "F1 b") (curr-syntax menu-item "Current Syntax Table" describe-syntax :help "Describe the syntax specifications in the current syntax table" :keys "F1 s")) :filter ergoemacs-menu--filter) (learn-more menu-item "Learn More" (keymap (emacs menu-item "Emacs" (keymap (manual menu-item "Manual" info-emacs-manual :keys "F1 r") (command-desc menu-item "    Command Description..." Info-goto-emacs-command-node :help "Show emacs manual section about a command" :keys "F1 Shift+F") (index menu-item "    Index..." emacs-index-search :help "Lookup topic in Emacs manual") (glossary menu-item "    Glossary" search-emacs-glossary) (separator-emacs menu-item "--") (faq menu-item "FAQ" view-emacs-FAQ :help "Read frequently asked questions about Emacs (with answers)" :keys "F1 Ctrl+F") (whats-new menu-item "What's new" view-emacs-news :help "New features of emacs" :keys "F1 n") (known-problems menu-item "Known problems" view-emacs-problems :help "Known problems of this Emacs version." :keys "F1 Ctrl+P")) :filter ergoemacs-menu--filter) (emacs-lisp menu-item "Emacs Lisp" (keymap (xah-lisp menu-item "Xah Emacs Lisp Tutorial" (lambda nil (interactive) (browse-url ergoemacs-xah-emacs-lisp-tutorial-url)) :help "Read Emacs Lisp Tutorial") (intro menu-item "Intro to Elisp" (lambda nil (interactive) (info "eintr")) :help "Read introduction to Emacs Lisp") (manual menu-item "Manual" (lambda nil (interactive) (info "elisp")) :help "Read Emacs Lisp reference Manual") (index menu-item "    Index..." elisp-index-search :help "Lookup topic in emacs lisp manual") (elisp-separator menu-item "--") (locate-library menu-item "Locate Library" locate-library :help "Locate lisp library")) :filter ergoemacs-menu--filter) (last-accessed-info menu-item "Last Accessed Manual (Info)" info :help "Open Info, at the last doc place visited." :keys "Ctrl+/") (info-dir menu-item "All Manuals (`Info')" Info-directory :help "Open a list of all the info docs.") (man-dir menu-item "Unix Man Pages..." woman :help "Unix Manual entries (with WoMan)")) :filter ergoemacs-menu--filter) (separator-2 menu-item "--") (eroemacs-current-keybindings menu-item "Current Ergoemacs Keybindings" ergoemacs-describe-current-theme) (ergoemacs-mode-web-page menu-item "Ergoemacs-mode web-page" (lambda nil (interactive) (browse-url ergoemacs-mode-web-page-url)) :help "Online help about ergoemacs.") (separator-3 menu-item "--") (send-bug-report menu-item "Send Emacs Bug Report" report-emacs-bug :help "Report an emacs bug.") (emacs-web-page menu-item "Emacs Web Page" (lambda nil (interactive) (browse-url "http://www.gnu.org/software/emacs/")) :help "Emacs Web Page") (separator-licence menu-item "--") (license menu-item "License" describe-copying :keys "F1 Ctrl+C") "?") :filter ergoemacs-menu--filter)) (f4 . kmacro-end-or-call-macro) (f3 . kmacro-start-macro-or-insert-counter) (C-M-end . end-of-defun) (C-M-home . beginning-of-defun) (C-M-down . down-list) (C-M-up . backward-up-list) (C-M-right . forward-sexp) (C-M-left . backward-sexp) (S-delete . kill-region) (C-backspace . backward-kill-word) (C-delete . kill-word) (C-left . left-word) (C-right . right-word) (M-left . left-word) (M-right . right-word) (mouse-movement . ignore) (deletechar . delete-forward-char) (deleteline . kill-line) (insertline . open-line) (open . find-file) (again . repeat-complex-command) (redo . repeat-complex-command) (undo . undo) (S-insertchar . yank) (C-insertchar . kill-ring-save) (insertchar . overwrite-mode) (S-insert . yank) (C-insert . kill-ring-save) (insert . overwrite-mode) (execute . execute-extended-command) (M-begin . beginning-of-buffer-other-window) (begin . beginning-of-buffer) (M-end . end-of-buffer-other-window) (C-end . end-of-buffer) (end . move-end-of-line) (M-prior . scroll-other-window-down) (M-next . scroll-other-window) (C-next . scroll-left) (C-prior . scroll-right) (C-down . forward-paragraph) (C-up . backward-paragraph) (next . scroll-up-command) (prior . scroll-down-command) (down . next-line) (right . right-char) (up . previous-line) (left . left-char) (M-home . beginning-of-buffer-other-window) (C-home . beginning-of-buffer) (home . move-beginning-of-line) (C-S-backspace . kill-whole-line) (find . search-forward) (menu . execute-extended-command) (67108896 . set-mark-command) (67108909 . hide-subtree) (67108921 . digit-argument) (67108920 . digit-argument) (67108919 . digit-argument) (67108918 . digit-argument) (67108917 . digit-argument) (67108916 . digit-argument) (67108915 . digit-argument) (67108914 . digit-argument) (67108913 . digit-argument) (67108912 . digit-argument) (XF86Back . previous-buffer) (XF86Forward . next-buffer) (67108911 . undo) (make-frame-visible . ignore-event) (iconify-frame . ignore-event) (delete-frame . handle-delete-frame) (select-window . handle-select-window) (switch-frame . handle-switch-frame)) ergoemacs-map--undefined-keys-bb8708fddf73cdb9e45c9af4f0cfbf09 ([134217787] [24 49] [24 48] [24 51] [24 50] [18] [134217765] [201326629] [134217826] [134217830] [134217828] [134217851] [134217853] [134217846] [22] [134217750] [1] [5] [2] [6] [16] [14] [67108896] [4] [134217790] [134217788] [12] [11] [134217848] [134217761] [23] [134217847] [25] [134217849] [31] [67108911] [24 117] [24 6] [19] [24 19] [24 23] [24 104]) lisp-interaction-mode-852438d026c018c4307b916406f98c62-composed-key-bb8708fddf73cdb9e45c9af4f0cfbf09 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693948) ergoemacs-mode programmer-dv)))) (ergoemacs-remap keymap (delete-backward-char . backward-delete-char-untabify) (complete-symbol . completion-at-point) (electric-newline-and-maybe-indent . eval-print-last-sexp)) (27 keymap (9 . backward-paragraph) (101 . backward-delete-char-untabify)))) nil (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693948) ergoemacs-mode programmer-dv)))) (ergoemacs-remap keymap (delete-backward-char . backward-delete-char-untabify) (complete-symbol . completion-at-point) (electric-newline-and-maybe-indent . eval-print-last-sexp)) (27 keymap (9 . backward-paragraph) (101 . backward-delete-char-untabify)))) lisp-interaction-mode-852438d026c018c4307b916406f98c62-unbound-keymap-bb8708fddf73cdb9e45c9af4f0cfbf09 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693948) ergoemacs-unbound programmer-dv))))) :minor-mode-map-alist:compilation-minor-mode-composed-key-bb8708fddf73cdb9e45c9af4f0cfbf09 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693782) ergoemacs-mode programmer-dv)))) (ergoemacs-remap keymap (delete-backward-char . scroll-down-command) (mouse-yank-primary . compile-goto-error) (newline . compile-goto-error) (open-line . compilation-display-error) (split-window-horizontally . compilation-previous-file) (forward-paragraph . compilation-next-file)) (15 . find-file) (27 keymap (101 . scroll-down-command) (110 . forward-char) (20 . compilation-next-file) (112 . kill-word) (125 . split-window-below) (123 . delete-other-windows)))) nil (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693782) ergoemacs-mode programmer-dv)))) (ergoemacs-remap keymap (delete-backward-char . scroll-down-command) (mouse-yank-primary . compile-goto-error) (newline . compile-goto-error) (open-line . compilation-display-error) (split-window-horizontally . compilation-previous-file) (forward-paragraph . compilation-next-file)) (15 . find-file) (27 keymap (101 . scroll-down-command) (110 . forward-char) (20 . compilation-next-file) (112 . kill-word) (125 . split-window-below) (123 . delete-other-windows)))) :minor-mode-map-alist:compilation-minor-mode-unbound-keymap-bb8708fddf73cdb9e45c9af4f0cfbf09 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693782) ergoemacs-unbound programmer-dv))))) :minor-mode-map-alist:compilation-shell-minor-mode-composed-key-bb8708fddf73cdb9e45c9af4f0cfbf09 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693781) ergoemacs-mode programmer-dv)))) (ergoemacs-remap keymap (forward-list . compilation-next-error) (backward-list . compilation-previous-error) (split-window-horizontally . compilation-previous-file) (forward-paragraph . compilation-next-file)) (27 keymap (13 . newline-and-indent) (14 . right-word) (20 . compilation-next-file) (125 . split-window-below) (123 . delete-other-windows)))) nil (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693781) ergoemacs-mode programmer-dv)))) (ergoemacs-remap keymap (forward-list . compilation-next-error) (backward-list . compilation-previous-error) (split-window-horizontally . compilation-previous-file) (forward-paragraph . compilation-next-file)) (27 keymap (13 . newline-and-indent) (14 . right-word) (20 . compilation-next-file) (125 . split-window-below) (123 . delete-other-windows)))) :minor-mode-map-alist:compilation-shell-minor-mode-unbound-keymap-bb8708fddf73cdb9e45c9af4f0cfbf09 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693781) ergoemacs-unbound programmer-dv))))) :minor-mode-map-alist:ido-mode-composed-key-bb8708fddf73cdb9e45c9af4f0cfbf09 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693780) ergoemacs-mode programmer-dv)))))) nil (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693780) ergoemacs-mode programmer-dv)))))) :minor-mode-map-alist:ido-mode-unbound-keymap-bb8708fddf73cdb9e45c9af4f0cfbf09 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693780) ergoemacs-unbound programmer-dv))))) :minor-mode-map-alist:electric-pair-mode-composed-key-bb8708fddf73cdb9e45c9af4f0cfbf09 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693779) ergoemacs-mode programmer-dv)))) (ergoemacs-remap keymap (delete-backward-char menu-item "" electric-pair-delete-pair :filter #[257 "`Sf\301f\205 \302!\211@\211A@\262\2058 \211\2058 \303>\2058 \211=\2058 \304!\2033  \2024 \2058 \207" [electric-pair-delete-adjacent-pairs nil electric-pair-syntax-info (40 34 36) functionp] 8 "

(fn CMD)"])))) nil (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693779) ergoemacs-mode programmer-dv)))) (ergoemacs-remap keymap (delete-backward-char menu-item "" electric-pair-delete-pair :filter #[257 "`Sf\301f\205 \302!\211@\211A@\262\2058 \211\2058 \303>\2058 \211=\2058 \304!\2033  \2024 \2058 \207" [electric-pair-delete-adjacent-pairs nil electric-pair-syntax-info (40 34 36) functionp] 8 "

(fn CMD)"])))) :minor-mode-map-alist:electric-pair-mode-unbound-keymap-bb8708fddf73cdb9e45c9af4f0cfbf09 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693779) ergoemacs-unbound programmer-dv))))) :minor-mode-map-alist:semantic-mru-bookmark-mode-composed-key-bb8708fddf73cdb9e45c9af4f0cfbf09 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693778) ergoemacs-mode programmer-dv)))))) nil (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693778) ergoemacs-mode programmer-dv)))))) :minor-mode-map-alist:semantic-mru-bookmark-mode-unbound-keymap-bb8708fddf73cdb9e45c9af4f0cfbf09 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693778) ergoemacs-unbound programmer-dv))))) :minor-mode-map-alist:semantic-highlight-func-mode-composed-key-bb8708fddf73cdb9e45c9af4f0cfbf09 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693777) ergoemacs-mode programmer-dv)))) (ergoemacs-remap keymap (mouse-save-then-kill . semantic-highlight-func-menu)) (S-down-mouse-1 . semantic-highlight-func-menu))) nil (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693777) ergoemacs-mode programmer-dv)))) (ergoemacs-remap keymap (mouse-save-then-kill . semantic-highlight-func-menu)) (S-down-mouse-1 . semantic-highlight-func-menu))) :minor-mode-map-alist:semantic-highlight-func-mode-unbound-keymap-bb8708fddf73cdb9e45c9af4f0cfbf09 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693777) ergoemacs-unbound programmer-dv))))) :minor-mode-map-alist:semantic-stickyfunc-mode-composed-key-bb8708fddf73cdb9e45c9af4f0cfbf09 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693776) ergoemacs-mode programmer-dv)))) (ergoemacs-remap keymap (mouse-drag-header-line . semantic-stickyfunc-menu)))) nil (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693776) ergoemacs-mode programmer-dv)))) (ergoemacs-remap keymap (mouse-drag-header-line . semantic-stickyfunc-menu)))) :minor-mode-map-alist:semantic-stickyfunc-mode-unbound-keymap-bb8708fddf73cdb9e45c9af4f0cfbf09 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693776) ergoemacs-unbound programmer-dv))))) :minor-mode-map-alist:semantic-show-unmatched-syntax-mode-composed-key-bb8708fddf73cdb9e45c9af4f0cfbf09 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693775) ergoemacs-mode programmer-dv)))))) nil (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693775) ergoemacs-mode programmer-dv)))))) :minor-mode-map-alist:semantic-show-unmatched-syntax-mode-unbound-keymap-bb8708fddf73cdb9e45c9af4f0cfbf09 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693775) ergoemacs-unbound programmer-dv))))) :minor-mode-map-alist:semantic-mode-composed-key-bb8708fddf73cdb9e45c9af4f0cfbf09 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693774) ergoemacs-mode programmer-dv)))))) nil (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693774) ergoemacs-mode programmer-dv)))))) :minor-mode-map-alist:semantic-mode-unbound-keymap-bb8708fddf73cdb9e45c9af4f0cfbf09 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693774) ergoemacs-unbound programmer-dv))))) :minor-mode-map-alist:flycheck-mode-composed-key-bb8708fddf73cdb9e45c9af4f0cfbf09 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693773) ergoemacs-mode programmer-dv)))))) nil (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693773) ergoemacs-mode programmer-dv)))))) :minor-mode-map-alist:flycheck-mode-unbound-keymap-bb8708fddf73cdb9e45c9af4f0cfbf09 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693773) ergoemacs-unbound programmer-dv))))) :minor-mode-map-alist:yas-minor-mode-composed-key-bb8708fddf73cdb9e45c9af4f0cfbf09 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693772) ergoemacs-mode programmer-dv)))) (ergoemacs-remap keymap (indent-for-tab-command)))) nil (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693772) ergoemacs-mode programmer-dv)))) (ergoemacs-remap keymap (indent-for-tab-command)))) :minor-mode-map-alist:yas-minor-mode-unbound-keymap-bb8708fddf73cdb9e45c9af4f0cfbf09 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693772) ergoemacs-unbound programmer-dv))))) :minor-mode-map-alist:2C-mode-composed-key-bb8708fddf73cdb9e45c9af4f0cfbf09 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693771) ergoemacs-mode programmer-dv)))) (ergoemacs-remap keymap (enlarge-window-horizontally . 2C-enlarge-window-horizontally) (shrink-window-horizontally . 2C-shrink-window-horizontally)) (f2 . ergoemacs-cut-line-or-region))) nil (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693771) ergoemacs-mode programmer-dv)))) (ergoemacs-remap keymap (enlarge-window-horizontally . 2C-enlarge-window-horizontally) (shrink-window-horizontally . 2C-shrink-window-horizontally)) (f2 . ergoemacs-cut-line-or-region))) :minor-mode-map-alist:2C-mode-unbound-keymap-bb8708fddf73cdb9e45c9af4f0cfbf09 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693771) ergoemacs-unbound programmer-dv))))) :minor-mode-map-alist:undo-tree-visualizer-selection-mode-composed-key-bb8708fddf73cdb9e45c9af4f0cfbf09 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693851) ergoemacs-mode programmer-dv)))) (ergoemacs-remap keymap (previous-line . undo-tree-visualizer-select-previous) (next-line . undo-tree-visualizer-select-next) (mc/mark-next-like-this . undo-tree-visualizer-select-next) (scroll-up-command . #[0 "\300\301!\207" [undo-tree-visualizer-select-next 10] 2 "

(fn)" nil]) (scroll-down-command . #[0 "\300\301!\207" [undo-tree-visualizer-select-previous 10] 2 "

(fn)" nil]) (right-char . undo-tree-visualizer-select-right) (forward-char . undo-tree-visualizer-select-right) (left-char . undo-tree-visualizer-select-left) (backward-char . undo-tree-visualizer-select-left) (newline . undo-tree-visualizer-set) (mouse-set-point . undo-tree-visualizer-mouse-select)) (2 . ergoemacs-map-undefined) (16 . ergoemacs-print-buffer-confirm) (6 . isearch-forward) (14 . ergoemacs-new-empty-buffer) (f12 . undo-tree-visualizer-select-next) (f11 . undo-tree-visualizer-select-previous) (27 keymap (116 . undo-tree-visualizer-select-next) (99 . undo-tree-visualizer-select-previous) (110 . undo-tree-visualizer-select-right) (104 . undo-tree-visualizer-select-left)))) nil (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693851) ergoemacs-mode programmer-dv)))) (ergoemacs-remap keymap (previous-line . undo-tree-visualizer-select-previous) (next-line . undo-tree-visualizer-select-next) (mc/mark-next-like-this . undo-tree-visualizer-select-next) (scroll-up-command . #[0 "\300\301!\207" [undo-tree-visualizer-select-next 10] 2 "

(fn)" nil]) (scroll-down-command . #[0 "\300\301!\207" [undo-tree-visualizer-select-previous 10] 2 "

(fn)" nil]) (right-char . undo-tree-visualizer-select-right) (forward-char . undo-tree-visualizer-select-right) (left-char . undo-tree-visualizer-select-left) (backward-char . undo-tree-visualizer-select-left) (newline . undo-tree-visualizer-set) (mouse-set-point . undo-tree-visualizer-mouse-select)) (2 . ergoemacs-map-undefined) (16 . ergoemacs-print-buffer-confirm) (6 . isearch-forward) (14 . ergoemacs-new-empty-buffer) (f12 . undo-tree-visualizer-select-next) (f11 . undo-tree-visualizer-select-previous) (27 keymap (116 . undo-tree-visualizer-select-next) (99 . undo-tree-visualizer-select-previous) (110 . undo-tree-visualizer-select-right) (104 . undo-tree-visualizer-select-left)))) :minor-mode-map-alist:undo-tree-visualizer-selection-mode-unbound-keymap-bb8708fddf73cdb9e45c9af4f0cfbf09 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693851) ergoemacs-unbound programmer-dv))))) :minor-mode-map-alist:undo-tree-mode-composed-key-bb8708fddf73cdb9e45c9af4f0cfbf09 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key (undo-tree-map standard-fixed programmer-dv)))) (67108927) (27 keymap (56))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693914) ergoemacs-mode programmer-dv)))) (ergoemacs-remap keymap (undo . undo-tree-undo)) (24 keymap (117 . ergoemacs-map-undefined)) (67108927 . info) (67108911 . info))) nil (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693914) ergoemacs-mode programmer-dv)))) (ergoemacs-remap keymap (undo . undo-tree-undo)) (24 keymap (117 . ergoemacs-map-undefined)) (67108927 . info) (67108911 . info))) :minor-mode-map-alist:undo-tree-mode-unbound-keymap-bb8708fddf73cdb9e45c9af4f0cfbf09 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693914) ergoemacs-unbound programmer-dv))))) :minor-mode-map-alist:visual-line-mode-composed-key-bb8708fddf73cdb9e45c9af4f0cfbf09 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693873) ergoemacs-mode programmer-dv)))))) nil (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693873) ergoemacs-mode programmer-dv)))))) :minor-mode-map-alist:visual-line-mode-unbound-keymap-bb8708fddf73cdb9e45c9af4f0cfbf09 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693873) ergoemacs-unbound programmer-dv))))) ergoemacs-translate--parent-map-composed-key-bb8708fddf73cdb9e45c9af4f0cfbf09 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key (ergoemacs-translate--parent-map apps-swap programmer-dv)))) (menu . ergoemacs-command-loop--swap-translation)) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key (ergoemacs-translate--parent-map f2-edit programmer-dv)))) (f2 . ergoemacs-command-loop--force-universal-argument)) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key (ergoemacs-translate--parent-map backspace-del-seq programmer-dv)))) (127 . ergoemacs-command-loop--force-undo-last)) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((2305843009213693950) ergoemacs-mode programmer-dv)))))) nil (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((2305843009213693950) ergoemacs-mode programmer-dv)))))) ergoemacs-translate--parent-map-unbound-keymap-bb8708fddf73cdb9e45c9af4f0cfbf09 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((2305843009213693950) ergoemacs-unbound programmer-dv))))) package-menu-mode-852438d026c018c4307b916406f98c62-composed-key-bb8708fddf73cdb9e45c9af4f0cfbf09 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693824) ergoemacs-mode programmer-dv)))) (ergoemacs-remap keymap (indent-for-tab-command . forward-button) (complete-symbol . backward-button) (mouse-yank-primary . mouse-select-window) (newline . package-menu-describe-package) (delete-backward-char . package-menu-backup-unmark)) (27 keymap (9 . backward-paragraph) (101 . package-menu-backup-unmark)))) nil (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693824) ergoemacs-mode programmer-dv)))) (ergoemacs-remap keymap (indent-for-tab-command . forward-button) (complete-symbol . backward-button) (mouse-yank-primary . mouse-select-window) (newline . package-menu-describe-package) (delete-backward-char . package-menu-backup-unmark)) (27 keymap (9 . backward-paragraph) (101 . package-menu-backup-unmark)))) package-menu-mode-852438d026c018c4307b916406f98c62-unbound-keymap-bb8708fddf73cdb9e45c9af4f0cfbf09 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693824) ergoemacs-unbound programmer-dv))))) :minor-mode-map-alist:mml-mode-composed-key-bb8708fddf73cdb9e45c9af4f0cfbf09 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693766) ergoemacs-mode programmer-dv)))))) nil (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693766) ergoemacs-mode programmer-dv)))))) :minor-mode-map-alist:mml-mode-unbound-keymap-bb8708fddf73cdb9e45c9af4f0cfbf09 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693766) ergoemacs-unbound programmer-dv))))) isearch-mode-map-composed-key-bb8708fddf73cdb9e45c9af4f0cfbf09 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key (isearch-mode-map quit programmer-dv)))) (escape . isearch-abort)) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key (isearch-mode-map standard-fixed programmer-dv)))) (33554438 . isearch-occur) (27 keymap (21 . isearch-occur) (106 . isearch-yank-word-or-char) (107 . ergoemacs-paste)) (S-insert . ergoemacs-paste) (33554454 . ergoemacs-paste-cycle) (3 . isearch-yank-word-or-char) (22 . ergoemacs-paste)) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key (isearch-mode-map fn-keys programmer-dv)))) (S-f3 . isearch-toggle-regexp) (f11 . isearch-ring-retreat) (f12 . isearch-ring-advance) (S-f11 . isearch-ring-advance) (S-f12 . isearch-ring-retreat)) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key (isearch-mode-map copy programmer-dv)))) (3 . isearch-yank-word-or-char) (27 keymap (106 . isearch-yank-word-or-char) (107 . ergoemacs-paste) (75 . ergoemacs-paste-cycle)) (22 . ergoemacs-paste) (33554454 . ergoemacs-paste-cycle)) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key (isearch-mode-map text-transform programmer-dv)))) (27 keymap (90 . isearch-toggle-regexp) (122 . isearch-toggle-case-fold))) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693866) ergoemacs-mode programmer-dv)))) (ergoemacs-remap keymap (help-for-help . isearch-help-for-help) (describe-bindings . isearch-describe-bindings) (describe-key . isearch-describe-key) (describe-mode . isearch-describe-mode) (help-quit . help-quit) (handle-switch-frame) (handle-delete-frame) (ignore) (mouse-yank-primary . isearch-mouse-2) (delete-backward-char . isearch-delete-char) (toggle-input-method . isearch-toggle-input-method) (isearch-forward-regexp . isearch-repeat-forward) (isearch-backward-regexp . isearch-repeat-backward) (keyboard-escape-quit . isearch-cancel) (append-next-kill . isearch-del-char) (isearch-forward-word . isearch-toggle-word) (isearch-forward-symbol . isearch-toggle-symbol) (occur . isearch-occur) (highlight-regexp . isearch-highlight-regexp) (yank-pop . isearch-yank-pop) (complete-symbol . isearch-complete) (capitalize-word . isearch-toggle-case-fold) (move-to-window-line-top-bottom . isearch-toggle-regexp) (forward-sentence . isearch-edit-string) (query-replace . isearch-query-replace) (query-replace-regexp . isearch-query-replace-regexp) (yank . isearch-yank-kill) (insert-char . isearch-char-by-name) (kill-region . isearch-yank-word-or-char) (isearch-forward . isearch-repeat-forward) (isearch-backward . isearch-repeat-backward) (quoted-insert . isearch-quote-char) (newline . isearch-exit) (keyboard-quit . isearch-abort)) (escape . isearch-abort) (33554438 . isearch-occur) (67108910 . isearch-abort) (6 . isearch-repeat-forward) (f8 keymap (95 . isearch-toggle-symbol) (119 . isearch-toggle-word) (104 keymap (114 . isearch-highlight-regexp)) (111 . isearch-occur)) (menu keymap (100 keymap (113 . help-quit) (109 . isearch-describe-mode) (98 . isearch-describe-bindings) (63 . isearch-help-for-help) (f1 . isearch-help-for-help) (help . isearch-help-for-help) (8 . isearch-help-for-help)) (40 . isearch-query-replace)) (27 keymap (101 . isearch-delete-char) (49 . isearch-query-replace-regexp) (40 . isearch-query-replace) (70 . isearch-repeat-backward) (102 . isearch-repeat-forward)))) ([201326629] [134217765] [18] [19] [23] [25] [134217737] [27 9] [134217827] [27 99] [134217838] [27 110] [134217840] [27 112] [134217842] [27 114] [134217849] [27 121]) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693866) ergoemacs-mode programmer-dv)))) (ergoemacs-remap keymap (help-for-help . isearch-help-for-help) (describe-bindings . isearch-describe-bindings) (describe-key . isearch-describe-key) (describe-mode . isearch-describe-mode) (help-quit . help-quit) (handle-switch-frame) (handle-delete-frame) (ignore) (mouse-yank-primary . isearch-mouse-2) (delete-backward-char . isearch-delete-char) (toggle-input-method . isearch-toggle-input-method) (isearch-forward-regexp . isearch-repeat-forward) (isearch-backward-regexp . isearch-repeat-backward) (keyboard-escape-quit . isearch-cancel) (append-next-kill . isearch-del-char) (isearch-forward-word . isearch-toggle-word) (isearch-forward-symbol . isearch-toggle-symbol) (occur . isearch-occur) (highlight-regexp . isearch-highlight-regexp) (yank-pop . isearch-yank-pop) (complete-symbol . isearch-complete) (capitalize-word . isearch-toggle-case-fold) (move-to-window-line-top-bottom . isearch-toggle-regexp) (forward-sentence . isearch-edit-string) (query-replace . isearch-query-replace) (query-replace-regexp . isearch-query-replace-regexp) (yank . isearch-yank-kill) (insert-char . isearch-char-by-name) (kill-region . isearch-yank-word-or-char) (isearch-forward . isearch-repeat-forward) (isearch-backward . isearch-repeat-backward) (quoted-insert . isearch-quote-char) (newline . isearch-exit) (keyboard-quit . isearch-abort)) (escape . isearch-abort) (33554438 . isearch-occur) (67108910 . isearch-abort) (6 . isearch-repeat-forward) (f8 keymap (95 . isearch-toggle-symbol) (119 . isearch-toggle-word) (104 keymap (114 . isearch-highlight-regexp)) (111 . isearch-occur)) (menu keymap (100 keymap (113 . help-quit) (109 . isearch-describe-mode) (98 . isearch-describe-bindings) (63 . isearch-help-for-help) (f1 . isearch-help-for-help) (help . isearch-help-for-help) (8 . isearch-help-for-help)) (40 . isearch-query-replace)) (27 keymap (101 . isearch-delete-char) (49 . isearch-query-replace-regexp) (40 . isearch-query-replace) (70 . isearch-repeat-backward) (102 . isearch-repeat-forward)))) isearch-mode-map-unbound-keymap-bb8708fddf73cdb9e45c9af4f0cfbf09 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693866) ergoemacs-unbound programmer-dv)))) (25) (23) (19) (18) (27 keymap (121) (114) (112) (110) (99) (9) (37) (67108901))) button-map-composed-key-bb8708fddf73cdb9e45c9af4f0cfbf09 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693931) ergoemacs-mode programmer-dv)))) (ergoemacs-remap keymap (newline . push-button) (mouse-yank-primary . push-button) (mouse-delete-other-windows . push-button)))) nil (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693931) ergoemacs-mode programmer-dv)))) (ergoemacs-remap keymap (newline . push-button) (mouse-yank-primary . push-button) (mouse-delete-other-windows . push-button)))) button-map-unbound-keymap-bb8708fddf73cdb9e45c9af4f0cfbf09 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693931) ergoemacs-unbound programmer-dv)))) keymap (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693931) ergoemacs-mode programmer-dv)))) (ergoemacs-remap keymap (newline . push-button) (mouse-yank-primary . push-button) (mouse-delete-other-windows . push-button))) keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693931))) (header-line keymap (mouse-2 . push-button)) (mode-line keymap (mouse-2 . push-button)) (mouse-2 . push-button) (13 . push-button)) help-mode-852438d026c018c4307b916406f98c62-composed-key-bb8708fddf73cdb9e45c9af4f0cfbf09 (((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key (help-mode-map backspace-is-back programmer-dv)))) (backspace . help-go-back) (S-backspace . help-go-forward)) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693918) ergoemacs-mode programmer-dv)))) (ergoemacs-remap keymap (delete-backward-char . scroll-down-command) (indent-for-tab-command . forward-button) (complete-symbol . backward-button) (mouse-yank-primary . help-follow-mouse) (previous-buffer . help-go-back) (next-buffer . help-go-forward) (newline . help-follow)) (27 keymap (9 . backward-paragraph) (101 . scroll-down-command)))) nil (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693918) ergoemacs-mode programmer-dv)))) (ergoemacs-remap keymap (delete-backward-char . scroll-down-command) (indent-for-tab-command . forward-button) (complete-symbol . backward-button) (mouse-yank-primary . help-follow-mouse) (previous-buffer . help-go-back) (next-buffer . help-go-forward) (newline . help-follow)) (27 keymap (9 . backward-paragraph) (101 . scroll-down-command)))) help-mode-852438d026c018c4307b916406f98c62-unbound-keymap-bb8708fddf73cdb9e45c9af4f0cfbf09 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693918) ergoemacs-unbound programmer-dv)))) keymap (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key (help-mode-map backspace-is-back programmer-dv)))) (backspace . help-go-back) (S-backspace . help-go-forward)) (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key ((-2305843009213693918) ergoemacs-mode programmer-dv)))) (ergoemacs-remap keymap (delete-backward-char . scroll-down-command) (indent-for-tab-command . forward-button) (complete-symbol . backward-button) (mouse-yank-primary . help-follow-mouse) (previous-buffer . help-go-back) (next-buffer . help-go-forward) (newline . help-follow)) (27 keymap (9 . backward-paragraph) (101 . scroll-down-command))) keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693918))) (menu-bar keymap (Help-Mode menu-item "Help-Mode" (keymap "Help-Mode" (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693874))) (Show\ Help\ for\ Symbol menu-item "Show Help for Symbol" help-follow-symbol :help "Show the docs for the symbol at point") (Previous\ Topic menu-item "Previous Topic" help-go-back :help "Go back to previous topic in this help buffer") (Next\ Topic menu-item "Next Topic" help-go-forward :help "Go back to next topic in this help buffer") (Move\ to\ Previous\ Button menu-item "Move to Previous Button" backward-button :help "Move to the Next Button in the help buffer") (Move\ to\ Next\ Button menu-item "Move to Next Button" forward-button :help "Move to the Next Button in the help buffer")))) (13 . help-follow) (XF86Forward . help-go-forward) (XF86Back . help-go-back) (3 keymap (3 . help-follow-symbol) (6 . help-go-forward) (2 . help-go-back)) (114 . help-go-forward) (108 . help-go-back) (mouse-2 . help-follow-mouse) keymap (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693913))) (backtab . backward-button) (27 keymap (9 . backward-button)) (9 . forward-button)) keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693843))) (103 . revert-buffer) (60 . beginning-of-buffer) (62 . end-of-buffer) (104 . describe-mode) (63 . describe-mode) (127 . scroll-down-command) (33554464 . scroll-down-command) (32 . scroll-up-command) (113 . quit-window) (57 . digit-argument) (56 . digit-argument) (55 . digit-argument) (54 . digit-argument) (53 . digit-argument) (52 . digit-argument) (51 . digit-argument) (50 . digit-argument) (49 . digit-argument) (48 . digit-argument) (45 . negative-argument) (remap keymap (self-insert-command . undefined)))))] ergoemacs-map-properties--indirect-keymaps [object pcache-entry "pcache-entry" 1442351083.1347835 7776000 #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (menu-function-19 (:map-key -2305843009213693785)))] ergoemacs-map-properties--key-struct [object pcache-entry "pcache-entry" 1442351083.1353433 7776000 #s(hash-table size 145 test eql rehash-size 1.5 rehash-threshold 0.8 data (2305843009213693949 (:map-key 2305843009213693949) 2305843009213693950 (:map-key 2305843009213693950) -2305843009213693789 (:map-key -2305843009213693789) -2305843009213693783 (:map-key -2305843009213693783) -2305843009213693895 (:map-key -2305843009213693895) -2305843009213693839 (:map-key -2305843009213693839 :parent (:map-key -2305843009213693895)) -2305843009213693948 (:map-key -2305843009213693948 :parent (:map-key -2305843009213693839 :parent (:map-key -2305843009213693895))) -2305843009213693843 (:map-key -2305843009213693843) -2305843009213693782 (:map-key -2305843009213693782 :parent (:map-key -2305843009213693843)) -2305843009213693781 (:map-key -2305843009213693781) -2305843009213693780 (:map-key -2305843009213693780) -2305843009213693779 (:map-key -2305843009213693779) -2305843009213693778 (:map-key -2305843009213693778) -2305843009213693777 (:map-key -2305843009213693777) -2305843009213693776 (:map-key -2305843009213693776) -2305843009213693775 (:map-key -2305843009213693775) -2305843009213693774 (:map-key -2305843009213693774) -2305843009213693773 (:map-key -2305843009213693773) -2305843009213693772 (:map-key -2305843009213693772) -2305843009213693771 (:map-key -2305843009213693771) -2305843009213693851 (:map-key -2305843009213693851) -2305843009213693914 (:map-key -2305843009213693914) -2305843009213693873 (:map-key -2305843009213693873) -2305843009213693770 (:map-key -2305843009213693770) -2305843009213693913 (:map-key -2305843009213693913) -2305843009213693898 (:map-key -2305843009213693898 :parent (:map-key -2305843009213693913)) -2305843009213693824 (:map-key -2305843009213693824 :parent (:map-key -2305843009213693898 :parent (:map-key -2305843009213693913))) -2305843009213693766 (:map-key -2305843009213693766) -2305843009213693866 (:map-key -2305843009213693866) -2305843009213693931 (:map-key -2305843009213693931) ((keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693913))) (backtab . backward-button) (27 keymap (9 . backward-button)) (9 . forward-button)) keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693843))) (103 . revert-buffer) (60 . beginning-of-buffer) (62 . end-of-buffer) (104 . describe-mode) (63 . describe-mode) (127 . scroll-down-command) (33554464 . scroll-down-command) (32 . scroll-up-command) (113 . quit-window) (57 . digit-argument) (56 . digit-argument) (55 . digit-argument) (54 . digit-argument) (53 . digit-argument) (52 . digit-argument) (51 . digit-argument) (50 . digit-argument) (49 . digit-argument) (48 . digit-argument) (45 . negative-argument) (remap keymap (self-insert-command . undefined))) (:map-key -2305843009213693913 :composed ((:map-key -2305843009213693913)) :parent (:map-key -2305843009213693843)) -2305843009213693918 (:map-key -2305843009213693918 :parent (:map-key -2305843009213693913 :composed ((:map-key -2305843009213693913)) :parent (:map-key -2305843009213693843))) -2305843009213693784 (:map-key -2305843009213693784) -2305843009213693769 (:map-key -2305843009213693769 :parent (:map-key -2305843009213693843)) -2305843009213693860 (:map-key -2305843009213693860) -2305843009213693825 (:map-key -2305843009213693825 :parent (:map-key -2305843009213693860)) -2305843009213693817 (:map-key -2305843009213693817 :parent (:map-key -2305843009213693839 :parent (:map-key -2305843009213693895))) -2305843009213693808 (:map-key -2305843009213693808) -2305843009213693809 (:map-key -2305843009213693809) -2305843009213693820 (:map-key -2305843009213693820) -2305843009213693821 (:map-key -2305843009213693821) -2305843009213693822 (:map-key -2305843009213693822 :parent (:map-key -2305843009213693809)) -2305843009213693813 (:map-key -2305843009213693813) -2305843009213693823 (:map-key -2305843009213693823 :parent (:map-key -2305843009213693913)) -2305843009213693818 (:map-key -2305843009213693818) -2305843009213693827 (:map-key -2305843009213693827) -2305843009213693828 (:map-key -2305843009213693828) -2305843009213693899 (:map-key -2305843009213693899) -2305843009213693829 (:map-key -2305843009213693829) -2305843009213693830 (:map-key -2305843009213693830 :parent (:map-key -2305843009213693898 :parent (:map-key -2305843009213693913))) -2305843009213693831 (:map-key -2305843009213693831) -2305843009213693833 (:map-key -2305843009213693833) -2305843009213693834 (:map-key -2305843009213693834) -2305843009213693835 (:map-key -2305843009213693835 :parent (:map-key -2305843009213693809)) -2305843009213693836 (:map-key -2305843009213693836) -2305843009213693886 (:map-key -2305843009213693886) -2305843009213693837 (:map-key -2305843009213693837 :parent (:map-key -2305843009213693886)) -2305843009213693838 (:map-key -2305843009213693838) -2305843009213693840 (:map-key -2305843009213693840 :parent (:map-key -2305843009213693835 :parent (:map-key -2305843009213693809))) -2305843009213693841 (:map-key -2305843009213693841) -2305843009213693842 (:map-key -2305843009213693842) -2305843009213693844 (:map-key -2305843009213693844) -2305843009213693845 (:map-key -2305843009213693845) -2305843009213693846 (:map-key -2305843009213693846) -2305843009213693847 (:map-key -2305843009213693847) -2305843009213693848 (:map-key -2305843009213693848) -2305843009213693849 (:map-key -2305843009213693849) -2305843009213693850 (:map-key -2305843009213693850) -2305843009213693852 (:map-key -2305843009213693852) -2305843009213693853 (:map-key -2305843009213693853) -2305843009213693854 (:map-key -2305843009213693854) -2305843009213693855 (:map-key -2305843009213693855) -2305843009213693856 (:map-key -2305843009213693856) -2305843009213693867 (:map-key -2305843009213693867) -2305843009213693857 (:map-key -2305843009213693857) -2305843009213693858 (:map-key -2305843009213693858) -2305843009213693861 (:map-key -2305843009213693861) -2305843009213693862 (:map-key -2305843009213693862) -2305843009213693863 (:map-key -2305843009213693863) -2305843009213693864 (:map-key -2305843009213693864 :parent (:map-key -2305843009213693809)) -2305843009213693865 (:map-key -2305843009213693865) -2305843009213693869 (:map-key -2305843009213693869) -2305843009213693952 (:map-key -2305843009213693952) -2305843009213693942 (:map-key -2305843009213693942) -2305843009213693944 (:map-key -2305843009213693944 :parent (:map-key -2305843009213693942)) -2305843009213693870 (:map-key -2305843009213693870 :parent (:map-key -2305843009213693944 :parent (:map-key -2305843009213693942))) -2305843009213693871 (:map-key -2305843009213693871) -2305843009213693872 (:map-key -2305843009213693872) -2305843009213693874 (:map-key -2305843009213693874) -2305843009213693875 (:map-key -2305843009213693875) -2305843009213693763 (:map-key -2305843009213693763) -2305843009213693877 (:map-key -2305843009213693877 :parent (:map-key -2305843009213693860)) -2305843009213693878 (:map-key -2305843009213693878) -2305843009213693880 (:map-key -2305843009213693880) -2305843009213693881 (:map-key -2305843009213693881) -2305843009213693882 (:map-key -2305843009213693882 :parent (:map-key -2305843009213693843)) -2305843009213693883 (:map-key -2305843009213693883) -2305843009213693884 (:map-key -2305843009213693884) -2305843009213693885 (:map-key -2305843009213693885) -2305843009213693887 (:map-key -2305843009213693887) -2305843009213693888 (:map-key -2305843009213693888) -2305843009213693889 (:map-key -2305843009213693889) -2305843009213693890 (:map-key -2305843009213693890) -2305843009213693891 (:map-key -2305843009213693891) -2305843009213693893 (:map-key -2305843009213693893) -2305843009213693894 (:map-key -2305843009213693894) -2305843009213693896 (:map-key -2305843009213693896 :parent (:map-key -2305843009213693839 :parent (:map-key -2305843009213693895))) -2305843009213693900 (:map-key -2305843009213693900) -2305843009213693901 (:map-key -2305843009213693901) -2305843009213693902 (:map-key -2305843009213693902 :parent (:map-key -2305843009213693809)) -2305843009213693903 (:map-key -2305843009213693903) -2305843009213693905 (:map-key -2305843009213693905 :parent (:map-key -2305843009213693871)) -2305843009213693906 (:map-key -2305843009213693906) -2305843009213693907 (:map-key -2305843009213693907) -2305843009213693908 (:map-key -2305843009213693908) -2305843009213693911 (:map-key -2305843009213693911) -2305843009213693912 (:map-key -2305843009213693912) -2305843009213693915 (:map-key -2305843009213693915) -2305843009213693917 (:map-key -2305843009213693917) -2305843009213693919 (:map-key -2305843009213693919) -2305843009213693920 (:map-key -2305843009213693920) -2305843009213693921 (:map-key -2305843009213693921) -2305843009213693922 (:map-key -2305843009213693922) -2305843009213693923 (:map-key -2305843009213693923) -2305843009213693924 (:map-key -2305843009213693924) -2305843009213693925 (:map-key -2305843009213693925) nil nil -2305843009213693926 (:map-key -2305843009213693926) -2305843009213693927 (:map-key -2305843009213693927) -2305843009213693928 (:map-key -2305843009213693928) -2305843009213693929 (:map-key -2305843009213693929) -2305843009213693932 (:map-key -2305843009213693932) -2305843009213693934 (:map-key -2305843009213693934) -2305843009213693935 (:map-key -2305843009213693935 :parent (:map-key -2305843009213693908)) -2305843009213693937 (:map-key -2305843009213693937 :parent (:map-key -2305843009213693809)) -2305843009213693938 (:map-key -2305843009213693938) -2305843009213693939 (:map-key -2305843009213693939) -2305843009213693940 (:map-key -2305843009213693940) -2305843009213693941 (:map-key -2305843009213693941) -2305843009213693943 (:map-key -2305843009213693943 :parent (:map-key -2305843009213693871)) -2305843009213693945 (:map-key -2305843009213693945) -2305843009213693946 (:map-key -2305843009213693946) -2305843009213693947 (:map-key -2305843009213693947) -2305843009213693949 (:map-key -2305843009213693949) -2305843009213693950 (:map-key -2305843009213693950)))] ergoemacs-map-properties--plist-hash [object pcache-entry "pcache-entry" 1442351083.1429048 7776000 #s(hash-table size 217 test equal rehash-size 1.5 rehash-threshold 0.8 data ((:map-key 2305843009213693949) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:only-local-modifications-p t :map-list-hash (ergoemacs-translate--modal-parent-map))) (:map-key 2305843009213693950) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:only-local-modifications-p t :map-list-hash (ergoemacs-translate--parent-map) :use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693817 :parent (:map-key -2305843009213693839 :parent (:map-key -2305843009213693895))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (emacs-lisp-mode-map))) (:map-key -2305843009213693818) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (describe-indian-environment-map))) (:map-key -2305843009213693819) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (minibuffer-local-map))) (:map-key -2305843009213693820) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (eudc-tools-menu))) (:map-key -2305843009213693821) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (mode-line-column-line-number-mode-map))) (:map-key -2305843009213693822 :parent (:map-key -2305843009213693819)) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (read-passwd-map))) (:map-key -2305843009213693823 :parent (:map-key -2305843009213693913)) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (splash-screen-keymap))) (:map-key -2305843009213693824 :parent (:map-key -2305843009213693898 :parent (:map-key -2305843009213693913))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (package-menu-mode-map) :use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693825) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (mode-line-major-mode-keymap))) (:map-key -2305843009213693826) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (setup-cyrillic-environment-map))) (:map-key -2305843009213693827) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (kmacro-keymap))) (:map-key -2305843009213693828) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-manuals-menu))) (:map-key -2305843009213693899) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (edit-abbrevs-map edit-abbrevs-mode-map))) (:map-key -2305843009213693829) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (help-map))) (:map-key -2305843009213693830 :parent (:map-key -2305843009213693898 :parent (:map-key -2305843009213693913))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (Buffer-menu-mode-map))) (:map-key -2305843009213693831) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (goto-map))) (:map-key -2305843009213693832) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (setup-chinese-environment-map))) (:map-key -2305843009213693833) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (tty-menu-navigation-map))) (:map-key -2305843009213693834) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (facemenu-face-menu))) (:map-key -2305843009213693835 :parent (:map-key -2305843009213693819)) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (minibuffer-local-completion-map))) (:map-key -2305843009213693836) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (facemenu-special-menu))) (:map-key -2305843009213693837 :parent (:map-key -2305843009213693886)) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (widget-key-sequence-map))) (:map-key -2305843009213693838) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (mode-line-buffer-identification-keymap))) (:map-key -2305843009213693839 :parent (:map-key -2305843009213693895)) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (lisp-mode-shared-map))) (:map-key -2305843009213693840 :parent (:map-key -2305843009213693835 :parent (:map-key -2305843009213693819))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (minibuffer-local-must-match-map))) (:map-key -2305843009213693841) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (abbrev-map))) (:map-key -2305843009213693842) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (search-map))) (:map-key -2305843009213693843) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (special-mode-map))) (:map-key -2305843009213693844) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-ediff-merge-menu))) (:map-key -2305843009213693845) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (facemenu-foreground-menu))) (:map-key -2305843009213693846) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (occur-menu-map))) (:map-key -2305843009213693847) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (minibuffer-local-filename-completion-map))) (:map-key -2305843009213693848) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-showhide-fringe-ind-menu))) (:map-key -2305843009213693849) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (narrow-map))) (:map-key -2305843009213693850) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (2C-mode-map))) (:map-key -2305843009213693851) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (undo-tree-visualizer-selection-mode-map) :use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693852) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (setup-language-environment-map))) (:map-key -2305843009213693853) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (ergoemacs-modal-ignored-keymap))) (:map-key -2305843009213693854) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (custom-field-keymap))) (:map-key -2305843009213693855) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-line-wrapping-menu))) (:map-key -2305843009213693856) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (edit-tab-stops-map))) (:map-key -2305843009213693867) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-files-menu menu-bar-file-menu))) (:map-key -2305843009213693857) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (facemenu-indentation-menu))) (:map-key -2305843009213693858) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-showhide-tool-bar-menu))) (:map-key -2305843009213693859) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (describe-cyrillic-environment-map))) (:map-key -2305843009213693860) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (text-mode-map))) (:map-key -2305843009213693861) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (mule-menu-keymap))) (:map-key -2305843009213693862) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-showhide-menu))) (:map-key -2305843009213693863) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-ediff-misc-menu))) (:map-key -2305843009213693864 :parent (:map-key -2305843009213693819)) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (minibuffer-local-shell-command-map))) (:map-key -2305843009213693865) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (completion-in-region-mode-map))) (:map-key -2305843009213693866) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (isearch-mode-map) :use-local-unbind-list-key t :use-set-map-key t)) (:map-key -2305843009213693868) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (bookmark-map))) (:map-key -2305843009213693869) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-search-documentation-menu))) (:map-key -2305843009213693952) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (global-map widget-global-map) :extract-keys ([switch-frame] [select-window] [delete-frame] [67108911] [XF86Forward] [XF86Back] [67108912] [67108913] [67108914] [67108915] [67108916] [67108917] [67108918] [67108919] [67108920] [67108921] [67108909] [67108896] [menu] [find] [C-S-backspace] [home] [C-home] [M-home] [left] [up] [right] [down] [prior] [next] [C-up] [C-down] [C-prior] [C-next] [M-next] [M-prior] [end] [C-end] [M-end] [begin] [M-begin] [execute] [insert] [C-insert] [S-insert] [insertchar] [C-insertchar] [S-insertchar] [undo] [redo] [again] [open] [insertline] [deleteline] [deletechar] [mouse-movement] [M-right] [M-left] [C-right] [C-left] [C-delete] [C-backspace] [S-delete] [C-M-left] [C-M-right] [C-M-up] [C-M-down] [C-M-home] [C-M-end] [f3] [f4] [menu-bar mouse-1] [f2 50] [f2 f2] [f2 98] [f2 115] [help 8] [help help] [help f1] [help 46] [help 63] [help 1] [help 3] [help 4] [help 5] [help 6] [help 13] [help 14] [help 15] [help 16] [help 20] [help 23] [help 28] [help 67] [help 70] [help 73] [help 75] [help 76] [help 83] [help 97] [help 98] [help 99] [help 100] [help 101] [help 102] [help 103] [help 104] [help 105] [help 52 105] [help 107] [help 108] [help 109] [help 110] [help 112] [help 80] [help 114] [help 115] [help 116] [help 119] [help 118] [help 113] [f1 8] [f1 help] [f1 f1] [f1 46] [f1 63] [f1 1] [f1 3] [f1 4] [f1 5] [f1 6] [f1 13] [f1 14] [f1 15] [f1 16] [f1 20] [f1 23] [f1 28] [f1 67] [f1 70] [f1 73] [f1 75] [f1 76] [f1 83] [f1 97] [f1 98] [f1 99] [f1 100] [f1 101] [f1 102] [f1 103] [f1 104] [f1 105] [f1 52 105] [f1 107] [f1 108] [f1 109] [f1 110] [f1 112] [f1 80] [f1 114] [f1 115] [f1 116] [f1 119] [f1 118] [f1 113] [compose-last-chars] [f11] [M-f10] [M-mouse-1] [M-drag-mouse-1] [M-down-mouse-1] [M-mouse-3] [M-mouse-2] [down-mouse-1] [mouse-1] [drag-mouse-1] [double-mouse-1] [triple-mouse-1] [mouse-2] [mouse-3] [C-down-mouse-1] [S-down-mouse-1] [mode-line mouse-1] [mode-line drag-mouse-1] [mode-line down-mouse-1] [mode-line mouse-2] [mode-line mouse-3] [mode-line C-mouse-2] [header-line down-mouse-1] [header-line mouse-1] [vertical-scroll-bar C-mouse-2] [vertical-scroll-bar mouse-1] [vertical-line C-mouse-2] [vertical-line down-mouse-1] [vertical-line mouse-1] [right-divider down-mouse-1] [bottom-divider down-mouse-1] [f10] [XF86WakeUp] [mouse-4] [S-mouse-4] [C-mouse-4] [mouse-5] [S-mouse-5] [C-mouse-5] [S-mouse-3] [127] [31] [29] [28] [27 67108912] [27 67108913] [27 67108914] [27 67108915] [27 67108916] [27 67108917] [27 67108918] [27 67108919] [27 67108920] [27 67108921] [27 67108909] [27 home] [27 next] [27 prior] [27 33554454] [27 end] [27 begin] [27 right] [27 left] [27 C-left] [27 C-right] [27 C-up] [27 C-down] [27 C-home] [27 C-end] [27 67108896] [27 C-delete] [27 C-backspace] [27 67108911] [27 67108910] [27 f10] [27 67108901] [27 127] [27 126] [27 125] [27 124] [27 123] [27 122] [27 121] [27 120] [27 119] [27 118] [27 117] [27 116] [27 115 111] [27 115 104 114] [27 115 104 112] [27 115 104 108] [27 115 104 46] [27 115 104 117] [27 115 104 119] [27 115 119] [27 115 95] [27 115 46] [27 114] [27 113] [27 111 27 111] [27 111 27 83] [27 111 27 115] [27 109] [27 108] [27 107] [27 106] [27 105] [27 104] [27 103 99] [27 103 103] [27 103 27 103] [27 103 27 110] [27 103 27 112] [27 103 110] [27 103 112] [27 103 9] [27 102] [27 101] [27 100] [27 99] [27 98] [27 97] [27 96] [27 94] [27 92] [27 64] [27 62] [27 61] [27 60] [27 59] [27 58] [27 47] [27 46] [27 45] [27 44] [27 42] [27 41] [27 40] [27 39] [27 38] [27 37] [27 36] [27 33] [27 32] [27 28] [27 27 27] [27 27 58] [27 23] [27 22] [27 21] [27 20] [27 19] [27 18] [27 16] [27 15] [27 14] [27 12] [27 11] [27 10] [27 9] [27 8] [27 6] [27 5] [27 4] [27 3] [27 2] [27 1] [27 0] [26] [25] [24 right] [24 C-right] [24 left] [24 C-left] [24 67108896] [24 67108907] [24 67108909] [24 67108925] [24 67108912] [24 127] [24 125] [24 123] [24 122] [24 118 97] [24 118 98] [24 118 99] [24 118 100] [24 118 103] [24 118 104] [24 118 105] [24 118 108] [24 118 76] [24 118 73] [24 118 79] [24 118 109] [24 118 114] [24 118 115] [24 118 117] [24 118 118] [24 118 43] [24 118 61] [24 118 68] [24 118 126] [24 117] [24 115] [24 114 99] [24 114 107] [24 114 100] [24 114 121] [24 114 111] [24 114 116] [24 114 78] [24 114 27 119] [24 114 0] [24 114 67108896] [24 114 32] [24 114 106] [24 114 115] [24 114 120] [24 114 105] [24 114 103] [24 114 114] [24 114 110] [24 114 43] [24 114 119] [24 114 102] [24 114 98] [24 114 109] [24 114 108] [24 113] [24 111] [24 110 110] [24 110 119] [24 110 100] [24 110 112] [24 109] [24 108] [24 107] [24 105] [24 104] [24 102] [24 101] [24 100] [24 98] [24 97 108] [24 97 1] [24 97 103] [24 97 43] [24 97 105 103] [24 97 105 108] [24 97 45] [24 97 101] [24 97 39] [24 97 112] [24 97 110] [24 96] [24 94] [24 93] [24 91] [24 62] [24 61] [24 60] [24 59] [24 56 13] [24 54 50] [24 54 f2] [24 54 98] [24 54 115] [24 53 109] [24 53 98] [24 53 102] [24 53 6] [24 53 114] [24 53 15] [24 53 100] [24 53 46] [24 53 50] [24 53 49] [24 53 48] [24 53 111] [24 52 109] [24 52 97] [24 52 99] [24 52 48] [24 52 102] [24 52 114] [24 52 6] [24 52 98] [24 52 15] [24 52 100] [24 52 46] [24 51] [24 50] [24 49] [24 48] [24 46] [24 45] [24 43] [24 42] [24 41] [24 40] [24 39] [24 36] [24 32] [24 27 27] [24 27 58] [24 26] [24 24] [24 23] [24 22] [24 21] [24 20] [24 19] [24 18] [24 17] [24 16] [24 15] [24 14] [24 13 102] [24 13 114] [24 13 70] [24 13 116] [24 13 107] [24 13 112] [24 13 120] [24 13 88] [24 13 28] [24 13 99] [24 13 108] [24 12] [24 11 115] [24 11 19] [24 11 11] [24 11 114] [24 11 113] [24 11 14] [24 11 16] [24 11 22] [24 11 4] [24 11 20] [24 11 12] [24 11 6] [24 11 3] [24 11 9] [24 11 1] [24 11 5] [24 11 13] [24 11 101] [24 11 108] [24 11 32] [24 11 98] [24 11 110] [24 11 120] [24 9] [24 6] [24 5] [24 4] [24 3] [24 2] [24 0] [23] [22] [21] [20] [19] [18] [17] [16] [15] [14] [13] [12] [11] [10] [9] [8 8] [8 help] [8 f1] [8 46] [8 63] [8 1] [8 3] [8 4] [8 5] [8 6] [8 13] [8 14] [8 15] [8 16] [8 20] [8 23] [8 28] [8 67] [8 70] [8 73] [8 75] [8 76] [8 83] [8 97] [8 98] [8 99] [8 100] [8 101] [8 102] [8 103] [8 104] [8 105] [8 52 105] [8 107] [8 108] [8 109] [8 110] [8 112] [8 80] [8 114] [8 115] [8 116] [8 119] [8 118] [8 113] [7] [6] [5] [4] [2] [1] [0]) :extract-where-is #s(hash-table size 487 test eql rehash-size 1.5 rehash-threshold 0.8 data (set-mark-command ([0]) move-beginning-of-line ([1]) backward-char ([2]) delete-char ([4]) move-end-of-line ([5]) forward-char ([6]) keyboard-quit ([7]) help-quit ([8 113]) describe-variable ([8 118]) where-is ([8 119]) help-with-tutorial ([8 116]) describe-syntax ([8 115]) info-emacs-manual ([8 114]) describe-package ([8 80]) finder-by-keyword ([8 112]) view-emacs-news ([8 110]) describe-mode ([8 109]) view-lossage ([8 108]) describe-key ([8 107]) info-other-window ([8 52 105]) info ([8 105]) view-hello-file ([8 104]) describe-gnu-project ([8 103]) describe-function ([8 102]) view-echo-area-messages ([8 101]) apropos-documentation ([8 100]) describe-key-briefly ([8 99]) describe-bindings ([8 98]) apropos-command ([8 97]) info-lookup-symbol ([8 83]) describe-language-environment ([8 76]) Info-goto-emacs-key-command-node ([8 75]) describe-input-method ([8 73]) Info-goto-emacs-command-node ([8 70]) describe-coding-system ([8 67]) describe-no-warranty ([8 23]) view-emacs-todo ([8 20]) view-emacs-problems ([8 16]) describe-distribution ([8 15]) view-order-manuals ([8 13]) view-emacs-FAQ ([8 6]) view-external-packages ([8 5]) view-emacs-debugging ([8 4]) describe-copying ([8 3]) about-emacs ([8 1]) help-for-help ([8 63]) display-local-help ([8 46]) indent-for-tab-command ([9]) electric-newline-and-maybe-indent ([10]) kill-line ([11]) recenter-top-bottom ([12]) newline ([13]) next-line ([14]) open-line ([15]) previous-line ([16]) quoted-insert ([17]) isearch-backward ([18]) isearch-forward ([19]) transpose-chars ([20]) universal-argument ([21]) scroll-up-command ([22]) kill-region ([23]) pop-global-mark ([24 0]) list-buffers ([24 2]) save-buffers-kill-terminal ([24 3]) list-directory ([24 4]) eval-last-sexp ([24 5]) find-file ([24 6]) indent-rigidly ([24 9]) kmacro-to-register ([24 11 120]) kmacro-name-last-macro ([24 11 110]) kmacro-bind-to-key ([24 11 98]) kmacro-step-edit-macro ([24 11 32]) kmacro-edit-lossage ([24 11 108]) edit-kbd-macro ([24 11 101]) kmacro-edit-macro ([24 11 13]) kmacro-edit-macro-repeat ([24 11 5]) kmacro-add-counter ([24 11 1]) kmacro-insert-counter ([24 11 9]) kmacro-set-counter ([24 11 3]) kmacro-set-format ([24 11 6]) kmacro-call-ring-2nd-repeat ([24 11 12]) kmacro-swap-ring ([24 11 20]) kmacro-delete-ring-head ([24 11 4]) kmacro-view-macro-repeat ([24 11 22]) kmacro-cycle-ring-previous ([24 11 16]) kmacro-cycle-ring-next ([24 11 14]) kbd-macro-query ([24 11 113]) apply-macro-to-region-lines ([24 11 114]) kmacro-end-or-call-macro-repeat ([24 11 11]) kmacro-start-macro ([24 11 19]) downcase-region ([24 12]) set-language-environment ([24 13 108]) universal-coding-system-argument ([24 13 99]) set-input-method ([24 13 28]) set-next-selection-coding-system ([24 13 88]) set-selection-coding-system ([24 13 120]) set-buffer-process-coding-system ([24 13 112]) set-keyboard-coding-system ([24 13 107]) set-terminal-coding-system ([24 13 116]) set-file-name-coding-system ([24 13 70]) revert-buffer-with-coding-system ([24 13 114]) set-buffer-file-coding-system ([24 13 102]) set-goal-column ([24 14]) delete-blank-lines ([24 15]) mark-page ([24 16]) read-only-mode ([24 17]) find-file-read-only ([24 18]) save-buffer ([24 19]) transpose-lines ([24 20]) upcase-region ([24 21]) find-alternate-file ([24 22]) write-file ([24 23]) exchange-point-and-mark ([24 24]) suspend-frame ([24 26]) repeat-complex-command ([24 27 58]) rectangle-mark-mode ([24 32]) set-selective-display ([24 36]) expand-abbrev ([24 39]) kmacro-end-macro ([24 41]) calc-dispatch ([24 42]) balance-windows ([24 43]) shrink-window-if-larger-than-buffer ([24 45]) set-fill-prefix ([24 46]) delete-window ([24 48]) delete-other-windows ([24 49]) split-window-below ([24 50]) split-window-right ([24 51]) find-tag-other-window ([24 52 46]) dired-other-window ([24 52 100]) display-buffer ([24 52 15]) switch-to-buffer-other-window ([24 52 98]) find-file-other-window ([24 52 6]) find-file-read-only-other-window ([24 52 114]) kill-buffer-and-window ([24 52 48]) clone-indirect-buffer-other-window ([24 52 99]) add-change-log-entry-other-window ([24 52 97]) compose-mail-other-window ([24 52 109]) other-frame ([24 53 111]) delete-frame ([24 53 48]) delete-other-frames ([24 53 49]) make-frame-command ([24 53 50]) find-tag-other-frame ([24 53 46]) dired-other-frame ([24 53 100]) display-buffer-other-frame ([24 53 15]) find-file-read-only-other-frame ([24 53 114]) find-file-other-frame ([24 53 6]) switch-to-buffer-other-frame ([24 53 98]) compose-mail-other-frame ([24 53 109]) 2C-split ([24 54 115]) 2C-associate-buffer ([24 54 98]) 2C-two-columns ([24 54 f2]) insert-char ([24 56 13]) comment-set-column ([24 59]) scroll-left ([24 60]) what-cursor-position ([24 61]) scroll-right ([24 62]) backward-page ([24 91]) forward-page ([24 93]) enlarge-window ([24 94]) next-error ([24 96]) expand-jump-to-next-slot ([24 97 110]) expand-jump-to-previous-slot ([24 97 112]) inverse-add-global-abbrev ([24 97 45]) inverse-add-mode-abbrev ([24 97 105 108]) add-mode-abbrev ([24 97 43]) add-global-abbrev ([24 97 103]) switch-to-buffer ([24 98]) dired ([24 100]) kmacro-end-and-call-macro ([24 101]) set-fill-column ([24 102]) mark-whole-buffer ([24 104]) insert-file ([24 105]) kill-buffer ([24 107]) count-lines-page ([24 108]) compose-mail ([24 109]) narrow-to-page ([24 110 112]) narrow-to-defun ([24 110 100]) widen ([24 110 119]) narrow-to-region ([24 110 110]) other-window ([24 111]) bookmark-bmenu-list ([24 114 108]) bookmark-set ([24 114 109]) bookmark-jump ([24 114 98]) frameset-to-register ([24 114 102]) window-configuration-to-register ([24 114 119]) increment-register ([24 114 43]) number-to-register ([24 114 110]) copy-rectangle-to-register ([24 114 114]) insert-register ([24 114 103]) copy-to-register ([24 114 120]) jump-to-register ([24 114 106]) point-to-register ([24 114 32]) copy-rectangle-as-kill ([24 114 27 119]) rectangle-number-lines ([24 114 78]) string-rectangle ([24 114 116]) open-rectangle ([24 114 111]) yank-rectangle ([24 114 121]) delete-rectangle ([24 114 100]) kill-rectangle ([24 114 107]) clear-rectangle ([24 114 99]) save-some-buffers ([24 115]) undo ([24 117]) vc-revision-other-window ([24 118 126]) vc-root-diff ([24 118 68]) vc-diff ([24 118 61]) vc-update ([24 118 43]) vc-next-action ([24 118 118]) vc-revert ([24 118 117]) vc-create-tag ([24 118 115]) vc-retrieve-tag ([24 118 114]) vc-merge ([24 118 109]) vc-log-outgoing ([24 118 79]) vc-log-incoming ([24 118 73]) vc-print-root-log ([24 118 76]) vc-print-log ([24 118 108]) vc-register ([24 118 105]) vc-insert-headers ([24 118 104]) vc-annotate ([24 118 103]) vc-dir ([24 118 100]) vc-rollback ([24 118 99]) vc-switch-backend ([24 118 98]) vc-update-change-log ([24 118 97]) repeat ([24 122]) shrink-window-horizontally ([24 123]) enlarge-window-horizontally ([24 125]) backward-kill-sentence ([24 127]) text-scale-adjust ([24 67108912]) previous-buffer ([24 C-left]) next-buffer ([24 C-right]) yank ([25]) mark-sexp ([27 0]) beginning-of-defun ([27 1]) backward-sexp ([27 2]) exit-recursive-edit ([27 3]) down-list ([27 4]) end-of-defun ([27 5]) forward-sexp ([27 6]) mark-defun ([27 8]) complete-symbol ([27 9]) indent-new-comment-line ([27 10]) kill-sexp ([27 11]) reposition-window ([27 12]) forward-list ([27 14]) split-line ([27 15]) backward-list ([27 16]) isearch-backward-regexp ([27 18]) isearch-forward-regexp ([27 19]) transpose-sexps ([27 20]) backward-up-list ([27 21]) scroll-other-window ([27 22]) append-next-kill ([27 23]) eval-expression ([27 27 58]) keyboard-escape-quit ([27 27 27]) indent-region ([27 28]) just-one-space ([27 32]) shell-command ([27 33]) ispell-word ([27 36]) query-replace ([27 37]) async-shell-command ([27 38]) abbrev-prefix-mark ([27 39]) insert-parentheses ([27 40]) move-past-close-and-reindent ([27 41]) pop-tag-mark ([27 42]) tags-loop-continue ([27 44]) negative-argument ([27 45]) find-tag ([27 46]) dabbrev-expand ([27 47]) comment-dwim ([27 59]) beginning-of-buffer ([27 60]) count-words-region ([27 61]) end-of-buffer ([27 62]) mark-word ([27 64]) delete-horizontal-space ([27 92]) delete-indentation ([27 94]) tmm-menubar ([27 96]) backward-sentence ([27 97]) backward-word ([27 98]) capitalize-word ([27 99]) kill-word ([27 100]) forward-sentence ([27 101]) forward-word ([27 102]) move-to-column ([27 103 9]) previous-error ([27 103 112]) goto-line ([27 103 27 103]) goto-char ([27 103 99]) mark-paragraph ([27 104]) tab-to-tab-stop ([27 105]) kill-sentence ([27 107]) downcase-word ([27 108]) back-to-indentation ([27 109]) center-line ([27 111 27 115]) center-paragraph ([27 111 27 83]) font-lock-fontify-block ([27 111 27 111]) fill-paragraph ([27 113]) move-to-window-line-top-bottom ([27 114]) isearch-forward-symbol-at-point ([27 115 46]) isearch-forward-symbol ([27 115 95]) isearch-forward-word ([27 115 119]) hi-lock-write-interactive-patterns ([27 115 104 119]) unhighlight-regexp ([27 115 104 117]) highlight-symbol-at-point ([27 115 104 46]) highlight-lines-matching-regexp ([27 115 104 108]) highlight-phrase ([27 115 104 112]) highlight-regexp ([27 115 104 114]) occur ([27 115 111]) transpose-words ([27 116]) upcase-word ([27 117]) scroll-down-command ([27 118]) kill-ring-save ([27 119]) execute-extended-command ([27 120]) yank-pop ([27 121]) zap-to-char ([27 122]) backward-paragraph ([27 123]) shell-command-on-region ([27 124]) forward-paragraph ([27 125]) not-modified ([27 126]) backward-kill-word ([27 127]) query-replace-regexp ([27 67108901]) toggle-frame-maximized ([27 f10]) find-tag-regexp ([27 67108910]) dabbrev-completion ([27 67108911]) backward-kill-sexp ([27 C-backspace]) beginning-of-buffer-other-window ([27 begin]) end-of-buffer-other-window ([27 end]) scroll-other-window-down ([27 33554454]) digit-argument ([27 67108921]) toggle-input-method ([28]) abort-recursive-edit ([29]) delete-backward-char ([127]) kmacro-end-call-mouse ([S-mouse-3]) mwheel-scroll ([C-mouse-5]) ignore ([XF86WakeUp]) menu-bar-open ([f10]) mouse-drag-mode-line ([bottom-divider down-mouse-1]) mouse-drag-vertical-line ([right-divider down-mouse-1]) mouse-select-window ([vertical-line mouse-1]) mouse-split-window-vertically ([vertical-line C-mouse-2]) scroll-bar-toolkit-scroll ([vertical-scroll-bar mouse-1]) mouse-drag-header-line ([header-line down-mouse-1]) mouse-split-window-horizontally ([mode-line C-mouse-2]) mouse-delete-window ([mode-line mouse-3]) mouse-delete-other-windows ([mode-line mouse-2]) mouse-appearance-menu ([S-down-mouse-1]) mouse-buffer-menu ([C-down-mouse-1]) mouse-save-then-kill ([mouse-3]) mouse-yank-primary ([mouse-2]) mouse-set-point ([triple-mouse-1]) mouse-set-region ([drag-mouse-1]) mouse-drag-region ([down-mouse-1]) mouse-yank-secondary ([M-mouse-2]) mouse-secondary-save-then-kill ([M-mouse-3]) mouse-drag-secondary ([M-down-mouse-1]) mouse-set-secondary ([M-drag-mouse-1]) mouse-start-secondary ([M-mouse-1]) toggle-frame-fullscreen ([f11]) compose-last-chars ([compose-last-chars]) tmm-menubar-mouse ([menu-bar mouse-1]) kmacro-end-or-call-macro ([f4]) kmacro-start-macro-or-insert-counter ([f3]) left-word ([C-left]) right-word ([C-right]) delete-forward-char ([deletechar]) overwrite-mode ([insertchar]) right-char ([right]) left-char ([left]) kill-whole-line ([C-S-backspace]) search-forward ([find]) handle-delete-frame ([delete-frame]) handle-select-window ([select-window]) handle-switch-frame ([switch-frame]))) :extract-lookup #s(hash-table size 730 test equal rehash-size 1.5 rehash-threshold 0.8 data ([0] set-mark-command [1] move-beginning-of-line [2] backward-char [4] delete-char [5] move-end-of-line [6] forward-char [7] keyboard-quit [8 113] help-quit [8 118] describe-variable [8 119] where-is [8 116] help-with-tutorial [8 115] describe-syntax [8 114] info-emacs-manual [8 80] describe-package [8 112] finder-by-keyword [8 110] view-emacs-news [8 109] describe-mode [8 108] view-lossage [8 107] describe-key [8 52 105] info-other-window [8 105] info [8 104] view-hello-file [8 103] describe-gnu-project [8 102] describe-function [8 101] view-echo-area-messages [8 100] apropos-documentation [8 99] describe-key-briefly [8 98] describe-bindings [8 97] apropos-command [8 83] info-lookup-symbol [8 76] describe-language-environment [8 75] Info-goto-emacs-key-command-node [8 73] describe-input-method [8 70] Info-goto-emacs-command-node [8 67] describe-coding-system [8 28] describe-input-method [8 23] describe-no-warranty [8 20] view-emacs-todo [8 16] view-emacs-problems [8 15] describe-distribution [8 14] view-emacs-news [8 13] view-order-manuals [8 6] view-emacs-FAQ [8 5] view-external-packages [8 4] view-emacs-debugging [8 3] describe-copying [8 1] about-emacs [8 63] help-for-help [8 46] display-local-help [8 f1] help-for-help [8 help] help-for-help [8 8] help-for-help [9] indent-for-tab-command [10] electric-newline-and-maybe-indent [11] kill-line [12] recenter-top-bottom [13] newline [14] next-line [15] open-line [16] previous-line [17] quoted-insert [18] isearch-backward [19] isearch-forward [20] transpose-chars [21] universal-argument [22] scroll-up-command [23] kill-region [24 0] pop-global-mark [24 2] list-buffers [24 3] save-buffers-kill-terminal [24 4] list-directory [24 5] eval-last-sexp [24 6] find-file [24 9] indent-rigidly [24 11 120] kmacro-to-register [24 11 110] kmacro-name-last-macro [24 11 98] kmacro-bind-to-key [24 11 32] kmacro-step-edit-macro [24 11 108] kmacro-edit-lossage [24 11 101] edit-kbd-macro [24 11 13] kmacro-edit-macro [24 11 5] kmacro-edit-macro-repeat [24 11 1] kmacro-add-counter [24 11 9] kmacro-insert-counter [24 11 3] kmacro-set-counter [24 11 6] kmacro-set-format [24 11 12] kmacro-call-ring-2nd-repeat [24 11 20] kmacro-swap-ring [24 11 4] kmacro-delete-ring-head [24 11 22] kmacro-view-macro-repeat [24 11 16] kmacro-cycle-ring-previous [24 11 14] kmacro-cycle-ring-next [24 11 113] kbd-macro-query [24 11 114] apply-macro-to-region-lines [24 11 11] kmacro-end-or-call-macro-repeat [24 11 19] kmacro-start-macro [24 11 115] kmacro-start-macro [24 12] downcase-region [24 13 108] set-language-environment [24 13 99] universal-coding-system-argument [24 13 28] set-input-method [24 13 88] set-next-selection-coding-system [24 13 120] set-selection-coding-system [24 13 112] set-buffer-process-coding-system [24 13 107] set-keyboard-coding-system [24 13 116] set-terminal-coding-system [24 13 70] set-file-name-coding-system [24 13 114] revert-buffer-with-coding-system [24 13 102] set-buffer-file-coding-system [24 14] set-goal-column [24 15] delete-blank-lines [24 16] mark-page [24 17] read-only-mode [24 18] find-file-read-only [24 19] save-buffer [24 20] transpose-lines [24 21] upcase-region [24 22] find-alternate-file [24 23] write-file [24 24] exchange-point-and-mark [24 26] suspend-frame [24 27 58] repeat-complex-command [24 27 27] repeat-complex-command [24 32] rectangle-mark-mode [24 36] set-selective-display [24 39] expand-abbrev [24 40] kmacro-start-macro [24 41] kmacro-end-macro [24 42] calc-dispatch [24 43] balance-windows [24 45] shrink-window-if-larger-than-buffer [24 46] set-fill-prefix [24 48] delete-window [24 49] delete-other-windows [24 50] split-window-below [24 51] split-window-right [24 52 46] find-tag-other-window [24 52 100] dired-other-window [24 52 15] display-buffer [24 52 98] switch-to-buffer-other-window [24 52 6] find-file-other-window [24 52 114] find-file-read-only-other-window [24 52 102] find-file-other-window [24 52 48] kill-buffer-and-window [24 52 99] clone-indirect-buffer-other-window [24 52 97] add-change-log-entry-other-window [24 52 109] compose-mail-other-window [24 53 111] other-frame [24 53 48] delete-frame [24 53 49] delete-other-frames [24 53 50] make-frame-command [24 53 46] find-tag-other-frame [24 53 100] dired-other-frame [24 53 15] display-buffer-other-frame [24 53 114] find-file-read-only-other-frame [24 53 6] find-file-other-frame [24 53 102] find-file-other-frame [24 53 98] switch-to-buffer-other-frame [24 53 109] compose-mail-other-frame [24 54 115] 2C-split [24 54 98] 2C-associate-buffer [24 54 f2] 2C-two-columns [24 54 50] 2C-two-columns [24 56 13] insert-char [24 59] comment-set-column [24 60] scroll-left [24 61] what-cursor-position [24 62] scroll-right [24 91] backward-page [24 93] forward-page [24 94] enlarge-window [24 96] next-error [24 97 110] expand-jump-to-next-slot [24 97 112] expand-jump-to-previous-slot [24 97 39] expand-abbrev [24 97 101] expand-abbrev [24 97 45] inverse-add-global-abbrev [24 97 105 108] inverse-add-mode-abbrev [24 97 105 103] inverse-add-global-abbrev [24 97 43] add-mode-abbrev [24 97 103] add-global-abbrev [24 97 1] add-mode-abbrev [24 97 108] add-mode-abbrev [24 98] switch-to-buffer [24 100] dired [24 101] kmacro-end-and-call-macro [24 102] set-fill-column [24 104] mark-whole-buffer [24 105] insert-file [24 107] kill-buffer [24 108] count-lines-page [24 109] compose-mail [24 110 112] narrow-to-page [24 110 100] narrow-to-defun [24 110 119] widen [24 110 110] narrow-to-region [24 111] other-window [24 113] kbd-macro-query [24 114 108] bookmark-bmenu-list [24 114 109] bookmark-set [24 114 98] bookmark-jump [24 114 102] frameset-to-register [24 114 119] window-configuration-to-register [24 114 43] increment-register [24 114 110] number-to-register [24 114 114] copy-rectangle-to-register [24 114 103] insert-register [24 114 105] insert-register [24 114 120] copy-to-register [24 114 115] copy-to-register [24 114 106] jump-to-register [24 114 32] point-to-register [24 114 67108896] point-to-register [24 114 0] point-to-register [24 114 27 119] copy-rectangle-as-kill [24 114 78] rectangle-number-lines [24 114 116] string-rectangle [24 114 111] open-rectangle [24 114 121] yank-rectangle [24 114 100] delete-rectangle [24 114 107] kill-rectangle [24 114 99] clear-rectangle [24 115] save-some-buffers [24 117] undo [24 118 126] vc-revision-other-window [24 118 68] vc-root-diff [24 118 61] vc-diff [24 118 43] vc-update [24 118 118] vc-next-action [24 118 117] vc-revert [24 118 115] vc-create-tag [24 118 114] vc-retrieve-tag [24 118 109] vc-merge [24 118 79] vc-log-outgoing [24 118 73] vc-log-incoming [24 118 76] vc-print-root-log [24 118 108] vc-print-log [24 118 105] vc-register [24 118 104] vc-insert-headers [24 118 103] vc-annotate [24 118 100] vc-dir [24 118 99] vc-rollback [24 118 98] vc-switch-backend [24 118 97] vc-update-change-log [24 122] repeat [24 123] shrink-window-horizontally [24 125] enlarge-window-horizontally [24 127] backward-kill-sentence [24 67108912] text-scale-adjust [24 67108925] text-scale-adjust [24 67108909] text-scale-adjust [24 67108907] text-scale-adjust [24 67108896] pop-global-mark [24 C-left] previous-buffer [24 left] previous-buffer [24 C-right] next-buffer [24 right] next-buffer [25] yank [26] suspend-frame [27 0] mark-sexp [27 1] beginning-of-defun [27 2] backward-sexp [27 3] exit-recursive-edit [27 4] down-list [27 5] end-of-defun [27 6] forward-sexp [27 8] mark-defun [27 9] complete-symbol [27 10] indent-new-comment-line [27 11] kill-sexp [27 12] reposition-window [27 14] forward-list [27 15] split-line [27 16] backward-list [27 18] isearch-backward-regexp [27 19] isearch-forward-regexp [27 20] transpose-sexps [27 21] backward-up-list [27 22] scroll-other-window [27 23] append-next-kill [27 27 58] eval-expression [27 27 27] keyboard-escape-quit [27 28] indent-region [27 32] just-one-space [27 33] shell-command [27 36] ispell-word [27 37] query-replace [27 38] async-shell-command [27 39] abbrev-prefix-mark [27 40] insert-parentheses [27 41] move-past-close-and-reindent [27 42] pop-tag-mark [27 44] tags-loop-continue [27 45] negative-argument [27 46] find-tag [27 47] dabbrev-expand [27 58] eval-expression [27 59] comment-dwim [27 60] beginning-of-buffer [27 61] count-words-region [27 62] end-of-buffer [27 64] mark-word [27 92] delete-horizontal-space [27 94] delete-indentation [27 96] tmm-menubar [27 97] backward-sentence [27 98] backward-word [27 99] capitalize-word [27 100] kill-word [27 101] forward-sentence [27 102] forward-word [27 103 9] move-to-column [27 103 112] previous-error [27 103 110] next-error [27 103 27 112] previous-error [27 103 27 110] next-error [27 103 27 103] goto-line [27 103 103] goto-line [27 103 99] goto-char [27 104] mark-paragraph [27 105] tab-to-tab-stop [27 106] indent-new-comment-line [27 107] kill-sentence [27 108] downcase-word [27 109] back-to-indentation [27 111 27 115] center-line [27 111 27 83] center-paragraph [27 111 27 111] font-lock-fontify-block [27 113] fill-paragraph [27 114] move-to-window-line-top-bottom [27 115 46] isearch-forward-symbol-at-point [27 115 95] isearch-forward-symbol [27 115 119] isearch-forward-word [27 115 104 119] hi-lock-write-interactive-patterns [27 115 104 117] unhighlight-regexp [27 115 104 46] highlight-symbol-at-point [27 115 104 108] highlight-lines-matching-regexp [27 115 104 112] highlight-phrase [27 115 104 114] highlight-regexp [27 115 111] occur [27 116] transpose-words [27 117] upcase-word [27 118] scroll-down-command [27 119] kill-ring-save [27 120] execute-extended-command [27 121] yank-pop [27 122] zap-to-char [27 123] backward-paragraph [27 124] shell-command-on-region [27 125] forward-paragraph [27 126] not-modified [27 127] backward-kill-word [27 67108901] query-replace-regexp [27 f10] toggle-frame-maximized [27 67108910] find-tag-regexp [27 67108911] dabbrev-completion [27 C-backspace] backward-kill-sexp [27 C-delete] backward-kill-sexp [27 67108896] mark-sexp [27 C-end] end-of-defun [27 C-home] beginning-of-defun [27 C-down] down-list [27 C-up] backward-up-list [27 C-right] forward-sexp [27 C-left] backward-sexp [27 left] backward-word [27 right] forward-word [27 begin] beginning-of-buffer-other-window [27 end] end-of-buffer-other-window [27 33554454] scroll-other-window-down [27 prior] scroll-other-window-down [27 next] scroll-other-window [27 home] beginning-of-buffer-other-window [27 67108909] negative-argument [27 67108921] digit-argument [27 67108920] digit-argument [27 67108919] digit-argument [27 67108918] digit-argument [27 67108917] digit-argument [27 67108916] digit-argument [27 67108915] digit-argument [27 67108914] digit-argument [27 67108913] digit-argument [27 67108912] digit-argument [28] toggle-input-method [29] abort-recursive-edit [31] undo [127] delete-backward-char [S-mouse-3] kmacro-end-call-mouse [C-mouse-5] mwheel-scroll [S-mouse-5] mwheel-scroll [mouse-5] mwheel-scroll [C-mouse-4] mwheel-scroll [S-mouse-4] mwheel-scroll [mouse-4] mwheel-scroll [XF86WakeUp] ignore [f10] menu-bar-open [bottom-divider down-mouse-1] mouse-drag-mode-line [right-divider down-mouse-1] mouse-drag-vertical-line [vertical-line mouse-1] mouse-select-window [vertical-line down-mouse-1] mouse-drag-vertical-line [vertical-line C-mouse-2] mouse-split-window-vertically [vertical-scroll-bar mouse-1] scroll-bar-toolkit-scroll [vertical-scroll-bar C-mouse-2] mouse-split-window-vertically [header-line mouse-1] mouse-select-window [header-line down-mouse-1] mouse-drag-header-line [mode-line C-mouse-2] mouse-split-window-horizontally [mode-line mouse-3] mouse-delete-window [mode-line mouse-2] mouse-delete-other-windows [mode-line down-mouse-1] mouse-drag-mode-line [mode-line drag-mouse-1] mouse-select-window [mode-line mouse-1] mouse-select-window [S-down-mouse-1] mouse-appearance-menu [C-down-mouse-1] mouse-buffer-menu [mouse-3] mouse-save-then-kill [mouse-2] mouse-yank-primary [triple-mouse-1] mouse-set-point [double-mouse-1] mouse-set-point [drag-mouse-1] mouse-set-region [mouse-1] mouse-set-point [down-mouse-1] mouse-drag-region [M-mouse-2] mouse-yank-secondary [M-mouse-3] mouse-secondary-save-then-kill [M-down-mouse-1] mouse-drag-secondary [M-drag-mouse-1] mouse-set-secondary [M-mouse-1] mouse-start-secondary [M-f10] toggle-frame-maximized [f11] toggle-frame-fullscreen [compose-last-chars] compose-last-chars [f1 113] help-quit [f1 118] describe-variable [f1 119] where-is [f1 116] help-with-tutorial [f1 115] describe-syntax [f1 114] info-emacs-manual [f1 80] describe-package [f1 112] finder-by-keyword [f1 110] view-emacs-news [f1 109] describe-mode [f1 108] view-lossage [f1 107] describe-key [f1 52 105] info-other-window [f1 105] info [f1 104] view-hello-file [f1 103] describe-gnu-project [f1 102] describe-function [f1 101] view-echo-area-messages [f1 100] apropos-documentation [f1 99] describe-key-briefly [f1 98] describe-bindings [f1 97] apropos-command [f1 83] info-lookup-symbol [f1 76] describe-language-environment [f1 75] Info-goto-emacs-key-command-node [f1 73] describe-input-method [f1 70] Info-goto-emacs-command-node [f1 67] describe-coding-system [f1 28] describe-input-method [f1 23] describe-no-warranty [f1 20] view-emacs-todo [f1 16] view-emacs-problems [f1 15] describe-distribution [f1 14] view-emacs-news [f1 13] view-order-manuals [f1 6] view-emacs-FAQ [f1 5] view-external-packages [f1 4] view-emacs-debugging [f1 3] describe-copying [f1 1] about-emacs [f1 63] help-for-help [f1 46] display-local-help [f1 f1] help-for-help [f1 help] help-for-help [f1 8] help-for-help [help 113] help-quit [help 118] describe-variable [help 119] where-is [help 116] help-with-tutorial [help 115] describe-syntax [help 114] info-emacs-manual [help 80] describe-package [help 112] finder-by-keyword [help 110] view-emacs-news [help 109] describe-mode [help 108] view-lossage [help 107] describe-key [help 52 105] info-other-window [help 105] info [help 104] view-hello-file [help 103] describe-gnu-project [help 102] describe-function [help 101] view-echo-area-messages [help 100] apropos-documentation [help 99] describe-key-briefly [help 98] describe-bindings [help 97] apropos-command [help 83] info-lookup-symbol [help 76] describe-language-environment [help 75] Info-goto-emacs-key-command-node [help 73] describe-input-method [help 70] Info-goto-emacs-command-node [help 67] describe-coding-system [help 28] describe-input-method [help 23] describe-no-warranty [help 20] view-emacs-todo [help 16] view-emacs-problems [help 15] describe-distribution [help 14] view-emacs-news [help 13] view-order-manuals [help 6] view-emacs-FAQ [help 5] view-external-packages [help 4] view-emacs-debugging [help 3] describe-copying [help 1] about-emacs [help 63] help-for-help [help 46] display-local-help [help f1] help-for-help [help help] help-for-help [help 8] help-for-help [f2 115] 2C-split [f2 98] 2C-associate-buffer [f2 f2] 2C-two-columns [f2 50] 2C-two-columns [menu-bar mouse-1] tmm-menubar-mouse [f4] kmacro-end-or-call-macro [f3] kmacro-start-macro-or-insert-counter [C-M-end] end-of-defun [C-M-home] beginning-of-defun [C-M-down] down-list [C-M-up] backward-up-list [C-M-right] forward-sexp [C-M-left] backward-sexp [S-delete] kill-region [C-backspace] backward-kill-word [C-delete] kill-word [C-left] left-word [C-right] right-word [M-left] left-word [M-right] right-word [mouse-movement] ignore [deletechar] delete-forward-char [deleteline] kill-line [insertline] open-line [open] find-file [again] repeat-complex-command [redo] repeat-complex-command [undo] undo [S-insertchar] yank [C-insertchar] kill-ring-save [insertchar] overwrite-mode [S-insert] yank [C-insert] kill-ring-save [insert] overwrite-mode [execute] execute-extended-command [M-begin] beginning-of-buffer-other-window [begin] beginning-of-buffer [M-end] end-of-buffer-other-window [C-end] end-of-buffer [end] move-end-of-line [M-prior] scroll-other-window-down [M-next] scroll-other-window [C-next] scroll-left [C-prior] scroll-right [C-down] forward-paragraph [C-up] backward-paragraph [next] scroll-up-command [prior] scroll-down-command [down] next-line [right] right-char [up] previous-line [left] left-char [M-home] beginning-of-buffer-other-window [C-home] beginning-of-buffer [home] move-beginning-of-line [C-S-backspace] kill-whole-line [find] search-forward [menu] execute-extended-command [67108896] set-mark-command [67108909] negative-argument [67108921] digit-argument [67108920] digit-argument [67108919] digit-argument [67108918] digit-argument [67108917] digit-argument [67108916] digit-argument [67108915] digit-argument [67108914] digit-argument [67108913] digit-argument [67108912] digit-argument [XF86Back] previous-buffer [XF86Forward] next-buffer [67108911] undo [delete-frame] handle-delete-frame [select-window] handle-select-window [switch-frame] handle-switch-frame)))) (:map-key -2305843009213693870 :parent (:map-key -2305843009213693944 :parent (:map-key -2305843009213693942))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (custom-mode-link-map))) (:map-key -2305843009213693871) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (query-replace-map))) (:map-key -2305843009213693872) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-search-menu))) (:map-key -2305843009213693873) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (visual-line-mode-map) :use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693874) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (help-mode-menu))) (:map-key -2305843009213693875) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (ctl-x-4-map))) (:map-key -2305843009213693876) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (global-buffers-menu-map))) (:map-key -2305843009213693877 :parent (:map-key -2305843009213693860)) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (occur-edit-mode-map))) (:map-key -2305843009213693878) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (ergoemacs-map-properties--global-map-before-ergoemacs))) (:map-key -2305843009213693879) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (setup-indian-environment-map))) (:map-key -2305843009213693880) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-describe-menu))) (:map-key -2305843009213693881) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (widget-text-keymap))) (:map-key -2305843009213693882 :parent (:map-key -2305843009213693843)) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (messages-buffer-mode-map))) (:map-key -2305843009213693883) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (isearch-help-map))) (:map-key -2305843009213693884) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (facemenu-keymap))) (:map-key -2305843009213693885) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (2C-minor-mode-map))) (:map-key -2305843009213693886) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (widget-field-keymap))) (:map-key -2305843009213693887) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (vc-mode-line-map))) (:map-key -2305843009213693888) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-encryption-decryption-menu))) (:map-key -2305843009213693889) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-ediff-menu))) (:map-key -2305843009213693890) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (occur-mode-map))) (:map-key -2305843009213693891) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (ctl-x-r-map))) (:map-key -2305843009213693892) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (key-translation-map))) (:map-key -2305843009213693893) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (tabulated-list-sort-button-map))) (:map-key -2305843009213693894) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (describe-language-environment-map))) (:map-key -2305843009213693895) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (prog-mode-map))) (:map-key -2305843009213693896 :parent (:map-key -2305843009213693839 :parent (:map-key -2305843009213693895))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (lisp-mode-map))) (:map-key -2305843009213693897) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (cvs-global-menu))) (:map-key -2305843009213693898 :parent (:map-key -2305843009213693913)) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (tabulated-list-mode-map))) (:map-key -2305843009213693900) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (facemenu-menu))) (:map-key -2305843009213693901) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (Custom-mode-menu))) (:map-key -2305843009213693902 :parent (:map-key -2305843009213693819)) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (minibuffer-local-isearch-map))) (:map-key -2305843009213693903) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (set-coding-system-map))) (:map-key -2305843009213693904) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (setup-european-environment-map))) (:map-key -2305843009213693905 :parent (:map-key -2305843009213693871)) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (kmacro-step-edit-map))) (:map-key -2305843009213693906) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (mode-line-input-method-map))) (:map-key -2305843009213693907) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-showhide-scroll-bar-menu))) (:map-key -2305843009213693908) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (x-alternatives-map))) (:map-key -2305843009213693909) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (special-event-map))) (:map-key -2305843009213693910) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (function-key-map))) (:map-key -2305843009213693911) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (mode-line-mode-menu))) (:map-key -2305843009213693912) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-tools-menu))) (:map-key -2305843009213693913) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (button-buffer-map))) (:map-key -2305843009213693914) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (undo-tree-map) :use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693915) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-help-menu))) (:map-key -2305843009213693916) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-bookmark-map))) (:map-key -2305843009213693917) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-custom-menu))) (:map-key -2305843009213693918 :parent (:map-key -2305843009213693913 :composed ((:map-key -2305843009213693913)) :parent (:map-key -2305843009213693843))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (help-mode-map) :use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693919) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (mule-keymap))) (:map-key -2305843009213693920) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (mode-line-minor-mode-keymap))) (:map-key -2305843009213693921) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-games-menu))) (:map-key -2305843009213693922) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (facemenu-justification-menu))) (:map-key -2305843009213693923) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (universal-argument-map))) (:map-key -2305843009213693924) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (mode-line-coding-system-map))) (:map-key -2305843009213693925) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (minibuffer-inactive-mode-map))) (:map-key -2305843009213693926) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (ctl-x-5-map))) (:map-key -2305843009213693927) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-i-search-menu))) (:map-key -2305843009213693928) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-goto-menu))) (:map-key -2305843009213693929) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (vc-menu-map))) (:map-key -2305843009213693930) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (ispell-menu-map))) (:map-key -2305843009213693931) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (button-map) :use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693932) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (facemenu-background-menu))) (:map-key -2305843009213693933) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (describe-chinese-environment-map))) (:map-key -2305843009213693934) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-epatch-menu))) (:map-key -2305843009213693935 :parent (:map-key -2305843009213693819)) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (minibuffer-local-ns-map))) (:map-key -2305843009213693936 :parent (:map-key -2305843009213693910)) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (local-function-key-map))) (:map-key -2305843009213693937 :parent (:map-key -2305843009213693819)) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (read-expression-map))) (:map-key -2305843009213693938) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (indent-rigidly-map))) (:map-key -2305843009213693939) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (vc-prefix-map))) (:map-key -2305843009213693940) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-edit-menu))) (:map-key -2305843009213693941) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (edmacro-mode-map))) (:map-key -2305843009213693942) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (widget-keymap))) (:map-key -2305843009213693943 :parent (:map-key -2305843009213693871)) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (multi-query-replace-map))) (:map-key -2305843009213693944 :parent (:map-key -2305843009213693942)) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (custom-mode-map))) (:map-key -2305843009213693945) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (ctl-x-map))) (:map-key -2305843009213693946) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-options-menu))) (:map-key -2305843009213693947) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (describe-european-environment-map))) (:map-key -2305843009213693948 :parent (:map-key -2305843009213693839 :parent (:map-key -2305843009213693895))) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (lisp-interaction-mode-map) :use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693949) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (esc-map))) (:map-key -2305843009213693950) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (menu-bar-replace-menu))) (:map-key -2305843009213693789) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (ergoemacs-map-properties--before-ergoemacs))) (:map-key -2305843009213693783) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:map-list-hash (ergoemacs-map-properties--after-ergoemacs))) (-2305843009213693952) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:extract-keys ([switch-frame] [select-window] [delete-frame] [67108911] [XF86Forward] [XF86Back] [67108912] [67108913] [67108914] [67108915] [67108916] [67108917] [67108918] [67108919] [67108920] [67108921] [67108896] [menu] [find] [C-S-backspace] [home] [C-home] [M-home] [left] [up] [right] [down] [prior] [next] [C-up] [C-down] [C-prior] [C-next] [M-next] [M-prior] [end] [C-end] [M-end] [begin] [M-begin] [execute] [insert] [C-insert] [S-insert] [insertchar] [C-insertchar] [S-insertchar] [undo] [redo] [again] [open] [insertline] [deleteline] [deletechar] [mouse-movement] [M-right] [M-left] [C-right] [C-left] [C-delete] [C-backspace] [S-delete] [C-M-left] [C-M-right] [C-M-up] [C-M-down] [C-M-home] [C-M-end] [f3] [f4] [menu-bar mouse-1] [f2 50] [f2 f2] [f2 98] [f2 115] [help 8] [help help] [help f1] [help 46] [help 63] [help 1] [help 3] [help 4] [help 5] [help 6] [help 13] [help 14] [help 15] [help 16] [help 20] [help 23] [help 28] [help 67] [help 70] [help 73] [help 75] [help 76] [help 83] [help 97] [help 98] [help 99] [help 100] [help 101] [help 102] [help 103] [help 104] [help 105] [help 52] [help 107] [help 108] [help 109] [help 110] [help 112] [help 80] [help 114] [help 115] [help 116] [help 119] [help 118] [help 113] [help 39] [help 49] [help 50] [help 51] [help 53] [help 55] [help 56] [help 57] [help 96] [help 122] [help 26] [help 90] [f1 8] [f1 help] [f1 f1] [f1 46] [f1 63] [f1 1] [f1 3] [f1 4] [f1 5] [f1 6] [f1 13] [f1 14] [f1 15] [f1 16] [f1 20] [f1 23] [f1 28] [f1 67] [f1 70] [f1 73] [f1 75] [f1 76] [f1 83] [f1 97] [f1 98] [f1 99] [f1 100] [f1 101] [f1 102] [f1 103] [f1 104] [f1 105] [f1 52] [f1 107] [f1 108] [f1 109] [f1 110] [f1 112] [f1 80] [f1 114] [f1 115] [f1 116] [f1 119] [f1 118] [f1 113] [f1 39] [f1 49] [f1 50] [f1 51] [f1 53] [f1 55] [f1 56] [f1 57] [f1 96] [f1 122] [f1 26] [f1 90] [compose-last-chars] [f11] [M-f10] [M-mouse-1] [M-drag-mouse-1] [M-down-mouse-1] [M-mouse-3] [M-mouse-2] [down-mouse-1] [mouse-1] [drag-mouse-1] [double-mouse-1] [triple-mouse-1] [mouse-2] [mouse-3] [C-down-mouse-1] [S-down-mouse-1] [mode-line mouse-1] [mode-line drag-mouse-1] [mode-line down-mouse-1] [mode-line mouse-2] [mode-line mouse-3] [mode-line C-mouse-2] [header-line down-mouse-1] [header-line mouse-1] [vertical-scroll-bar C-mouse-2] [vertical-scroll-bar mouse-1] [vertical-line C-mouse-2] [vertical-line down-mouse-1] [vertical-line mouse-1] [right-divider down-mouse-1] [bottom-divider down-mouse-1] [f10] [XF86WakeUp] [mouse-4] [S-mouse-4] [C-mouse-4] [mouse-5] [S-mouse-5] [C-mouse-5] [S-mouse-3] [127] [29] [28] [27 67108912] [27 67108913] [27 67108914] [27 67108915] [27 67108916] [27 67108917] [27 67108918] [27 67108919] [27 67108920] [27 67108921] [27 67108909] [27 home] [27 next] [27 prior] [27 33554454] [27 end] [27 begin] [27 right] [27 left] [27 C-left] [27 C-right] [27 C-up] [27 C-down] [27 C-home] [27 C-end] [27 67108896] [27 C-delete] [27 C-backspace] [27 67108911] [27 67108910] [27 f10] [27 67108901] [27 127] [27 126] [27 125] [27 124] [27 123] [27 122] [27 121] [27 120] [27 119] [27 118] [27 117] [27 116] [27 115 111] [27 115 104 114] [27 115 104 112] [27 115 104 108] [27 115 104 46] [27 115 104 117] [27 115 104 119] [27 115 119] [27 115 95] [27 115 46] [27 115 f8] [27 114] [27 113] [27 111 27 111] [27 111 27 83] [27 111 27 115] [27 109] [27 108] [27 107] [27 106] [27 105] [27 104] [27 103 99] [27 103 103] [27 103 27 103] [27 103 27 110] [27 103 27 112] [27 103 110] [27 103 112] [27 103 9] [27 102] [27 101] [27 100] [27 99] [27 98] [27 97] [27 96] [27 94] [27 92] [27 64] [27 62] [27 61] [27 60] [27 59] [27 58] [27 51] [27 47] [27 46] [27 45] [27 44] [27 42] [27 41] [27 40] [27 39] [27 38] [27 37] [27 36] [27 33] [27 32] [27 28] [27 27 27] [27 27 58] [27 23] [27 22] [27 21] [27 20] [27 19] [27 18] [27 16] [27 15] [27 14] [27 12] [27 11] [27 10] [27 9] [27 8] [27 6] [27 5] [27 4] [27 3] [27 2] [27 1] [27 0] [26] [25] [24 right] [24 C-right] [24 left] [24 C-left] [24 67108896] [24 67108907] [24 67108909] [24 67108925] [24 67108912] [24 127] [24 125] [24 123] [24 122] [24 118 97] [24 118 98] [24 118 99] [24 118 100] [24 118 103] [24 118 104] [24 118 105] [24 118 108] [24 118 76] [24 118 73] [24 118 79] [24 118 109] [24 118 114] [24 118 115] [24 118 117] [24 118 118] [24 118 43] [24 118 61] [24 118 68] [24 118 126] [24 117] [24 115] [24 114 99] [24 114 107] [24 114 100] [24 114 121] [24 114 111] [24 114 116] [24 114 78] [24 114 27 119] [24 114 0] [24 114 67108896] [24 114 32] [24 114 106] [24 114 115] [24 114 120] [24 114 105] [24 114 103] [24 114 114] [24 114 110] [24 114 43] [24 114 119] [24 114 102] [24 114 98] [24 114 109] [24 114 108] [24 113] [24 111] [24 110 110] [24 110 119] [24 110 100] [24 110 112] [24 109] [24 108] [24 107] [24 105] [24 104] [24 102] [24 101] [24 100] [24 98] [24 97 108] [24 97 1] [24 97 103] [24 97 43] [24 97 105 103] [24 97 105 108] [24 97 45] [24 97 101] [24 97 39] [24 97 112] [24 97 110] [24 96] [24 94] [24 93] [24 91] [24 62] [24 61] [24 60] [24 59] [24 56 13] [24 54 50] [24 54 f2] [24 54 98] [24 54 115] [24 53 109] [24 53 98] [24 53 102] [24 53 6] [24 53 114] [24 53 15] [24 53 100] [24 53 46] [24 53 50] [24 53 49] [24 53 48] [24 53 111] [24 52 109] [24 52 97] [24 52 99] [24 52 48] [24 52 102] [24 52 114] [24 52 6] [24 52 98] [24 52 15] [24 52 100] [24 52 46] [24 51] [24 50] [24 49] [24 48] [24 46] [24 45] [24 43] [24 42] [24 41] [24 40] [24 39] [24 36] [24 35] [24 32] [24 27 27] [24 27 58] [24 26] [24 24] [24 23] [24 22] [24 21] [24 20] [24 19] [24 18] [24 17] [24 16] [24 15] [24 14] [24 13 102] [24 13 114] [24 13 70] [24 13 116] [24 13 107] [24 13 112] [24 13 120] [24 13 88] [24 13 28] [24 13 99] [24 13 108] [24 12] [24 11 115] [24 11 19] [24 11 11] [24 11 114] [24 11 113] [24 11 14] [24 11 16] [24 11 22] [24 11 4] [24 11 20] [24 11 12] [24 11 6] [24 11 3] [24 11 9] [24 11 1] [24 11 5] [24 11 13] [24 11 101] [24 11 108] [24 11 32] [24 11 98] [24 11 110] [24 11 120] [24 9] [24 6] [24 5] [24 4] [24 3] [24 2] [24 0] [23] [22] [21] [19] [18] [17] [16] [15] [14] [13] [12] [11] [10] [9] [8] [7] [6] [5] [2] [1] [0]) :extract-where-is #s(hash-table size 487 test eql rehash-size 1.5 rehash-threshold 0.8 data (set-mark-command ([0]) move-beginning-of-line ([1]) backward-char ([2]) move-end-of-line ([5]) forward-char ([6]) keyboard-quit ([7]) mc/mark-previous-like-this ([8]) indent-for-tab-command ([9]) electric-newline-and-maybe-indent ([10]) kill-line ([11]) recenter-top-bottom ([12]) newline ([13]) mc/mark-next-like-this ([14]) open-line ([15]) previous-line ([16]) quoted-insert ([17]) isearch-backward ([18]) isearch-forward ([19]) universal-argument ([21]) scroll-up-command ([22]) kill-region ([23]) pop-global-mark ([24 0]) list-buffers ([24 2]) save-buffers-kill-terminal ([24 3]) list-directory ([24 4]) eval-last-sexp ([24 5]) find-file ([24 6]) indent-rigidly ([24 9]) kmacro-to-register ([24 11 120]) kmacro-name-last-macro ([24 11 110]) kmacro-bind-to-key ([24 11 98]) kmacro-step-edit-macro ([24 11 32]) kmacro-edit-lossage ([24 11 108]) edit-kbd-macro ([24 11 101]) kmacro-edit-macro ([24 11 13]) kmacro-edit-macro-repeat ([24 11 5]) kmacro-add-counter ([24 11 1]) kmacro-insert-counter ([24 11 9]) kmacro-set-counter ([24 11 3]) kmacro-set-format ([24 11 6]) kmacro-call-ring-2nd-repeat ([24 11 12]) kmacro-swap-ring ([24 11 20]) kmacro-delete-ring-head ([24 11 4]) kmacro-view-macro-repeat ([24 11 22]) kmacro-cycle-ring-previous ([24 11 16]) kmacro-cycle-ring-next ([24 11 14]) kbd-macro-query ([24 11 113]) apply-macro-to-region-lines ([24 11 114]) kmacro-end-or-call-macro-repeat ([24 11 11]) kmacro-start-macro ([24 11 19]) downcase-region ([24 12]) set-language-environment ([24 13 108]) universal-coding-system-argument ([24 13 99]) set-input-method ([24 13 28]) set-next-selection-coding-system ([24 13 88]) set-selection-coding-system ([24 13 120]) set-buffer-process-coding-system ([24 13 112]) set-keyboard-coding-system ([24 13 107]) set-terminal-coding-system ([24 13 116]) set-file-name-coding-system ([24 13 70]) revert-buffer-with-coding-system ([24 13 114]) set-buffer-file-coding-system ([24 13 102]) set-goal-column ([24 14]) delete-blank-lines ([24 15]) mark-page ([24 16]) read-only-mode ([24 17]) find-file-read-only ([24 18]) save-buffer ([24 19]) transpose-lines ([24 20]) upcase-region ([24 21]) find-alternate-file ([24 22]) write-file ([24 23]) exchange-point-and-mark ([24 24]) suspend-frame ([24 26]) repeat-complex-command ([24 27 58]) rectangle-mark-mode ([24 32]) server-edit ([24 35]) set-selective-display ([24 36]) expand-abbrev ([24 39]) kmacro-end-macro ([24 41]) calc-dispatch ([24 42]) balance-windows ([24 43]) shrink-window-if-larger-than-buffer ([24 45]) set-fill-prefix ([24 46]) delete-window ([24 48]) delete-other-windows ([24 49]) split-window-below ([24 50]) split-window-right ([24 51]) find-tag-other-window ([24 52 46]) dired-other-window ([24 52 100]) display-buffer ([24 52 15]) switch-to-buffer-other-window ([24 52 98]) find-file-other-window ([24 52 6]) find-file-read-only-other-window ([24 52 114]) kill-buffer-and-window ([24 52 48]) clone-indirect-buffer-other-window ([24 52 99]) add-change-log-entry-other-window ([24 52 97]) compose-mail-other-window ([24 52 109]) other-frame ([24 53 111]) delete-frame ([24 53 48]) delete-other-frames ([24 53 49]) make-frame-command ([24 53 50]) find-tag-other-frame ([24 53 46]) dired-other-frame ([24 53 100]) display-buffer-other-frame ([24 53 15]) find-file-read-only-other-frame ([24 53 114]) find-file-other-frame ([24 53 6]) switch-to-buffer-other-frame ([24 53 98]) compose-mail-other-frame ([24 53 109]) 2C-split ([24 54 115]) 2C-associate-buffer ([24 54 98]) 2C-two-columns ([24 54 f2]) insert-char ([24 56 13]) comment-set-column ([24 59]) scroll-left ([24 60]) what-cursor-position ([24 61]) scroll-right ([24 62]) backward-page ([24 91]) forward-page ([24 93]) enlarge-window ([24 94]) next-error ([24 96]) expand-jump-to-next-slot ([24 97 110]) expand-jump-to-previous-slot ([24 97 112]) inverse-add-global-abbrev ([24 97 45]) inverse-add-mode-abbrev ([24 97 105 108]) add-mode-abbrev ([24 97 43]) add-global-abbrev ([24 97 103]) switch-to-buffer ([24 98]) dired ([24 100]) kmacro-end-and-call-macro ([24 101]) set-fill-column ([24 102]) mark-whole-buffer ([24 104]) insert-file ([24 105]) kill-buffer ([24 107]) count-lines-page ([24 108]) compose-mail ([24 109]) narrow-to-page ([24 110 112]) narrow-to-defun ([24 110 100]) widen ([24 110 119]) narrow-to-region ([24 110 110]) other-window ([24 111]) bookmark-bmenu-list ([24 114 108]) bookmark-set ([24 114 109]) bookmark-jump ([24 114 98]) frameset-to-register ([24 114 102]) window-configuration-to-register ([24 114 119]) increment-register ([24 114 43]) number-to-register ([24 114 110]) copy-rectangle-to-register ([24 114 114]) insert-register ([24 114 103]) copy-to-register ([24 114 120]) jump-to-register ([24 114 106]) point-to-register ([24 114 32]) copy-rectangle-as-kill ([24 114 27 119]) rectangle-number-lines ([24 114 78]) string-rectangle ([24 114 116]) open-rectangle ([24 114 111]) yank-rectangle ([24 114 121]) delete-rectangle ([24 114 100]) kill-rectangle ([24 114 107]) clear-rectangle ([24 114 99]) save-some-buffers ([24 115]) undo ([24 117]) vc-revision-other-window ([24 118 126]) vc-root-diff ([24 118 68]) vc-diff ([24 118 61]) vc-update ([24 118 43]) vc-next-action ([24 118 118]) vc-revert ([24 118 117]) vc-create-tag ([24 118 115]) vc-retrieve-tag ([24 118 114]) vc-merge ([24 118 109]) vc-log-outgoing ([24 118 79]) vc-log-incoming ([24 118 73]) vc-print-root-log ([24 118 76]) vc-print-log ([24 118 108]) vc-register ([24 118 105]) vc-insert-headers ([24 118 104]) vc-annotate ([24 118 103]) vc-dir ([24 118 100]) vc-rollback ([24 118 99]) vc-switch-backend ([24 118 98]) vc-update-change-log ([24 118 97]) repeat ([24 122]) shrink-window-horizontally ([24 123]) enlarge-window-horizontally ([24 125]) backward-kill-sentence ([24 127]) text-scale-adjust ([24 67108912]) previous-buffer ([24 C-left]) next-buffer ([24 C-right]) yank ([25]) mark-sexp ([27 0]) beginning-of-defun ([27 1]) backward-sexp ([27 2]) exit-recursive-edit ([27 3]) down-list ([27 4]) end-of-defun ([27 5]) forward-sexp ([27 6]) mark-defun ([27 8]) complete-symbol ([27 9]) indent-new-comment-line ([27 10]) kill-sexp ([27 11]) reposition-window ([27 12]) forward-list ([27 14]) split-line ([27 15]) backward-list ([27 16]) isearch-backward-regexp ([27 18]) isearch-forward-regexp ([27 19]) transpose-sexps ([27 20]) backward-up-list ([27 21]) scroll-other-window ([27 22]) append-next-kill ([27 23]) eval-expression ([27 27 58]) keyboard-escape-quit ([27 27 27]) indent-region ([27 28]) just-one-space ([27 32]) shell-command ([27 33]) ispell-word ([27 36]) query-replace ([27 37]) async-shell-command ([27 38]) abbrev-prefix-mark ([27 39]) insert-parentheses ([27 40]) move-past-close-and-reindent ([27 41]) pop-tag-mark ([27 42]) tags-loop-continue ([27 44]) negative-argument ([27 45]) find-tag ([27 46]) dabbrev-expand ([27 47]) split-window-vertically ([27 51]) comment-dwim ([27 59]) beginning-of-buffer ([27 60]) count-words-region ([27 61]) end-of-buffer ([27 62]) mark-word ([27 64]) delete-horizontal-space ([27 92]) delete-indentation ([27 94]) tmm-menubar ([27 96]) backward-sentence ([27 97]) backward-word ([27 98]) capitalize-word ([27 99]) kill-word ([27 100]) forward-sentence ([27 101]) forward-word ([27 102]) move-to-column ([27 103 9]) previous-error ([27 103 112]) goto-line ([27 103 27 103]) goto-char ([27 103 99]) mark-paragraph ([27 104]) tab-to-tab-stop ([27 105]) kill-sentence ([27 107]) downcase-word ([27 108]) back-to-indentation ([27 109]) center-line ([27 111 27 115]) center-paragraph ([27 111 27 83]) font-lock-fontify-block ([27 111 27 111]) fill-paragraph ([27 113]) move-to-window-line-top-bottom ([27 114]) highlight-symbol-at-point ([27 115 f8]) isearch-forward-symbol-at-point ([27 115 46]) isearch-forward-symbol ([27 115 95]) isearch-forward-word ([27 115 119]) hi-lock-write-interactive-patterns ([27 115 104 119]) unhighlight-regexp ([27 115 104 117]) highlight-lines-matching-regexp ([27 115 104 108]) highlight-phrase ([27 115 104 112]) highlight-regexp ([27 115 104 114]) occur ([27 115 111]) transpose-words ([27 116]) upcase-word ([27 117]) scroll-down-command ([27 118]) kill-ring-save ([27 119]) execute-extended-command ([27 120]) yank-pop ([27 121]) zap-to-char ([27 122]) split-window-horizontally ([27 123]) shell-command-on-region ([27 124]) forward-paragraph ([27 125]) not-modified ([27 126]) backward-kill-word ([27 127]) query-replace-regexp ([27 67108901]) toggle-frame-maximized ([27 f10]) find-tag-regexp ([27 67108910]) dabbrev-completion ([27 67108911]) backward-kill-sexp ([27 C-backspace]) beginning-of-buffer-other-window ([27 begin]) end-of-buffer-other-window ([27 end]) scroll-other-window-down ([27 33554454]) digit-argument ([27 67108921]) toggle-input-method ([28]) abort-recursive-edit ([29]) delete-backward-char ([127]) kmacro-end-call-mouse ([S-mouse-3]) mwheel-scroll ([C-mouse-5]) ignore ([XF86WakeUp]) menu-bar-open ([f10]) mouse-drag-mode-line ([bottom-divider down-mouse-1]) mouse-drag-vertical-line ([right-divider down-mouse-1]) mouse-select-window ([vertical-line mouse-1]) mouse-split-window-vertically ([vertical-line C-mouse-2]) scroll-bar-toolkit-scroll ([vertical-scroll-bar mouse-1]) mouse-drag-header-line ([header-line down-mouse-1]) mouse-split-window-horizontally ([mode-line C-mouse-2]) mouse-delete-window ([mode-line mouse-3]) mouse-delete-other-windows ([mode-line mouse-2]) mouse-appearance-menu ([S-down-mouse-1]) mouse-buffer-menu ([C-down-mouse-1]) mouse-save-then-kill ([mouse-3]) mouse-yank-primary ([mouse-2]) mouse-set-point ([triple-mouse-1]) mouse-set-region ([drag-mouse-1]) mouse-drag-region ([down-mouse-1]) mouse-yank-secondary ([M-mouse-2]) mouse-secondary-save-then-kill ([M-mouse-3]) mouse-drag-secondary ([M-down-mouse-1]) mouse-set-secondary ([M-drag-mouse-1]) mouse-start-secondary ([M-mouse-1]) toggle-frame-fullscreen ([f11]) compose-last-chars ([compose-last-chars]) ergoemacs-clean-nw ([f1 90]) ergoemacs-clean-library ([f1 26]) ergoemacs-clean ([f1 122]) elisp-index-search ([f1 96]) ergoemacs-lookup-word-definition ([f1 57]) ergoemacs-lookup-wikipedia ([f1 56]) ergoemacs-lookup-google ([f1 55]) man ([f1 53]) describe-key ([f1 51]) describe-variable ([f1 50]) describe-function ([f1 49]) ergoemacs-describe-current-theme ([f1 39]) help-quit ([f1 113]) where-is ([f1 119]) help-with-tutorial ([f1 116]) describe-syntax ([f1 115]) info-emacs-manual ([f1 114]) describe-package ([f1 80]) finder-by-keyword ([f1 112]) view-emacs-news ([f1 110]) describe-mode ([f1 109]) view-lossage ([f1 108]) describe-char ([f1 52]) info ([f1 105]) view-hello-file ([f1 104]) describe-gnu-project ([f1 103]) view-echo-area-messages ([f1 101]) apropos-documentation ([f1 100]) describe-key-briefly ([f1 99]) describe-bindings ([f1 98]) apropos-command ([f1 97]) info-lookup-symbol ([f1 83]) describe-language-environment ([f1 76]) Info-goto-emacs-key-command-node ([f1 75]) describe-input-method ([f1 73]) Info-goto-emacs-command-node ([f1 70]) describe-coding-system ([f1 67]) describe-no-warranty ([f1 23]) view-emacs-todo ([f1 20]) view-emacs-problems ([f1 16]) describe-distribution ([f1 15]) view-order-manuals ([f1 13]) view-emacs-FAQ ([f1 6]) view-external-packages ([f1 5]) view-emacs-debugging ([f1 4]) describe-copying ([f1 3]) about-emacs ([f1 1]) help-for-help ([f1 63]) display-local-help ([f1 46]) tmm-menubar-mouse ([menu-bar mouse-1]) kmacro-end-or-call-macro ([f4]) kmacro-start-macro-or-insert-counter ([f3]) left-word ([C-left]) right-word ([C-right]) delete-forward-char ([deletechar]) overwrite-mode ([insertchar]) backward-paragraph ([C-up]) next-line ([down]) right-char ([right]) left-char ([left]) kill-whole-line ([C-S-backspace]) search-forward ([find]) handle-delete-frame ([delete-frame]) handle-select-window ([select-window]) handle-switch-frame ([switch-frame]))) :extract-lookup #s(hash-table size 730 test equal rehash-size 1.5 rehash-threshold 0.8 data ([0] set-mark-command [1] move-beginning-of-line [2] backward-char [5] move-end-of-line [6] forward-char [7] keyboard-quit [8] mc/mark-previous-like-this [9] indent-for-tab-command [10] electric-newline-and-maybe-indent [11] kill-line [12] recenter-top-bottom [13] newline [14] mc/mark-next-like-this [15] open-line [16] previous-line [17] quoted-insert [18] isearch-backward [19] isearch-forward [21] universal-argument [22] scroll-up-command [23] kill-region [24 0] pop-global-mark [24 2] list-buffers [24 3] save-buffers-kill-terminal [24 4] list-directory [24 5] eval-last-sexp [24 6] find-file [24 9] indent-rigidly [24 11 120] kmacro-to-register [24 11 110] kmacro-name-last-macro [24 11 98] kmacro-bind-to-key [24 11 32] kmacro-step-edit-macro [24 11 108] kmacro-edit-lossage [24 11 101] edit-kbd-macro [24 11 13] kmacro-edit-macro [24 11 5] kmacro-edit-macro-repeat [24 11 1] kmacro-add-counter [24 11 9] kmacro-insert-counter [24 11 3] kmacro-set-counter [24 11 6] kmacro-set-format [24 11 12] kmacro-call-ring-2nd-repeat [24 11 20] kmacro-swap-ring [24 11 4] kmacro-delete-ring-head [24 11 22] kmacro-view-macro-repeat [24 11 16] kmacro-cycle-ring-previous [24 11 14] kmacro-cycle-ring-next [24 11 113] kbd-macro-query [24 11 114] apply-macro-to-region-lines [24 11 11] kmacro-end-or-call-macro-repeat [24 11 19] kmacro-start-macro [24 11 115] kmacro-start-macro [24 12] downcase-region [24 13 108] set-language-environment [24 13 99] universal-coding-system-argument [24 13 28] set-input-method [24 13 88] set-next-selection-coding-system [24 13 120] set-selection-coding-system [24 13 112] set-buffer-process-coding-system [24 13 107] set-keyboard-coding-system [24 13 116] set-terminal-coding-system [24 13 70] set-file-name-coding-system [24 13 114] revert-buffer-with-coding-system [24 13 102] set-buffer-file-coding-system [24 14] set-goal-column [24 15] delete-blank-lines [24 16] mark-page [24 17] read-only-mode [24 18] find-file-read-only [24 19] save-buffer [24 20] transpose-lines [24 21] upcase-region [24 22] find-alternate-file [24 23] write-file [24 24] exchange-point-and-mark [24 26] suspend-frame [24 27 58] repeat-complex-command [24 27 27] repeat-complex-command [24 32] rectangle-mark-mode [24 35] server-edit [24 36] set-selective-display [24 39] expand-abbrev [24 40] kmacro-start-macro [24 41] kmacro-end-macro [24 42] calc-dispatch [24 43] balance-windows [24 45] shrink-window-if-larger-than-buffer [24 46] set-fill-prefix [24 48] delete-window [24 49] delete-other-windows [24 50] split-window-below [24 51] split-window-right [24 52 46] find-tag-other-window [24 52 100] dired-other-window [24 52 15] display-buffer [24 52 98] switch-to-buffer-other-window [24 52 6] find-file-other-window [24 52 114] find-file-read-only-other-window [24 52 102] find-file-other-window [24 52 48] kill-buffer-and-window [24 52 99] clone-indirect-buffer-other-window [24 52 97] add-change-log-entry-other-window [24 52 109] compose-mail-other-window [24 53 111] other-frame [24 53 48] delete-frame [24 53 49] delete-other-frames [24 53 50] make-frame-command [24 53 46] find-tag-other-frame [24 53 100] dired-other-frame [24 53 15] display-buffer-other-frame [24 53 114] find-file-read-only-other-frame [24 53 6] find-file-other-frame [24 53 102] find-file-other-frame [24 53 98] switch-to-buffer-other-frame [24 53 109] compose-mail-other-frame [24 54 115] 2C-split [24 54 98] 2C-associate-buffer [24 54 f2] 2C-two-columns [24 54 50] 2C-two-columns [24 56 13] insert-char [24 59] comment-set-column [24 60] scroll-left [24 61] what-cursor-position [24 62] scroll-right [24 91] backward-page [24 93] forward-page [24 94] enlarge-window [24 96] next-error [24 97 110] expand-jump-to-next-slot [24 97 112] expand-jump-to-previous-slot [24 97 39] expand-abbrev [24 97 101] expand-abbrev [24 97 45] inverse-add-global-abbrev [24 97 105 108] inverse-add-mode-abbrev [24 97 105 103] inverse-add-global-abbrev [24 97 43] add-mode-abbrev [24 97 103] add-global-abbrev [24 97 1] add-mode-abbrev [24 97 108] add-mode-abbrev [24 98] switch-to-buffer [24 100] dired [24 101] kmacro-end-and-call-macro [24 102] set-fill-column [24 104] mark-whole-buffer [24 105] insert-file [24 107] kill-buffer [24 108] count-lines-page [24 109] compose-mail [24 110 112] narrow-to-page [24 110 100] narrow-to-defun [24 110 119] widen [24 110 110] narrow-to-region [24 111] other-window [24 113] kbd-macro-query [24 114 108] bookmark-bmenu-list [24 114 109] bookmark-set [24 114 98] bookmark-jump [24 114 102] frameset-to-register [24 114 119] window-configuration-to-register [24 114 43] increment-register [24 114 110] number-to-register [24 114 114] copy-rectangle-to-register [24 114 103] insert-register [24 114 105] insert-register [24 114 120] copy-to-register [24 114 115] copy-to-register [24 114 106] jump-to-register [24 114 32] point-to-register [24 114 67108896] point-to-register [24 114 0] point-to-register [24 114 27 119] copy-rectangle-as-kill [24 114 78] rectangle-number-lines [24 114 116] string-rectangle [24 114 111] open-rectangle [24 114 121] yank-rectangle [24 114 100] delete-rectangle [24 114 107] kill-rectangle [24 114 99] clear-rectangle [24 115] save-some-buffers [24 117] undo [24 118 126] vc-revision-other-window [24 118 68] vc-root-diff [24 118 61] vc-diff [24 118 43] vc-update [24 118 118] vc-next-action [24 118 117] vc-revert [24 118 115] vc-create-tag [24 118 114] vc-retrieve-tag [24 118 109] vc-merge [24 118 79] vc-log-outgoing [24 118 73] vc-log-incoming [24 118 76] vc-print-root-log [24 118 108] vc-print-log [24 118 105] vc-register [24 118 104] vc-insert-headers [24 118 103] vc-annotate [24 118 100] vc-dir [24 118 99] vc-rollback [24 118 98] vc-switch-backend [24 118 97] vc-update-change-log [24 122] repeat [24 123] shrink-window-horizontally [24 125] enlarge-window-horizontally [24 127] backward-kill-sentence [24 67108912] text-scale-adjust [24 67108925] text-scale-adjust [24 67108909] text-scale-adjust [24 67108907] text-scale-adjust [24 67108896] pop-global-mark [24 C-left] previous-buffer [24 left] previous-buffer [24 C-right] next-buffer [24 right] next-buffer [25] yank [26] suspend-frame [27 0] mark-sexp [27 1] beginning-of-defun [27 2] backward-sexp [27 3] exit-recursive-edit [27 4] down-list [27 5] end-of-defun [27 6] forward-sexp [27 8] mark-defun [27 9] complete-symbol [27 10] indent-new-comment-line [27 11] kill-sexp [27 12] reposition-window [27 14] forward-list [27 15] split-line [27 16] backward-list [27 18] isearch-backward-regexp [27 19] isearch-forward-regexp [27 20] transpose-sexps [27 21] backward-up-list [27 22] scroll-other-window [27 23] append-next-kill [27 27 58] eval-expression [27 27 27] keyboard-escape-quit [27 28] indent-region [27 32] just-one-space [27 33] shell-command [27 36] ispell-word [27 37] query-replace [27 38] async-shell-command [27 39] abbrev-prefix-mark [27 40] insert-parentheses [27 41] move-past-close-and-reindent [27 42] pop-tag-mark [27 44] tags-loop-continue [27 45] negative-argument [27 46] find-tag [27 47] dabbrev-expand [27 51] split-window-vertically [27 58] eval-expression [27 59] comment-dwim [27 60] beginning-of-buffer [27 61] count-words-region [27 62] end-of-buffer [27 64] mark-word [27 92] delete-horizontal-space [27 94] delete-indentation [27 96] tmm-menubar [27 97] backward-sentence [27 98] backward-word [27 99] capitalize-word [27 100] kill-word [27 101] forward-sentence [27 102] forward-word [27 103 9] move-to-column [27 103 112] previous-error [27 103 110] next-error [27 103 27 112] previous-error [27 103 27 110] next-error [27 103 27 103] goto-line [27 103 103] goto-line [27 103 99] goto-char [27 104] mark-paragraph [27 105] tab-to-tab-stop [27 106] indent-new-comment-line [27 107] kill-sentence [27 108] downcase-word [27 109] back-to-indentation [27 111 27 115] center-line [27 111 27 83] center-paragraph [27 111 27 111] font-lock-fontify-block [27 113] fill-paragraph [27 114] move-to-window-line-top-bottom [27 115 f8] highlight-symbol-at-point [27 115 46] isearch-forward-symbol-at-point [27 115 95] isearch-forward-symbol [27 115 119] isearch-forward-word [27 115 104 119] hi-lock-write-interactive-patterns [27 115 104 117] unhighlight-regexp [27 115 104 46] highlight-symbol-at-point [27 115 104 108] highlight-lines-matching-regexp [27 115 104 112] highlight-phrase [27 115 104 114] highlight-regexp [27 115 111] occur [27 116] transpose-words [27 117] upcase-word [27 118] scroll-down-command [27 119] kill-ring-save [27 120] execute-extended-command [27 121] yank-pop [27 122] zap-to-char [27 123] split-window-horizontally [27 124] shell-command-on-region [27 125] forward-paragraph [27 126] not-modified [27 127] backward-kill-word [27 67108901] query-replace-regexp [27 f10] toggle-frame-maximized [27 67108910] find-tag-regexp [27 67108911] dabbrev-completion [27 C-backspace] backward-kill-sexp [27 C-delete] backward-kill-sexp [27 67108896] mark-sexp [27 C-end] end-of-defun [27 C-home] beginning-of-defun [27 C-down] down-list [27 C-up] backward-up-list [27 C-right] forward-sexp [27 C-left] backward-sexp [27 left] backward-word [27 right] forward-word [27 begin] beginning-of-buffer-other-window [27 end] end-of-buffer-other-window [27 33554454] scroll-other-window-down [27 prior] scroll-other-window-down [27 next] scroll-other-window [27 home] beginning-of-buffer-other-window [27 67108909] negative-argument [27 67108921] digit-argument [27 67108920] digit-argument [27 67108919] digit-argument [27 67108918] digit-argument [27 67108917] digit-argument [27 67108916] digit-argument [27 67108915] digit-argument [27 67108914] digit-argument [27 67108913] digit-argument [27 67108912] digit-argument [28] toggle-input-method [29] abort-recursive-edit [127] delete-backward-char [S-mouse-3] kmacro-end-call-mouse [C-mouse-5] mwheel-scroll [S-mouse-5] mwheel-scroll [mouse-5] mwheel-scroll [C-mouse-4] mwheel-scroll [S-mouse-4] mwheel-scroll [mouse-4] mwheel-scroll [XF86WakeUp] ignore [f10] menu-bar-open [bottom-divider down-mouse-1] mouse-drag-mode-line [right-divider down-mouse-1] mouse-drag-vertical-line [vertical-line mouse-1] mouse-select-window [vertical-line down-mouse-1] mouse-drag-vertical-line [vertical-line C-mouse-2] mouse-split-window-vertically [vertical-scroll-bar mouse-1] scroll-bar-toolkit-scroll [vertical-scroll-bar C-mouse-2] mouse-split-window-vertically [header-line mouse-1] mouse-select-window [header-line down-mouse-1] mouse-drag-header-line [mode-line C-mouse-2] mouse-split-window-horizontally [mode-line mouse-3] mouse-delete-window [mode-line mouse-2] mouse-delete-other-windows [mode-line down-mouse-1] mouse-drag-mode-line [mode-line drag-mouse-1] mouse-select-window [mode-line mouse-1] mouse-select-window [S-down-mouse-1] mouse-appearance-menu [C-down-mouse-1] mouse-buffer-menu [mouse-3] mouse-save-then-kill [mouse-2] mouse-yank-primary [triple-mouse-1] mouse-set-point [double-mouse-1] mouse-set-point [drag-mouse-1] mouse-set-region [mouse-1] mouse-set-point [down-mouse-1] mouse-drag-region [M-mouse-2] mouse-yank-secondary [M-mouse-3] mouse-secondary-save-then-kill [M-down-mouse-1] mouse-drag-secondary [M-drag-mouse-1] mouse-set-secondary [M-mouse-1] mouse-start-secondary [M-f10] toggle-frame-maximized [f11] toggle-frame-fullscreen [compose-last-chars] compose-last-chars [f1 90] ergoemacs-clean-nw [f1 26] ergoemacs-clean-library [f1 122] ergoemacs-clean [f1 96] elisp-index-search [f1 57] ergoemacs-lookup-word-definition [f1 56] ergoemacs-lookup-wikipedia [f1 55] ergoemacs-lookup-google [f1 53] man [f1 51] describe-key [f1 50] describe-variable [f1 49] describe-function [f1 39] ergoemacs-describe-current-theme [f1 113] help-quit [f1 118] describe-variable [f1 119] where-is [f1 116] help-with-tutorial [f1 115] describe-syntax [f1 114] info-emacs-manual [f1 80] describe-package [f1 112] finder-by-keyword [f1 110] view-emacs-news [f1 109] describe-mode [f1 108] view-lossage [f1 107] describe-key [f1 52] describe-char [f1 105] info [f1 104] view-hello-file [f1 103] describe-gnu-project [f1 102] describe-function [f1 101] view-echo-area-messages [f1 100] apropos-documentation [f1 99] describe-key-briefly [f1 98] describe-bindings [f1 97] apropos-command [f1 83] info-lookup-symbol [f1 76] describe-language-environment [f1 75] Info-goto-emacs-key-command-node [f1 73] describe-input-method [f1 70] Info-goto-emacs-command-node [f1 67] describe-coding-system [f1 28] describe-input-method [f1 23] describe-no-warranty [f1 20] view-emacs-todo [f1 16] view-emacs-problems [f1 15] describe-distribution [f1 14] view-emacs-news [f1 13] view-order-manuals [f1 6] view-emacs-FAQ [f1 5] view-external-packages [f1 4] view-emacs-debugging [f1 3] describe-copying [f1 1] about-emacs [f1 63] help-for-help [f1 46] display-local-help [f1 f1] help-for-help [f1 help] help-for-help [f1 8] help-for-help [help 90] ergoemacs-clean-nw [help 26] ergoemacs-clean-library [help 122] ergoemacs-clean [help 96] elisp-index-search [help 57] ergoemacs-lookup-word-definition [help 56] ergoemacs-lookup-wikipedia [help 55] ergoemacs-lookup-google [help 53] man [help 51] describe-key [help 50] describe-variable [help 49] describe-function [help 39] ergoemacs-describe-current-theme [help 113] help-quit [help 118] describe-variable [help 119] where-is [help 116] help-with-tutorial [help 115] describe-syntax [help 114] info-emacs-manual [help 80] describe-package [help 112] finder-by-keyword [help 110] view-emacs-news [help 109] describe-mode [help 108] view-lossage [help 107] describe-key [help 52] describe-char [help 105] info [help 104] view-hello-file [help 103] describe-gnu-project [help 102] describe-function [help 101] view-echo-area-messages [help 100] apropos-documentation [help 99] describe-key-briefly [help 98] describe-bindings [help 97] apropos-command [help 83] info-lookup-symbol [help 76] describe-language-environment [help 75] Info-goto-emacs-key-command-node [help 73] describe-input-method [help 70] Info-goto-emacs-command-node [help 67] describe-coding-system [help 28] describe-input-method [help 23] describe-no-warranty [help 20] view-emacs-todo [help 16] view-emacs-problems [help 15] describe-distribution [help 14] view-emacs-news [help 13] view-order-manuals [help 6] view-emacs-FAQ [help 5] view-external-packages [help 4] view-emacs-debugging [help 3] describe-copying [help 1] about-emacs [help 63] help-for-help [help 46] display-local-help [help f1] help-for-help [help help] help-for-help [help 8] help-for-help [f2 115] 2C-split [f2 98] 2C-associate-buffer [f2 f2] 2C-two-columns [f2 50] 2C-two-columns [menu-bar mouse-1] tmm-menubar-mouse [f4] kmacro-end-or-call-macro [f3] kmacro-start-macro-or-insert-counter [C-M-end] end-of-defun [C-M-home] beginning-of-defun [C-M-down] down-list [C-M-up] backward-up-list [C-M-right] forward-sexp [C-M-left] backward-sexp [S-delete] kill-region [C-backspace] backward-kill-word [C-delete] kill-word [C-left] left-word [C-right] right-word [M-left] left-word [M-right] right-word [mouse-movement] ignore [deletechar] delete-forward-char [deleteline] kill-line [insertline] open-line [open] find-file [again] repeat-complex-command [redo] repeat-complex-command [undo] undo [S-insertchar] yank [C-insertchar] kill-ring-save [insertchar] overwrite-mode [S-insert] yank [C-insert] kill-ring-save [insert] overwrite-mode [execute] execute-extended-command [M-begin] beginning-of-buffer-other-window [begin] beginning-of-buffer [M-end] end-of-buffer-other-window [C-end] end-of-buffer [end] move-end-of-line [M-prior] scroll-other-window-down [M-next] scroll-other-window [C-next] scroll-left [C-prior] scroll-right [C-down] forward-paragraph [C-up] backward-paragraph [next] scroll-up-command [prior] scroll-down-command [down] next-line [right] right-char [up] previous-line [left] left-char [M-home] beginning-of-buffer-other-window [C-home] beginning-of-buffer [home] move-beginning-of-line [C-S-backspace] kill-whole-line [find] search-forward [menu] execute-extended-command [67108896] set-mark-command [67108921] digit-argument [67108920] digit-argument [67108919] digit-argument [67108918] digit-argument [67108917] digit-argument [67108916] digit-argument [67108915] digit-argument [67108914] digit-argument [67108913] digit-argument [67108912] digit-argument [XF86Back] previous-buffer [XF86Forward] next-buffer [67108911] undo [delete-frame] handle-delete-frame [select-window] handle-select-window [switch-frame] handle-switch-frame)))) (:map-key -2305843009213693782 :parent (:map-key -2305843009213693843)) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693781) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693780) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693779) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693778) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693777) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693776) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693775) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693774) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693773) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693772) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693771) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693770) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:only-local-modifications-p t :map-list-hash (ergoemacs-translate--normal-map ergoemacs-normal-translation-local-map) :use-local-unbind-list-key no :use-set-map-key no)) (:map-key -2305843009213693766) #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:use-local-unbind-list-key no :use-set-map-key no))))] ergoemacs-theme-hash [object pcache-entry "pcache-entry" 1442351083.143162 7776000 #s(hash-table size 65 test equal rehash-size 1.5 rehash-threshold 0.8 data ("lvl0" (:name "lvl0" :description "CUA-mode style" :components (unicode-fonts undo-tree lvl0-theme) :optional-on nil :optional-off nil :options-menu nil :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") "defined-themes" ("reduction" "standard" "lvl2" "lvl1" "lvl0") "lvl1" (:name "lvl1" :description "Arrow Key Movements Only" :components (unicode-fonts undo-tree lvl1-theme move-char) :optional-on nil :optional-off nil :options-menu nil :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") "lvl2" (:name "lvl2" :description "Arrow Key Movements, Moving/Deleting Words" :components (unicode-fonts undo-tree lvl2-theme move-char move-word) :optional-on nil :optional-off nil :options-menu nil :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") "standard" (:name "standard" :description "Standard Ergoemacs Theme" :components (unicode-fonts undo-tree standard-theme copy dired-tab dired-to-wdired execute fixed-newline help kill-line misc move-bracket move-buffer move-char move-line move-page move-paragraph move-word search select-items switch text-transform ergoemacs-remaps standard-vars) :optional-on (apps-punctuation tab-indents-region icy-reclaim apps-apps apps-toggle apps backspace-del-seq backspace-is-back fn-keys f2-edit fixed-bold-italic standard-fixed ido-remaps helm-remaps multiple-cursors-remaps quit apps-swap save-options-on-exit menu-bar-help menu-bar-languages menu-bar-view menu-bar-search menu-bar-edit menu-bar-file) :optional-off (guru alt-backspace-is-undo search-reg no-backspace ergoemacs-banish-shift move-and-transpose-lines move-sexp helm-switch-sources helm-files-up ido-prev-next-instead-of-left-right join-line) :options-menu (("Menu/Apps Key" (apps apps-apps apps-punctuation apps-toggle)) ("Function Keys" (fn-keys f2-edit)) ("Helm Options" (helm-switch-sources helm-files-up)) ("Remaps" (ido-remaps helm-remaps multiple-cursors-remaps icy-reclaim)) ("Extreme ErgoEmacs" (guru no-backspace ergoemacs-banish-shift)) ("Standard Keys" (standard-fixed fixed-bold-italic quit move-and-transpose-lines alt-backspace-is-undo)) ("Keys during Key Sequence" (f2-edit apps-swap backspace-del-seq)) ("Disputed Keys" (ido-prev-next-instead-of-left-right move-sexp)) ("Extra Functionality" (join-line)) ("Packages" (ace-window avy multiple-cursors expand-region)) ("Ergoemacs global menus" (menu-bar-file menu-bar-edit menu-bar-search menu-bar-view menu-bar-languages menu-bar-help))) :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc") "reduction" (:name "reduction" :description "Reduce Ergoemacs keys" :based-on (quote standard) :components (unicode-fonts undo-tree reduction-theme multiple-cursors avy ace-window expand-region standard-theme copy dired-tab dired-to-wdired execute fixed-newline help kill-line misc move-bracket move-buffer move-char move-line move-page move-paragraph move-word search select-items switch text-transform ergoemacs-remaps standard-vars) :optional-on (apps-punctuation tab-indents-region icy-reclaim apps-apps apps-toggle apps backspace-del-seq backspace-is-back fn-keys f2-edit fixed-bold-italic standard-fixed ido-remaps helm-remaps multiple-cursors-remaps quit apps-swap save-options-on-exit menu-bar-help menu-bar-languages menu-bar-view menu-bar-search menu-bar-edit menu-bar-file) :optional-off (guru alt-backspace-is-undo search-reg no-backspace ergoemacs-banish-shift move-and-transpose-lines move-sexp helm-switch-sources helm-files-up ido-prev-next-instead-of-left-right join-line) :options-menu (("Menu/Apps Key" (apps apps-apps apps-punctuation apps-toggle)) ("Function Keys" (fn-keys f2-edit)) ("Helm Options" (helm-switch-sources helm-files-up)) ("Remaps" (ido-remaps helm-remaps multiple-cursors-remaps icy-reclaim)) ("Extreme ErgoEmacs" (guru no-backspace ergoemacs-banish-shift)) ("Standard Keys" (standard-fixed fixed-bold-italic quit move-and-transpose-lines alt-backspace-is-undo)) ("Keys during Key Sequence" (f2-edit apps-swap backspace-del-seq)) ("Disputed Keys" (ido-prev-next-instead-of-left-right move-sexp)) ("Extra Functionality" (join-line)) ("Packages" (ace-window avy multiple-cursors expand-region)) ("Ergoemacs global menus" (menu-bar-file menu-bar-edit menu-bar-search menu-bar-view menu-bar-languages menu-bar-help))) :file "/home/lief/.emacs.d/elpa/ergoemacs-mode-20150914.649/ergoemacs-themes.elc")))] ergoemacs-translate--event-hash [object pcache-entry "pcache-entry" 1442351083.1433184 7776000 #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (ergoemacs-layout-us #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (126 96 s96 126 33 49 s49 33 64 50 s50 64 35 51 s51 35 36 52 s52 36 37 53 s53 37 94 54 s54 94 38 55 s55 38 42 56 s56 42 40 57 s57 40 41 48 s48 41 95 45 s45 95 43 61 s61 43 123 91 s91 123 125 93 s93 125 124 92 s92 124 58 59 s59 58 34 39 s39 34 60 44 s44 60 62 46 s46 62 63 47 s47 63)) ergoemacs-layout-programmer-dv #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (126 36 s36 126 37 38 s38 37 55 91 s91 55 53 123 s123 53 51 125 s125 51 49 40 s40 49 57 61 s61 57 48 42 s42 48 50 41 s41 50 52 43 s43 52 54 93 s93 54 56 33 s33 56 96 35 s35 96 58 59 s59 58 60 44 s44 60 62 46 s46 62 63 47 s47 63 94 64 s64 94 124 92 s92 124 95 45 s45 95 34 39 s39 34))))] ergoemacs-translate--hash [object pcache-entry "pcache-entry" 1442351083.1435955 7776000 #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (ergoemacs-layout-programmer-dv #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (ergoemacs-layout-us #s(hash-table size 97 test eql rehash-size 1.5 rehash-threshold 0.8 data (36 96 38 49 91 50 123 51 125 52 40 53 61 54 42 55 41 56 43 57 93 48 33 45 35 61 59 113 44 119 46 101 112 114 121 116 102 121 103 117 99 105 114 111 108 112 47 91 64 93 92 92 97 97 111 115 101 100 117 102 105 103 100 104 104 106 116 107 110 108 115 59 45 39 39 122 113 120 106 99 107 118 120 98 98 110 109 109 119 44 118 46 122 47 126 126 37 33 55 64 53 35 51 36 49 37 57 94 48 38 50 42 52 40 54 41 56 95 96 43 58 81 60 87 62 69 80 82 89 84 70 89 71 85 67 73 82 79 76 80 63 123 94 125 124 124 65 65 79 83 69 68 85 70 73 71 68 72 72 74 84 75 78 76 83 58 95 34 34 90 81 88 74 67 75 86 88 66 66 78 77 77 87 60 86 62 90 63)))) ergoemacs-layout-us #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (ergoemacs-layout-programmer-dv #s(hash-table size 97 test eql rehash-size 1.5 rehash-threshold 0.8 data (96 36 49 38 50 91 51 123 52 125 53 40 54 61 55 42 56 41 57 43 48 93 45 33 61 35 113 59 119 44 101 46 114 112 116 121 121 102 117 103 105 99 111 114 112 108 91 47 93 64 92 92 97 97 115 111 100 101 102 117 103 105 104 100 106 104 107 116 108 110 59 115 39 45 122 39 120 113 99 106 118 107 98 120 110 98 109 109 44 119 46 118 47 122 126 126 33 37 64 55 35 53 36 51 37 49 94 57 38 48 42 50 40 52 41 54 95 56 43 96 81 58 87 60 69 62 82 80 84 89 89 70 85 71 73 67 79 82 80 76 123 63 125 94 124 124 65 65 83 79 68 69 70 85 71 73 72 68 74 72 75 84 76 78 58 83 34 95 90 34 88 81 67 74 86 75 66 88 78 66 77 77 60 87 62 86 63 90))))))] ergoemacs-translation-hash [object pcache-entry "pcache-entry" 1442351083.143676 7776000 #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:normal [cl-struct-ergoemacs-translation-struct "normal" nil nil nil nil nil nil (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693770))) (8 . ergoemacs-read-key-help) (f1 . ergoemacs-read-key-help)) (keymap) nil nil :normal nil] :ctl-to-alt #[0 "\301\302\303\304\305\306\307\310\311\312\313\314\315\316\317\320\321\322\323\324\325\326\327\330\331\332\333\334\335\336\337\340\341\342\343\344\345\346\347\350\351\352\353\354\355\356\357 \360\361\362#\210\360\363\364!\362#\210\360\365=\203J \366\202K \367\370#\210\360\363\371!\372#\210\360\363\373!\374#\210\211\262&.\207" [system-type ergoemacs-translate--create :key :ctl-to-alt :name "ctl-to-alt" :description "Ctl <-> Alt translation" :text #[0 "\300\301\302\303\304\"\"\207" [format "<Ctl%sAlt> " ergoemacs-key-description--unicode-char "↔" " to "] 5 "

(fn)"] :meta (control) :control (meta) :meta-shift (control shift) :control-shift (meta shift) :control-hyper (meta hyper) :meta-hyper (control hyper) :control-super (meta super) :meta-super (control super) :meta-shift-hyper (control shift hyper) :control-shift-hyper (meta shift hyper) :meta-shift-super (control shift super) :control-shift-super (meta shift super) :meta-super-hyper (control super hyper) :control-super-hyper (meta super hyper) :meta-super-hyper-shift (control super hyper shift) :control-super-hyper-shift (meta super hyper shift) :modal-color "blue" :modal-always t :keymap make-sparse-keymap define-key [f1] ergoemacs-read-key-help read-kbd-macro "M-h" windows-nt [M-apps] [M-menu] ergoemacs-read-key-force-next-key-is-quoted "SPC" ergoemacs-read-key-force-next-key-is-ctl "M-SPC" ergoemacs-read-key-force-next-key-is-alt] 51 "Ctl <-> Alt translation

(fn)"] :unchorded-ctl #[0 "\300\301\302\303\304\305\306\307\310\311\312\313\314\315\316\317\320\321\322 \323\324\325#\210\323\326\327!\330#\210\323\326\331!\332#\210\323\333\334#\210\323\335\332#\210\211\262&\207" [ergoemacs-translate--create :key :unchorded-ctl :name "unchorded-ctl" :description "Make the Ctl key sticky." :text "<Ctl+>" :unchorded (control) :shift (control shift) :meta nil :control (meta) :keymap make-sparse-keymap define-key [f1] ergoemacs-read-key-help read-kbd-macro "SPC" ergoemacs-read-key-force-next-key-is-quoted "M-SPC" ergoemacs-read-key-force-next-key-is-alt-ctl "g" ergoemacs-read-key-force-next-key-is-alt "G"] 23 "Make the Ctl key sticky.

(fn)"] :unchorded-alt #[0 "\300\301\302\303\304\305\306\307\310\311\312\313\314\315\316\317\320\321\322 \323\324\325!\326#\210\323\324\327!\326#\210\211\262&\207" [ergoemacs-translate--create :key :unchorded-alt :name "unchorded-alt" :description "Make the Alt key sticky." :text "<Alt+>" :unchorded (meta) :shift (meta shift) :meta (meta shift) :modal-color "red" :keymap-modal make-sparse-keymap define-key read-kbd-macro "<return>" ergoemacs-unchorded-alt-modal "RET"] 23 "Make the Alt key sticky.

(fn)"]))] ergoemacs-breadcrumb-hash [object pcache-entry "pcache-entry" 1442351083.1437616 7776000 #s(hash-table size 65 test eql rehash-size 1.5 rehash-threshold 0.8 data (:minor-mode-map-alist:compilation-minor-mode -2305843009213693782 -2305843009213693782 :minor-mode-map-alist:compilation-minor-mode :minor-mode-map-alist:compilation-shell-minor-mode -2305843009213693781 -2305843009213693781 :minor-mode-map-alist:compilation-shell-minor-mode :minor-mode-map-alist:ido-mode -2305843009213693780 -2305843009213693780 :minor-mode-map-alist:ido-mode :minor-mode-map-alist:electric-pair-mode -2305843009213693779 -2305843009213693779 :minor-mode-map-alist:electric-pair-mode :minor-mode-map-alist:semantic-mru-bookmark-mode -2305843009213693778 -2305843009213693778 :minor-mode-map-alist:semantic-mru-bookmark-mode :minor-mode-map-alist:semantic-highlight-func-mode -2305843009213693777 -2305843009213693777 :minor-mode-map-alist:semantic-highlight-func-mode :minor-mode-map-alist:semantic-stickyfunc-mode -2305843009213693776 -2305843009213693776 :minor-mode-map-alist:semantic-stickyfunc-mode :minor-mode-map-alist:semantic-show-unmatched-syntax-mode -2305843009213693775 -2305843009213693775 :minor-mode-map-alist:semantic-show-unmatched-syntax-mode :minor-mode-map-alist:semantic-mode -2305843009213693774 -2305843009213693774 :minor-mode-map-alist:semantic-mode :minor-mode-map-alist:flycheck-mode -2305843009213693773 -2305843009213693773 :minor-mode-map-alist:flycheck-mode :minor-mode-map-alist:yas-minor-mode -2305843009213693772 -2305843009213693772 :minor-mode-map-alist:yas-minor-mode :minor-mode-map-alist:2C-mode -2305843009213693771 -2305843009213693771 :minor-mode-map-alist:2C-mode :minor-mode-map-alist:mml-mode -2305843009213693766 -2305843009213693766 :minor-mode-map-alist:mml-mode))] ergoemacs-map-properties--create-label-function [object pcache-entry "pcache-entry" 1442351083.1455047 7776000 (lambda nil (progn (eval-after-load "comint" (quote (when (boundp (quote comint-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote comint-mode-map)) (ergoemacs-map-properties--label comint-mode-map -2305843009213693784)))) (eval-after-load "compile" (quote (when (boundp (quote compilation-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote compilation-mode-map)) (ergoemacs-map-properties--label compilation-mode-map -2305843009213693769)))) (eval-after-load "info" (quote (when (boundp (quote Info-edit-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote Info-edit-mode-map)) (ergoemacs-map-properties--label Info-edit-mode-map -2305843009213693825)))) (eval-after-load "lisp-mode" (quote (when (boundp (quote emacs-lisp-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote emacs-lisp-mode-map)) (ergoemacs-map-properties--label emacs-lisp-mode-map -2305843009213693817)))) (eval-after-load "loaddefs" (quote (when (boundp (quote eudc-tools-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote eudc-tools-menu)) (ergoemacs-map-properties--label eudc-tools-menu -2305843009213693820)))) (eval-after-load "bindings" (quote (when (boundp (quote mode-line-column-line-number-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote mode-line-column-line-number-mode-map)) (ergoemacs-map-properties--label mode-line-column-line-number-mode-map -2305843009213693821)))) (eval-after-load "subr" (quote (when (boundp (quote read-passwd-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote read-passwd-map)) (ergoemacs-map-properties--label read-passwd-map -2305843009213693822)))) (eval-after-load "undo-tree" (quote (when (boundp (quote undo-tree-visualizer-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote undo-tree-visualizer-mode-map)) (ergoemacs-map-properties--label undo-tree-visualizer-mode-map -2305843009213693813)))) (eval-after-load "startup" (quote (when (boundp (quote splash-screen-keymap)) (ergoemacs-command-loop--spinner-display "Label %s" (quote splash-screen-keymap)) (ergoemacs-map-properties--label splash-screen-keymap -2305843009213693823)))) (eval-after-load "package" (quote (when (boundp (quote package-menu-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote package-menu-mode-map)) (ergoemacs-map-properties--label package-menu-mode-map -2305843009213693824)))) (eval-after-load "bindings" (quote (when (boundp (quote mode-line-major-mode-keymap)) (ergoemacs-command-loop--spinner-display "Label %s" (quote mode-line-major-mode-keymap)) (ergoemacs-map-properties--label mode-line-major-mode-keymap -2305843009213693825)))) (eval-after-load "info" (quote (when (boundp (quote Info-mode-line-node-keymap)) (ergoemacs-command-loop--spinner-display "Label %s" (quote Info-mode-line-node-keymap)) (ergoemacs-map-properties--label Info-mode-line-node-keymap -2305843009213693817)))) (eval-after-load "kmacro" (quote (when (boundp (quote kmacro-keymap)) (ergoemacs-command-loop--spinner-display "Label %s" (quote kmacro-keymap)) (ergoemacs-map-properties--label kmacro-keymap -2305843009213693827)))) (eval-after-load "menu-bar" (quote (when (boundp (quote menu-bar-manuals-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-manuals-menu)) (ergoemacs-map-properties--label menu-bar-manuals-menu -2305843009213693828)))) (eval-after-load "abbrev" (quote (when (boundp (quote edit-abbrevs-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote edit-abbrevs-mode-map)) (ergoemacs-map-properties--label edit-abbrevs-mode-map -2305843009213693899)))) (eval-after-load "help" (quote (when (boundp (quote help-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote help-map)) (ergoemacs-map-properties--label help-map -2305843009213693829)))) (eval-after-load "buff-menu" (quote (when (boundp (quote Buffer-menu-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote Buffer-menu-mode-map)) (ergoemacs-map-properties--label Buffer-menu-mode-map -2305843009213693830)))) (eval-after-load "bindings" (quote (when (boundp (quote goto-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote goto-map)) (ergoemacs-map-properties--label goto-map -2305843009213693831)))) (eval-after-load "info" (quote (when (boundp (quote Info-edit-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote Info-edit-map)) (ergoemacs-map-properties--label Info-edit-map -2305843009213693825)))) (eval-after-load "menu-bar" (quote (when (boundp (quote tty-menu-navigation-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote tty-menu-navigation-map)) (ergoemacs-map-properties--label tty-menu-navigation-map -2305843009213693833)))) (eval-after-load "facemenu" (quote (when (boundp (quote facemenu-face-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote facemenu-face-menu)) (ergoemacs-map-properties--label facemenu-face-menu -2305843009213693834)))) (eval-after-load "minibuffer" (quote (when (boundp (quote minibuffer-local-completion-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote minibuffer-local-completion-map)) (ergoemacs-map-properties--label minibuffer-local-completion-map -2305843009213693835)))) (eval-after-load "facemenu" (quote (when (boundp (quote facemenu-special-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote facemenu-special-menu)) (ergoemacs-map-properties--label facemenu-special-menu -2305843009213693836)))) (eval-after-load "info" (quote (when (boundp (quote Info-mode-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote Info-mode-menu)) (ergoemacs-map-properties--label Info-mode-menu -2305843009213693830)))) (eval-after-load "wid-edit" (quote (when (boundp (quote widget-key-sequence-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote widget-key-sequence-map)) (ergoemacs-map-properties--label widget-key-sequence-map -2305843009213693837)))) (eval-after-load "bindings" (quote (when (boundp (quote mode-line-buffer-identification-keymap)) (ergoemacs-command-loop--spinner-display "Label %s" (quote mode-line-buffer-identification-keymap)) (ergoemacs-map-properties--label mode-line-buffer-identification-keymap -2305843009213693838)))) (eval-after-load "lisp-mode" (quote (when (boundp (quote lisp-mode-shared-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote lisp-mode-shared-map)) (ergoemacs-map-properties--label lisp-mode-shared-map -2305843009213693839)))) (eval-after-load "minibuffer" (quote (when (boundp (quote minibuffer-local-must-match-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote minibuffer-local-must-match-map)) (ergoemacs-map-properties--label minibuffer-local-must-match-map -2305843009213693840)))) (eval-after-load "bindings" (quote (when (boundp (quote abbrev-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote abbrev-map)) (ergoemacs-map-properties--label abbrev-map -2305843009213693841)))) (eval-after-load "bindings" (quote (when (boundp (quote search-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote search-map)) (ergoemacs-map-properties--label search-map -2305843009213693842)))) (eval-after-load "simple" (quote (when (boundp (quote special-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote special-mode-map)) (ergoemacs-map-properties--label special-mode-map -2305843009213693843)))) (eval-after-load "ediff-hook" (quote (when (boundp (quote menu-bar-ediff-merge-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-ediff-merge-menu)) (ergoemacs-map-properties--label menu-bar-ediff-merge-menu -2305843009213693844)))) (eval-after-load "facemenu" (quote (when (boundp (quote facemenu-foreground-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote facemenu-foreground-menu)) (ergoemacs-map-properties--label facemenu-foreground-menu -2305843009213693845)))) (eval-after-load "replace" (quote (when (boundp (quote occur-menu-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote occur-menu-map)) (ergoemacs-map-properties--label occur-menu-map -2305843009213693846)))) (eval-after-load "minibuffer" (quote (when (boundp (quote minibuffer-local-filename-completion-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote minibuffer-local-filename-completion-map)) (ergoemacs-map-properties--label minibuffer-local-filename-completion-map -2305843009213693847)))) (eval-after-load "menu-bar" (quote (when (boundp (quote menu-bar-showhide-fringe-ind-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-showhide-fringe-ind-menu)) (ergoemacs-map-properties--label menu-bar-showhide-fringe-ind-menu -2305843009213693848)))) (eval-after-load "bindings" (quote (when (boundp (quote narrow-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote narrow-map)) (ergoemacs-map-properties--label narrow-map -2305843009213693849)))) (eval-after-load "two-column" (quote (when (boundp (quote 2C-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote 2C-mode-map)) (ergoemacs-map-properties--label 2C-mode-map -2305843009213693850)))) (eval-after-load "simple" (quote (when (boundp (quote completion-list-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote completion-list-mode-map)) (ergoemacs-map-properties--label completion-list-mode-map -2305843009213693851)))) (eval-after-load "mule-cmds" (quote (when (boundp (quote setup-language-environment-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote setup-language-environment-map)) (ergoemacs-map-properties--label setup-language-environment-map -2305843009213693852)))) (eval-after-load "cus-edit" (quote (when (boundp (quote custom-field-keymap)) (ergoemacs-command-loop--spinner-display "Label %s" (quote custom-field-keymap)) (ergoemacs-map-properties--label custom-field-keymap -2305843009213693854)))) (eval-after-load "menu-bar" (quote (when (boundp (quote menu-bar-line-wrapping-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-line-wrapping-menu)) (ergoemacs-map-properties--label menu-bar-line-wrapping-menu -2305843009213693855)))) (eval-after-load "indent" (quote (when (boundp (quote edit-tab-stops-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote edit-tab-stops-map)) (ergoemacs-map-properties--label edit-tab-stops-map -2305843009213693856)))) (eval-after-load "undo-tree" (quote (when (boundp (quote undo-tree-visualizer-selection-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote undo-tree-visualizer-selection-mode-map)) (ergoemacs-map-properties--label undo-tree-visualizer-selection-mode-map -2305843009213693851)))) (eval-after-load "menu-bar" (quote (when (boundp (quote menu-bar-file-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-file-menu)) (ergoemacs-map-properties--label menu-bar-file-menu -2305843009213693867)))) (eval-after-load "facemenu" (quote (when (boundp (quote facemenu-indentation-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote facemenu-indentation-menu)) (ergoemacs-map-properties--label facemenu-indentation-menu -2305843009213693857)))) (eval-after-load "menu-bar" (quote (when (boundp (quote menu-bar-showhide-tool-bar-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-showhide-tool-bar-menu)) (ergoemacs-map-properties--label menu-bar-showhide-tool-bar-menu -2305843009213693858)))) (eval-after-load "text-mode" (quote (when (boundp (quote text-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote text-mode-map)) (ergoemacs-map-properties--label text-mode-map -2305843009213693860)))) (eval-after-load "info" (quote (when (boundp (quote Info-link-keymap)) (ergoemacs-command-loop--spinner-display "Label %s" (quote Info-link-keymap)) (ergoemacs-map-properties--label Info-link-keymap -2305843009213693856)))) (eval-after-load "mule-cmds" (quote (when (boundp (quote mule-menu-keymap)) (ergoemacs-command-loop--spinner-display "Label %s" (quote mule-menu-keymap)) (ergoemacs-map-properties--label mule-menu-keymap -2305843009213693861)))) (eval-after-load "info" (quote (when (boundp (quote Info-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote Info-mode-map)) (ergoemacs-map-properties--label Info-mode-map -2305843009213693858)))) (eval-after-load "menu-bar" (quote (when (boundp (quote menu-bar-showhide-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-showhide-menu)) (ergoemacs-map-properties--label menu-bar-showhide-menu -2305843009213693862)))) (eval-after-load "ediff-hook" (quote (when (boundp (quote menu-bar-ediff-misc-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-ediff-misc-menu)) (ergoemacs-map-properties--label menu-bar-ediff-misc-menu -2305843009213693863)))) (eval-after-load "simple" (quote (when (boundp (quote minibuffer-local-shell-command-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote minibuffer-local-shell-command-map)) (ergoemacs-map-properties--label minibuffer-local-shell-command-map -2305843009213693864)))) (eval-after-load "minibuffer" (quote (when (boundp (quote completion-in-region-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote completion-in-region-mode-map)) (ergoemacs-map-properties--label completion-in-region-mode-map -2305843009213693865)))) (eval-after-load "isearch" (quote (when (boundp (quote isearch-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote isearch-mode-map)) (ergoemacs-map-properties--label isearch-mode-map -2305843009213693866)))) (eval-after-load "menu-bar" (quote (when (boundp (quote menu-bar-files-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-files-menu)) (ergoemacs-map-properties--label menu-bar-files-menu -2305843009213693867)))) (eval-after-load "bookmark" (quote (when (boundp (quote bookmark-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote bookmark-map)) (ergoemacs-map-properties--label bookmark-map -2305843009213693865)))) (eval-after-load "menu-bar" (quote (when (boundp (quote menu-bar-search-documentation-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-search-documentation-menu)) (ergoemacs-map-properties--label menu-bar-search-documentation-menu -2305843009213693869)))) (eval-after-load "wid-edit" (quote (when (boundp (quote widget-global-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote widget-global-map)) (ergoemacs-map-properties--label widget-global-map -2305843009213693952)))) (eval-after-load "info" (quote (when (boundp (quote info-tool-bar-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote info-tool-bar-map)) (ergoemacs-map-properties--label info-tool-bar-map -2305843009213693867)))) (eval-after-load "cus-edit" (quote (when (boundp (quote custom-mode-link-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote custom-mode-link-map)) (ergoemacs-map-properties--label custom-mode-link-map -2305843009213693870)))) (eval-after-load "replace" (quote (when (boundp (quote query-replace-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote query-replace-map)) (ergoemacs-map-properties--label query-replace-map -2305843009213693871)))) (eval-after-load "menu-bar" (quote (when (boundp (quote menu-bar-search-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-search-menu)) (ergoemacs-map-properties--label menu-bar-search-menu -2305843009213693872)))) (eval-after-load "simple" (quote (when (boundp (quote visual-line-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote visual-line-mode-map)) (ergoemacs-map-properties--label visual-line-mode-map -2305843009213693873)))) (eval-after-load "help-mode" (quote (when (boundp (quote help-mode-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote help-mode-menu)) (ergoemacs-map-properties--label help-mode-menu -2305843009213693874)))) (eval-after-load "subr" (quote (when (boundp (quote ctl-x-4-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote ctl-x-4-map)) (ergoemacs-map-properties--label ctl-x-4-map -2305843009213693875)))) (eval-after-load "menu-bar" (quote (when (boundp (quote global-buffers-menu-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote global-buffers-menu-map)) (ergoemacs-map-properties--label global-buffers-menu-map -2305843009213693763)))) (eval-after-load "replace" (quote (when (boundp (quote occur-edit-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote occur-edit-mode-map)) (ergoemacs-map-properties--label occur-edit-mode-map -2305843009213693877)))) (eval-after-load "menu-bar" (quote (when (boundp (quote menu-bar-describe-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-describe-menu)) (ergoemacs-map-properties--label menu-bar-describe-menu -2305843009213693880)))) (eval-after-load "wid-edit" (quote (when (boundp (quote widget-text-keymap)) (ergoemacs-command-loop--spinner-display "Label %s" (quote widget-text-keymap)) (ergoemacs-map-properties--label widget-text-keymap -2305843009213693881)))) (eval-after-load "simple" (quote (when (boundp (quote messages-buffer-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote messages-buffer-mode-map)) (ergoemacs-map-properties--label messages-buffer-mode-map -2305843009213693882)))) (eval-after-load "isearch" (quote (when (boundp (quote isearch-help-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote isearch-help-map)) (ergoemacs-map-properties--label isearch-help-map -2305843009213693883)))) (eval-after-load "facemenu" (quote (when (boundp (quote facemenu-keymap)) (ergoemacs-command-loop--spinner-display "Label %s" (quote facemenu-keymap)) (ergoemacs-map-properties--label facemenu-keymap -2305843009213693884)))) (eval-after-load "two-column" (quote (when (boundp (quote 2C-minor-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote 2C-minor-mode-map)) (ergoemacs-map-properties--label 2C-minor-mode-map -2305843009213693885)))) (eval-after-load "wid-edit" (quote (when (boundp (quote widget-field-keymap)) (ergoemacs-command-loop--spinner-display "Label %s" (quote widget-field-keymap)) (ergoemacs-map-properties--label widget-field-keymap -2305843009213693886)))) (eval-after-load "vc-hooks" (quote (when (boundp (quote vc-mode-line-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote vc-mode-line-map)) (ergoemacs-map-properties--label vc-mode-line-map -2305843009213693887)))) (eval-after-load "menu-bar" (quote (when (boundp (quote menu-bar-encryption-decryption-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-encryption-decryption-menu)) (ergoemacs-map-properties--label menu-bar-encryption-decryption-menu -2305843009213693888)))) (eval-after-load "ediff-hook" (quote (when (boundp (quote menu-bar-ediff-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-ediff-menu)) (ergoemacs-map-properties--label menu-bar-ediff-menu -2305843009213693889)))) (eval-after-load "replace" (quote (when (boundp (quote occur-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote occur-mode-map)) (ergoemacs-map-properties--label occur-mode-map -2305843009213693890)))) (eval-after-load "bindings" (quote (when (boundp (quote ctl-x-r-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote ctl-x-r-map)) (ergoemacs-map-properties--label ctl-x-r-map -2305843009213693891)))) (eval-after-load "tabulated-list" (quote (when (boundp (quote tabulated-list-sort-button-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote tabulated-list-sort-button-map)) (ergoemacs-map-properties--label tabulated-list-sort-button-map -2305843009213693893)))) (eval-after-load "mule-cmds" (quote (when (boundp (quote describe-language-environment-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote describe-language-environment-map)) (ergoemacs-map-properties--label describe-language-environment-map -2305843009213693894)))) (eval-after-load "prog-mode" (quote (when (boundp (quote prog-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote prog-mode-map)) (ergoemacs-map-properties--label prog-mode-map -2305843009213693895)))) (eval-after-load "lisp-mode" (quote (when (boundp (quote lisp-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote lisp-mode-map)) (ergoemacs-map-properties--label lisp-mode-map -2305843009213693896)))) (eval-after-load "pcvs-defs" (quote (when (boundp (quote cvs-global-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote cvs-global-menu)) (ergoemacs-map-properties--label cvs-global-menu -2305843009213693895)))) (eval-after-load "tabulated-list" (quote (when (boundp (quote tabulated-list-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote tabulated-list-mode-map)) (ergoemacs-map-properties--label tabulated-list-mode-map -2305843009213693898)))) (eval-after-load "abbrev" (quote (when (boundp (quote edit-abbrevs-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote edit-abbrevs-map)) (ergoemacs-map-properties--label edit-abbrevs-map -2305843009213693899)))) (eval-after-load "facemenu" (quote (when (boundp (quote facemenu-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote facemenu-menu)) (ergoemacs-map-properties--label facemenu-menu -2305843009213693900)))) (eval-after-load "cus-edit" (quote (when (boundp (quote Custom-mode-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote Custom-mode-menu)) (ergoemacs-map-properties--label Custom-mode-menu -2305843009213693901)))) (eval-after-load "isearch" (quote (when (boundp (quote minibuffer-local-isearch-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote minibuffer-local-isearch-map)) (ergoemacs-map-properties--label minibuffer-local-isearch-map -2305843009213693902)))) (eval-after-load "mule-cmds" (quote (when (boundp (quote set-coding-system-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote set-coding-system-map)) (ergoemacs-map-properties--label set-coding-system-map -2305843009213693903)))) (eval-after-load "kmacro" (quote (when (boundp (quote kmacro-step-edit-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote kmacro-step-edit-map)) (ergoemacs-map-properties--label kmacro-step-edit-map -2305843009213693905)))) (eval-after-load "bindings" (quote (when (boundp (quote mode-line-input-method-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote mode-line-input-method-map)) (ergoemacs-map-properties--label mode-line-input-method-map -2305843009213693906)))) (eval-after-load "menu-bar" (quote (when (boundp (quote menu-bar-showhide-scroll-bar-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-showhide-scroll-bar-menu)) (ergoemacs-map-properties--label menu-bar-showhide-scroll-bar-menu -2305843009213693907)))) (eval-after-load "common-win" (quote (when (boundp (quote x-alternatives-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote x-alternatives-map)) (ergoemacs-map-properties--label x-alternatives-map -2305843009213693908)))) (eval-after-load "bindings" (quote (when (boundp (quote mode-line-mode-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote mode-line-mode-menu)) (ergoemacs-map-properties--label mode-line-mode-menu -2305843009213693911)))) (eval-after-load "menu-bar" (quote (when (boundp (quote menu-bar-tools-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-tools-menu)) (ergoemacs-map-properties--label menu-bar-tools-menu -2305843009213693912)))) (eval-after-load "button" (quote (when (boundp (quote button-buffer-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote button-buffer-map)) (ergoemacs-map-properties--label button-buffer-map -2305843009213693913)))) (eval-after-load "menu-bar" (quote (when (boundp (quote menu-bar-showhide-fringe-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-showhide-fringe-menu)) (ergoemacs-map-properties--label menu-bar-showhide-fringe-menu -2305843009213693914)))) (eval-after-load "menu-bar" (quote (when (boundp (quote menu-bar-help-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-help-menu)) (ergoemacs-map-properties--label menu-bar-help-menu -2305843009213693915)))) (eval-after-load "undo-tree" (quote (when (boundp (quote undo-tree-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote undo-tree-map)) (ergoemacs-map-properties--label undo-tree-map -2305843009213693914)))) (eval-after-load "bookmark" (quote (when (boundp (quote menu-bar-bookmark-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-bookmark-map)) (ergoemacs-map-properties--label menu-bar-bookmark-map -2305843009213693915)))) (eval-after-load "menu-bar" (quote (when (boundp (quote menu-bar-custom-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-custom-menu)) (ergoemacs-map-properties--label menu-bar-custom-menu -2305843009213693917)))) (eval-after-load "help-mode" (quote (when (boundp (quote help-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote help-mode-map)) (ergoemacs-map-properties--label help-mode-map -2305843009213693918)))) (eval-after-load "mule-cmds" (quote (when (boundp (quote mule-keymap)) (ergoemacs-command-loop--spinner-display "Label %s" (quote mule-keymap)) (ergoemacs-map-properties--label mule-keymap -2305843009213693919)))) (eval-after-load "bindings" (quote (when (boundp (quote mode-line-minor-mode-keymap)) (ergoemacs-command-loop--spinner-display "Label %s" (quote mode-line-minor-mode-keymap)) (ergoemacs-map-properties--label mode-line-minor-mode-keymap -2305843009213693920)))) (eval-after-load "menu-bar" (quote (when (boundp (quote menu-bar-games-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-games-menu)) (ergoemacs-map-properties--label menu-bar-games-menu -2305843009213693921)))) (eval-after-load "facemenu" (quote (when (boundp (quote facemenu-justification-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote facemenu-justification-menu)) (ergoemacs-map-properties--label facemenu-justification-menu -2305843009213693922)))) (eval-after-load "simple" (quote (when (boundp (quote universal-argument-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote universal-argument-map)) (ergoemacs-map-properties--label universal-argument-map -2305843009213693923)))) (eval-after-load "bindings" (quote (when (boundp (quote mode-line-coding-system-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote mode-line-coding-system-map)) (ergoemacs-map-properties--label mode-line-coding-system-map -2305843009213693924)))) (eval-after-load "minibuffer" (quote (when (boundp (quote minibuffer-inactive-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote minibuffer-inactive-mode-map)) (ergoemacs-map-properties--label minibuffer-inactive-mode-map -2305843009213693925)))) (eval-after-load "subr" (quote (when (boundp (quote global-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote global-map)) (ergoemacs-map-properties--label global-map -2305843009213693952)))) (eval-after-load "subr" (quote (when (boundp (quote ctl-x-5-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote ctl-x-5-map)) (ergoemacs-map-properties--label ctl-x-5-map -2305843009213693926)))) (eval-after-load "menu-bar" (quote (when (boundp (quote menu-bar-i-search-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-i-search-menu)) (ergoemacs-map-properties--label menu-bar-i-search-menu -2305843009213693927)))) (eval-after-load "menu-bar" (quote (when (boundp (quote menu-bar-goto-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-goto-menu)) (ergoemacs-map-properties--label menu-bar-goto-menu -2305843009213693928)))) (eval-after-load "vc-hooks" (quote (when (boundp (quote vc-menu-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote vc-menu-map)) (ergoemacs-map-properties--label vc-menu-map -2305843009213693929)))) (eval-after-load "ispell" (quote (when (boundp (quote ispell-menu-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote ispell-menu-map)) (ergoemacs-map-properties--label ispell-menu-map -2305843009213693929)))) (eval-after-load "button" (quote (when (boundp (quote button-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote button-map)) (ergoemacs-map-properties--label button-map -2305843009213693931)))) (eval-after-load "facemenu" (quote (when (boundp (quote facemenu-background-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote facemenu-background-menu)) (ergoemacs-map-properties--label facemenu-background-menu -2305843009213693932)))) (eval-after-load "ediff-hook" (quote (when (boundp (quote menu-bar-epatch-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-epatch-menu)) (ergoemacs-map-properties--label menu-bar-epatch-menu -2305843009213693934)))) (eval-after-load "simple" (quote (when (boundp (quote read-expression-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote read-expression-map)) (ergoemacs-map-properties--label read-expression-map -2305843009213693937)))) (eval-after-load "indent" (quote (when (boundp (quote indent-rigidly-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote indent-rigidly-map)) (ergoemacs-map-properties--label indent-rigidly-map -2305843009213693938)))) (eval-after-load "vc-hooks" (quote (when (boundp (quote vc-prefix-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote vc-prefix-map)) (ergoemacs-map-properties--label vc-prefix-map -2305843009213693939)))) (eval-after-load "tool-bar" (quote (when (boundp (quote tool-bar-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote tool-bar-map)) (ergoemacs-map-properties--label tool-bar-map -2305843009213693939)))) (eval-after-load "menu-bar" (quote (when (boundp (quote menu-bar-edit-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-edit-menu)) (ergoemacs-map-properties--label menu-bar-edit-menu -2305843009213693940)))) (eval-after-load "edmacro" (quote (when (boundp (quote edmacro-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote edmacro-mode-map)) (ergoemacs-map-properties--label edmacro-mode-map -2305843009213693941)))) (eval-after-load "wid-edit" (quote (when (boundp (quote widget-keymap)) (ergoemacs-command-loop--spinner-display "Label %s" (quote widget-keymap)) (ergoemacs-map-properties--label widget-keymap -2305843009213693942)))) (eval-after-load "replace" (quote (when (boundp (quote multi-query-replace-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote multi-query-replace-map)) (ergoemacs-map-properties--label multi-query-replace-map -2305843009213693943)))) (eval-after-load "cus-edit" (quote (when (boundp (quote custom-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote custom-mode-map)) (ergoemacs-map-properties--label custom-mode-map -2305843009213693944)))) (eval-after-load "subr" (quote (when (boundp (quote ctl-x-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote ctl-x-map)) (ergoemacs-map-properties--label ctl-x-map -2305843009213693945)))) (eval-after-load "menu-bar" (quote (when (boundp (quote menu-bar-options-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-options-menu)) (ergoemacs-map-properties--label menu-bar-options-menu -2305843009213693946)))) (eval-after-load "lisp-mode" (quote (when (boundp (quote lisp-interaction-mode-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote lisp-interaction-mode-map)) (ergoemacs-map-properties--label lisp-interaction-mode-map -2305843009213693948)))) (eval-after-load "subr" (quote (when (boundp (quote esc-map)) (ergoemacs-command-loop--spinner-display "Label %s" (quote esc-map)) (ergoemacs-map-properties--label esc-map -2305843009213693949)))) (eval-after-load "menu-bar" (quote (when (boundp (quote menu-bar-replace-menu)) (ergoemacs-command-loop--spinner-display "Label %s" (quote menu-bar-replace-menu)) (ergoemacs-map-properties--label menu-bar-replace-menu -2305843009213693950))))))] ergoemacs-map-properties--get-or-generate-map-key [object pcache-entry "pcache-entry" 1442351083.1456046 7776000 -2305843009213693760] ergoemacs-map-properties--before-ergoemacs [object pcache-entry "pcache-entry" 1442351083.1456697 7776000 (keymap (ergoemacs-labeled lambda nil (interactive) (quote (:map-key -2305843009213693789))) (24 keymap (118 keymap (71 . vc-ignore))))]))
  :timestamp 1442351083.2120385)
